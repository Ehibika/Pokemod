/* -=- Player Dadabase -=-
 * Contains values mainly relevant to player stats
 * 

*/

#library "DB_Player"
#include "zcommon.acs"
#import "Dex_Pokemon.acs"
#import "Dex_Leveling.acs"
#import "Dex_Types.acs"
#import "Dex_BaseStats.acs"
#import "Dex_Skin.acs"

int PlayerJumpZ[64];
int PlayerClassMem[64];

#LIBDEFINE POKEDEXNUM 0
#LIBDEFINE POKELEVEL 1
#LIBDEFINE POKEEXP 2
#LIBDEFINE POKENEXTEXP 3
#LIBDEFINE POKEBP 4


Function Int GetPokeValue (Int Mode)
{
	int OutPut;
	switch(Mode)
	{
	Case POKEDEXNUM: OutPut = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber())); Break;
	Case POKELEVEL: OutPut = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber())); Break;
	Case POKEEXP: OutPut = GetCvar(StrParam(s:"PlayerEXP_",i:PlayerNumber())); Break;
	Case POKEBP: OutPut = GetCvar(StrParam(s:"Player",i:PlayerNumber(),s:"_BP")); Break;
	}



return OutPut;
}


Function Int GetPlayerPokeValue (Int P, Int Mode)
{
	int OutPut;
	switch(Mode)
	{
	Case POKEDEXNUM: OutPut = GetCvar(StrParam(s:"PlayerDEXNum_",i:P)); Break;
	Case POKELEVEL: OutPut = GetCvar(StrParam(s:"PlayerLevel_",i:P)); Break;
	Case POKEEXP: OutPut = GetCvar(StrParam(s:"PlayerEXP_",i:P)); Break;
	Case POKEBP: OutPut = GetCvar(StrParam(s:"Player",i:P,s:"_BP")); Break;
	}



return OutPut;
}

Script "GetPokeValue" (Int Mode)
{
	int OutPut;
	
	switch(Mode)
	{
	Case POKEDEXNUM: OutPut = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber())); Break;
	Case POKELEVEL: OutPut = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber())); Break;
	Case POKEEXP: OutPut = GetCvar(StrParam(s:"PlayerEXP_",i:PlayerNumber())); Break;
	Case POKEBP: OutPut = GetCvar(StrParam(s:"Player",i:PlayerNumber(),s:"_BP")); Break;
	}



SetResultValue(OutPut);
}

Script "GetPlayerFrags" (int p)
{
SetActivator(p+1000,AAPTR_DEFAULT);
SetResultValue(PlayerFrags());
}

Script "checkEXPtoMax" (void)
{
// -=- Checks if the player has reached their EXP maximum, returns the remaining exp to max -=-
int output;

int PlayerDEX = GetPokeValue(POKEDEXNUM);
int Curexp = GetPokeValue(POKEEXP);
int GrowthRate = StatDEX[PlayerDEX][9];
int EXPCap = LevelUpTable[GrowthRate][PKMN_MaxLVL-1];
int EXPDiff = EXPCap-Curexp;
//log(i:EXPDiff);
if(EXPDiff < 0){EXPDiff = 0;}

output = EXPDiff;

SetResultValue(output);
}

function int getLastHit(int TID)
{
//if(!((ClassifyActor(TID) & ACTOR_ALIVE))){Return -3;} //Actor died, terminate script function
if(GetUserVariable(TID,"user_HitFrame") == 0){Return -2;} //not on HitFrame
if(GetUserVariable(TID,"user_HitMemory") == 0){Return -1;} //no Hitmemory data
Return GetUserVariable(TID,"user_HitMemory");
}

Function Int IsValidPKMNActor(int TID)
{
//Returns if the actor in question is a pokemon
if(ClassifyActor(TID) & ACTOR_PLAYER) {Return 1;}

if(ClassifyActor(TID) & ACTOR_MONSTER)
	{
		int ret = GetCVAR("sv_MaxClients");
	
		if(PlayerCount()>ret){ret = PlayerCount();}// admins can join above the max player limit.
		//log(i:ret+1000);
		//log(i:ret+GetCvar("Sv_MaxEntities")+1000);
		if(TID >= ret+1000 && TID <= ret+GetCvar("Sv_MaxEntities")+1000) {Return 2;}
	}

	return 0;
}

Function bool GetMaxEntities(void)
{
	int ret = GetCVAR("sv_MaxClients");
	
	if(PlayerCount()>ret) // admins can join above the max player limit.
	{
		ret = PlayerCount();
	}

	int output = ret+GetCvar("Sv_MaxEntities");
	return output;
}


Function bool CheckActorTeam(int TID)
{
	if(ClassifyActor(TID) & ACTOR_PLAYER) {return GetPlayerInfo(TID-1000, PLAYERINFO_TEAM);}

	if(ClassifyActor(TID) & ACTOR_MONSTER)
		{
			if(CheckActorInventory(TID,"LightTeamFlag")) {Return 0;}
			if(CheckActorInventory(TID,"WilyTeamFlag")) {Return 1;}
			if(CheckActorInventory(TID,"CossackTeamFlag")) {Return 2;}
			if(CheckActorInventory(TID,"KingTeamFlag")) {Return 3;}
		}

		return -1;
}