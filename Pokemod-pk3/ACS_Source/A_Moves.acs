/* -=- Move Scripts -=-
 * Specialized scripts made for specific moves within the game.
 *

*/

#library "A_Moves"
#include "zcommon.acs"
#include "8bdmlib.acs"
//#import "tools.acs"
#import "DB_Player.acs"
#import "DB_Data.acs"
#import "Dex_Pokemon.acs"
#import "Dex_Types.acs"
#import "Dex_Moves.acs"
#import "WEPACS.acs"
#import "A_Stats.acs"
#import "A_Leveling.acs"
#import "Dex_Leveling.acs"
#import "Dex_BaseStats.acs"
#import "G_Action.acs"
Script "SketchGrab" (Void)
{

// -=- meant to work with the targeter, grabs the move that your tracer currently has and replaces sketch with it -=-


// -=- first, grab what slot this sketch is on -=-
int ThisWeapon = WhichWeapon();
int MyTID = ActivatorTID();
Int TracerTID = ACS_NamedExecuteWithResult("Tracer_GetTID",0);
Int SketchSlot;

for(int i=1;i<=4;i++)
    {
    if(CheckInventory(StrParam(s:weapons_ammo[ThisWeapon][0],i:i))){SketchSlot = i; break;}
    }

SetActivator(TracerTID,AAPTR_DEFAULT);
int SketchWeapon = WhichWeapon();
SetActivator(MyTID,AAPTR_DEFAULT);

// -=- check if you have this weapon already -=-

for(i=1;i<=4;i++)
    {
    if(CheckInventory(StrParam(s:weapons_ammo[SketchWeapon][0],i:i)))
        {
        print(s:"You already know ",s:weapons_ammo[SketchWeapon][2],s:"!!"); 
        Terminate;
        }
    }

GiveInventory(StrParam(s:weapons_ammo[SketchWeapon][0],i:SketchSlot),1);
TakeInventory(StrParam(s:weapons_ammo[ThisWeapon][0],i:SketchSlot),99);

//now if the player has less than 4 weapons, let's relearn sketch on the
//next empty slot
if(SketchSlot<4)
    {
        GiveInventory(StrParam(s:weapons_ammo[SKETCH][0],i:SketchSlot+1),1);

        /* Now this is assuming that since most pokemon always have 4 moves, and there is no
         * way to delete moves at all, since smeargle starts with only sketch, the next slot
         * will always be empty since smeargle is also barred from learning TMs
        */
    }
    SetWeapon(StrParam(s:weapons_ammo[SketchWeapon][0],i:SketchSlot));
}

Script "ProtectBarrierWarper" (void) CLIENTSIDE
{
	int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	
	// Loop if shield is active
	while(GetActorProperty(Player, APROP_HEALTH)>0
	&& CheckActorInventory(Player, "ProtectGuard") > 0
	){
		Delay(1);
	}
	
    // Remove
    SetActorState(0,"Death");
    Delay(17);
	Thing_Remove(0);
}

Script "AlertFXWarper" (void) CLIENTSIDE
{
	int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	
	// Loop if shield is active
	while(GetActorProperty(Player, APROP_HEALTH)>0
	&& CheckActorInventory(Player, "CringeGuard") > 0
	){
		Delay(1);
	}
	
    // Remove
    SetActorState(0,"Death");
    Delay(17);
	Thing_Remove(0);
}

Script "FreezeFXWarper" (void) CLIENTSIDE
{
	int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	
	// Loop if shield is active
	while(GetActorProperty(Player, APROP_HEALTH)>0
	&& CheckActorInventory(Player, "FreezeMark") > 0
	){
		Delay(1);
	}
	
    // Remove
    SetActorState(0,"Death");
    Delay(17);
	Thing_Remove(0);
}

Script "FalseSwipeDamage" (int Damage)
{
int TargTID = ACS_NamedExecuteWithResult("core_gettarget",0);
int TracTID = ACS_NamedExecuteWithResult("core_gettracer",0);
ACS_NamedExecuteAlways("FalseBuddha",0,TracTID,1);
Delay(1);
Thing_Damage2(TracTID,Damage,"FalseSwipe");
ACS_NamedExecuteAlways("FalseBuddha",0,TracTID,0);
}

Script "FalseBuddha" (int TID, int State)
{
SetActivator(TID,AAPTR_DEFAULT);
SetPlayerProperty(0, State, PROP_BUDDHA);
}

Script "FalseEXPAward" (void)
{
if(EXPTime() == 0){Terminate;}
int TargTID = ACS_NamedExecuteWithResult("core_gettarget",0);
int VictimPN = Playernumber();
    int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:VictimPN));
    int PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:VictimPN));
    int VictimFrags = ACS_NamedExecuteWithResult("GetPlayerFrags",VictimPN);
    int VictimBounty = StatDEX[PlayerDexNum][6];
int EXPAward = VictimBounty*PlayerLVL;

//SetActivatorToTarget(0);
//int KillerTID = ActivatorTID();
// --=- no exp if you kill yourself
//if(VictimTID == KillerTID){Terminate;}

ACS_NamedExecuteAlways("GivePlayerEXP",0,TargTID-1000,EXPAward);
//log(s:GetTeamProperty(PlayerTeam(),TPROP_Name), s:" Team EXP Award ", i:TeamEXPAward[PlayerTeam()]);
}

Script "GrabMoveCount" (int WepID)
{
// grabs generic count inventories for Various moves
int FiringPlayer;
str CountActor = StrParam(s:weapons_ammo[WepID][2],s:"Count");
int Output;

if(ActivatorTID() <= 999)
	{FiringPlayer= ACS_ExecuteWithResult(257, 0); }//Returns the target of the activator
else if(ActivatorTID() >= EntityTID && ActivatorTID() <= (EntityTID+6499))
	{FiringPlayer= ACS_ExecuteWithResult(257, 0);} //Actor is a player spawed entity, Returns the target of the activator
else{FiringPlayer=ActivatorTID();}

if(FiringPlayer == 0){Output = CheckInventory(CountActor);}
else {Output = CheckActorInventory(FiringPlayer,CountActor);}

SetResultValue(Output);
}

#DEFINE HAZTID 3700000 // 37| TeamNum | PlayerNum | Hazard num
#DEFINE HAZMAX 30
int HazTIDRecord[64];

Script "HazardTID" (Void)
{

if(activatorTID() != 0){Thing_Remove(0); Terminate;}

int FiringPlayer = ACS_NamedExecuteWithResult("core_gettarget",0);
int FPN = FiringPlayer-1000;
Int TeamNum = ACS_NamedExecuteWithResult("core_getplayerteam",FPN);

int BaseHazTID = HAZTID+(TeamNum*10000)+(FPN*1000);

int newHazTID = HazTIDRecord[FPN];
int MaxHazTID = BaseHazTID+HAZMAX;

if(!newHazTID){newHazTID = BaseHazTID;}
else if(newHazTID > MaxHazTID){newHazTID = BaseHazTID;}
until(!IsTIDUsed(newHazTID)){Thing_remove(newHazTID);}
Thing_ChangeTID(0,newHazTID);
HazTIDRecord[FPN] = newHazTID+1;

}

Script "HazardScrub" (int ScrubRange)
{
    int FiringPlayer = ACS_NamedExecuteWithResult("core_gettarget",0);
    Int TeamNum = ACS_NamedExecuteWithResult("core_getplayerteam",FiringPlayer-1000);
int MaxTeams = GetCvar("sv_maxteams");
int MaxPlayers = PlayerCount();
int CheckTID;


for(int j; j < MaxTeams; j++)
{if(j == TeamNum){continue;}
    for(int k; k < MaxPlayers; k++)
    {
        For(int i; i<HAZMAX;i++)
        {
            CheckTID = HAZTID+(j*10000)+(k*1000)+i;
            if(IsTIDUsed(CheckTID) 
                && xyzDistance(0,CheckTID) <= ScrubRange
                && j != TeamNum){SetActorState(CheckTID,"Purge");}           
        }
        i = 0;
    }
    k = 0;
}

/*
For(int i; i<HAZMAX;i++)
    {
    for(int j; j < MaxTeams; j++)
    { if(j == TeamNum){continue;}

        for(int k; k < 64; k++)
        {
            CheckTID = HAZTID + (j*10000)+(k*1000)+i;
            if(IsTIDUsed(CheckTID) 
                && xyzDistance(0,CheckTID) <= ScrubRange
                && j != TeamNum){SetActorState(CheckTID,"Purge");}
        }
        k = 0;
    }
    j = 0;
    }
*/
}


// Make's Smoke less Opaque for teams
script "TeamSmoke"  (VOID) CLIENTSIDE
{

    int cln = consolePlayerNumber();
	int FiringPlayer= ACS_ExecuteWithResult(257, 0) - 1000;
    if( GetPlayerInfo(cln, PLAYERINFO_TEAM) == GetPlayerInfo(FiringPlayer, PLAYERINFO_TEAM))//(PlayerClass((consolePlayerNumber() >= SUPPORTSTART) && PlayerClass((consolePlayerNumber()) <= SUPPORTEND)))
    {
       SetActorProperty(0,APROP_ALPHA,0.05);
    }
}

Script "AbsorbEffect" (int Per)
{
int Amount = getLastHit(0);
switch(Amount)
    {
        case -3: terminate; break;
        case -2: Delay(1); Restart; break;
        case -1: terminate; break;
    }

int DrainerTID = ACS_NamedExecuteWithResult("core_gettarget",0);

if(!CheckActorInventory(DrainerTID,"Absorb_Active")){Terminate;}

Amount = (Amount*Per)/100;
if(Amount<1) Amount = 1;

GiveInventory("AbsorbDrainFXSpawner",1);
SetActivator(DrainerTID,AAPTR_DEFAULT);
ACS_NamedExecuteAlways("PKMNACS_Basic(Over)Heal",0,0,Amount);
}

Script "LifeDrainEffect" (int Per)
{

    int Amount = getLastHit(0);
    switch(Amount)
        {
            case -3: terminate; break;
            case -2: Delay(1); Restart; break;
            case -1: terminate; break;
        }

int DrainerTID = ACS_NamedExecuteWithResult("core_gettarget",0);

Amount = (Amount*Per)/100;
if(Amount<1) Amount = 1;

SetActivator(DrainerTID,AAPTR_DEFAULT);
ACS_NamedExecuteAlways("PKMNACS_Basic(Over)Heal",0,0,Amount);
}

Script "RemoteControlActor" (int ActorSpeed, int MaxRange)
{

    int OwnerTID = ACS_NamedExecuteWithResult("core_gettarget",0);
    if (MaxRange <= 0){MaxRange = 500;}

    int InputButtons;
    int InputOldButtons; 
    int UpInput;
    int DownInput;
    int LeftInput;
    int RightInput;
    Int ConfirmInput;
    Int CancelInput;


    int Velx;
    int Vely;
    int Velx2;
    int Vely2;
    int Angle;
    int HostAngle;
    int MoveAngle;
    while(GetActorProperty(OwnerTID, APROP_HEALTH)>0 && !CheckActorInventory(OwnerTID,"RemoteKiller"))
    {	
        //log(s:"test");
        // - Grab Inputs -
        InputButtons = GetPlayerInput(OwnerTID-1000, INPUT_BUTTONS);
        UpInput = ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD);
        DownInput = ButtonCheck(InputButtons, InputOldButtons, BT_BACK);
        LeftInput = ButtonCheck(InputButtons, InputOldButtons, BT_MOVELEFT);
        RightInput = ButtonCheck(InputButtons, InputOldButtons, BT_MOVERIGHT);
        ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
        CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);
        Angle = GetActorAngle(OwnerTID);
        HostAngle = VectorAngle (GetActorX (0) - GetActorX (OwnerTID), GetActorY (0) - GetActorY (OwnerTID));
        //MoveAngle = Angle;


        Velx = 0;
        vely = 0;
        VelX2 = 0;
        Vely2 = 0;
        if(UpInput != DownInput)
            {
                if(UpInput == 3){Velx = FixedMul(cos(Angle),  ActorSpeed*65536); vely = FixedMul(Sin(Angle),  ActorSpeed*65536);}
                if(DownInput == 3){Velx = FixedMul(cos(Angle), -ActorSpeed*65536); vely = FixedMul(Sin(Angle),  -ActorSpeed*65536);}
            }  

        if(LeftInput != RightInput)
            {
                if(LeftInput == 3){Velx2 = FixedMul(cos(-Angle),  ActorSpeed*65536); vely2 = FixedMul(Sin(-Angle),  ActorSpeed*65536);}
                if(RightInput == 3){Velx2 = FixedMul(cos(-Angle), -ActorSpeed*65536); vely2 = FixedMul(Sin(-Angle),  -ActorSpeed*65536);}
            }    
//log(f:HostAngle);
            if(CancelInput == 1){Thing_Remove(0); Terminate;}
            if(ConfirmInput == 1){SetActorState(0,"Trigger");}
    SetActorVelocity(0, velx+vely2, vely+velx2, 0, FALSE, FALSE);
    SetActorAngle (0,Angle );

    if(xyDistance(0, OwnerTID) > MaxRange)
        {
            Warp(OwnerTID,MaxRange*cos(HostAngle),MaxRange*Sin(-HostAngle),0,HostAngle,WARPF_ABSOLUTEANGLE|WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_TOFLOOR);
            SetActorAngle (0,Angle );
        //Velx = FixedMul(cos(HostAngle),  ActorSpeed*65536); vely = FixedMul(Sin(HostAngle),  ActorSpeed*65536);
        //SetActorVelocity(0, velx, vely, 0, FALSE, FALSE);    
        }
    Delay(1);
	InputOldButtons = InputButtons;
    }

    Thing_Remove(0);
}


Script "GrabRemoteCoor" (int T)
{
int output;
switch(T)
    {
    case 0: output = GetUserVariable(0,"user_RemoteX"); break;
    case 1: output = GetUserVariable(0,"user_RemoteY"); break;
    case 2: output = GetUserVariable(0,"user_RemoteZ"); break;
    }
SetResultValue(output);
}

script "SnapToRemote" (int X_Placement)
{
    int OwnerTID = ACS_NamedExecuteWithResult("core_gettarget",0);
    int OwnerPnum = OwnerTID-1000;
    Warp(9100+OwnerPnum, X_Placement, 0, 0, 0, WARPF_ABSOLUTEPOSITION|WARPF_USECALLERANGLE|WARPF_INTERPOLATE);

}

#DEFINE SUBTID 380000 // 37| Owner TID

Script "SubstituteSetup" (void)
{

    int OwnerTID = ACS_NamedExecuteWithResult("core_gettarget",0);
    int OwnerMaxHP = GetActorProperty(OwnerTID, APROP_SPAWNHEALTH);
    int OwnerHP = GetActorProperty(OwnerTID, APROP_HEALTH);
    int SubsHP = OwnerMaxHP/3;
    int SubsPDEF = CheckActorInventory(OwnerTID,"Active_PDefense");
    int SubsSDEF = CheckActorInventory(OwnerTID,"Active_SDefense");
    int StatValue;
    int ModStat;
    int DollTID = SUBTID+OwnerTID;
    Bool Replaced;

    if(IsTIDUsed(DollTID))
        {
            until(!IsTIDUsed(DollTID)){SpawnSpotForced("SubPoofFXSpawn",DollTID,0,0); Thing_remove(DollTID);}
            Replaced = True;
        }
    Thing_ChangeTID(0,DollTID);

    SetActorPRoperty(0,APROP_SPAWNHEALTH,SubsHP);
    SetActorPRoperty(0,APROP_HEALTH,SubsHP);
    SetActorProperty(OwnerTID, APROP_HEALTH,OwnerHP-SubsHP);
    //Log(i:SubsHP);

    ModStat = SubsPDEF;

if(ModStat >= STATBASELINE)
    {
    StatValue = Noneg(ValueMap(ModStat,STATMAX,STATBASELINE,DEFVAL1,DEFVAL2));
    }
else
    {
    StatValue = Noneg(ValueMap(ModStat,STATBASELINE,STATMIN,DEFVAL2,DEFVAL3));    
    }
if(StatValue < 10){StatValue = 10;}
GiveInventory(StrParam(s:"PDEF",i:StatValue),1);

ModStat = SubsSDEF;

if(ModStat >= STATBASELINE)
    {
    StatValue = Noneg(ValueMap(ModStat,STATMAX,STATBASELINE,DEFVAL1,DEFVAL2));
    }
    else
    {
    StatValue = Noneg(ValueMap(ModStat,STATBASELINE,STATMIN,DEFVAL2,DEFVAL3));    
    }
if(StatValue < 10){StatValue = 10;}
GiveInventory(StrParam(s:"SDEF",i:StatValue),1);

}



Script "SubstituteActive" (int Dist)
{
    int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
    Int DollTID = ActivatorTID();
    Int DollState = 0;
    int DollNewState = 0;
	
	// Loop if shield is active
	while(GetActorProperty(0, APROP_HEALTH)>0 && GetActorProperty(Player, APROP_HEALTH)>0){
        //log(i:xyzDistance(0,Player),s:"   ",i:Dist);
        if(CheckSight(DollTID,Player,0) && xyzDistance(DollTID,Player) < Dist)
            {
               //GiveActorInventory(DollTID,"SubstituteFunction_A",1);
               //SpawnProjectile(1, "SubstituteLinkFX", 0, 20, 0, 0, 0);
            //if(CheckActorInventory(Player,"SubGuard"))GiveActorInventory(Player,"SubstituteGuardGiver_B",1);
           // else GiveActorInventory(Player,"SubstituteGuardGiver_A",1);
           DollNewState = 1;
            }
            else {DollNewState = 0;}

            if(DollState != DollNewState)
            {

                //Switch(DollNewState)
                //    {
                //        Case 0: SetActorState(DollTID,"Spawn.Basic",0); Break;
                //        Case 1: SetActorState(DollTID,"Spawn.Linked",0); Break;
                //    }
                SetUserVariable(DollTID,"User_DecoyState",DollNewState);
                 DollState = DollNewState;
                 
            }
		Delay(1);
    }
    
    if(GetActorProperty(Player, APROP_HEALTH)<=0 || !PlayerInGame(Player-1000)){SpawnSpotForced("SubPoofFXSpawn",DollTID,0,0); Thing_remove(DollTID);}
}


Script "SubstituteBarrierWarper" (void) CLIENTSIDE
{
	int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	
	// Loop if shield is active
	while(GetActorProperty(Player, APROP_HEALTH)>0
	&& CheckActorInventory(Player, "SubGuard") > 0
	){
		Delay(1);
	}
	
    // Remove
    SetActorState(0,"Death");
    Delay(17);
	Thing_Remove(0);
}


Script "GeneralWarper" (void) CLIENTSIDE
{
	int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	
	// Loop if shield is active
	while(GetActorProperty(Player, APROP_HEALTH)>0
	&& CheckActorInventory(Player, "BasicWarperHold") > 0 
	){
		Delay(1);
	}
	
    // Remove
    SetActorState(0,"Death");
    Delay(17);
	Thing_Remove(0);
}

#DEFINE STATUS_MINOR  1
#DEFINE STATUS_MAJOR  2
#DEFINE STATUS_SPECIALTY  4
#DEFINE STATUS_STATS  8
#DEFINE STATUS_TAUNT  16
//#DEFINE STATUS_  16

Script "CheckStatusGuard" (int Pointer, int Input)
{
Int Output;

/*
 * 0 = no status protection
 * 1 = Minor status protection
 * 2 = Major status protection
 *
 */ 

if(Pointer!=0){SetActivator(0,Pointer);}

if(CheckInventory("SleepMark")
||CheckInventory("PoisonMark")
||CheckInventory("BurnMark")
||CheckInventory("ParalysisMark")
||CheckInventory("semiFreezeMark")
||CheckInventory("FreezeMark")
||CheckInventory("RestMark"))
{Output = Output | STATUS_MAJOR;}

if(CheckInventory("ProtectGuard")
||CheckInventory("DetectGuard")
||CheckInventory("SubGuard"))
{Output = Output | STATUS_MAJOR | STATUS_MINOR | STATUS_STATS;}

    if(CheckInventory("SafeguardPower")
    ||CheckInventory("CraftyShieldPower"))
    {Output = Output | STATUS_MAJOR | STATUS_MINOR | STATUS_SPECIALTY | STATUS_TAUNT;}

    if(CheckInventory("MistFlag"))
    {Output = Output | STATUS_STATS  | STATUS_MINOR;}

SetResultValue(Output & Input);
}

Script "InfernoPowerLevel" (int MaxDamage)
{
    int Player = ACS_NamedExecuteWithResult("core_gettarget",0);

    int CurrentPower = CheckActorInventory(Player,"InfernoPower");
    int Output = ((MaxDamage*CurrentPower)/100);
    SetResultValue(Output);
}

Script "DisableEffect" (Void)
{
int ThisWeapon = WhichWeapon();
TakeInventory("DisableFlag",999);
GiveInventory("DisableFlag",ThisWeapon);
}

Script "IsMoveDisabled" (Void)
{

//used so that you get an error sound when attempting to use a disabled move

int ThisWeapon = WhichWeapon();
int Output;

if(CheckInventory("DisableFlag") == ThisWeapon){Output = 1;}
SetResultValue(Output);
}


#DEFINE BARRIERTID 390000 // 37| Owner TID

script "BarrierBlockTID" (void)
{
    int OwnerTID = ACS_NamedExecuteWithResult("core_gettarget",0);
    int WallTID = BARRIERTID+OwnerTID;

    if(IsTIDUsed(WallTID))
    {
        until(!IsTIDUsed(WallTID)){/*SpawnSpotForced("SubPoofFXSpawn",WallTID,0,0);*/ Thing_remove(WallTID);}
    }
    Thing_ChangeTID(0,WallTID);
}

Script "BarrierStatGrab" (int WallTID)
{

    int OwnerTID = ACS_NamedExecuteWithResult("core_gettarget",0);
    int OwnerMaxHP = GetActorProperty(OwnerTID, APROP_SPAWNHEALTH);
    int StatValue;
    int ModStat;

    //Log(i:SubsHP);



    GiveInventory(StrParam(s:"PDEF",i:100),1);
    GiveInventory(StrParam(s:"SDEF",i:100),1);

    ModStat = CheckActorInventory(OwnerTID,"Active_PAttack");

if(ModStat >= STATBASELINE)
    {
    StatValue = Noneg(ValueMap(ModStat,STATMAX,STATBASELINE,50,200));
    }
else
    {
    StatValue = Noneg(ValueMap(ModStat,STATBASELINE,STATMIN,50,10));    
    }
if(StatValue < 10){StatValue = 10;}

SetActorProperty(0,APROP_SPAWNHEALTH,StatValue);
SetActorProperty(0,APROP_HEALTH,StatValue);

SetUserVariable(0,"User_HPR1",(StatValue/4)*3);
SetUserVariable(0,"User_HPR2",StatValue/2);
//SetActorProperty(0,APROP_SPECIES,GetActorProperty(OwnerTID,APROP_SPECIES));
//ACS_NamedExecuteAlways("ConsoleSpeciesSynch",0);

}

