
#library "A_Targeter"
#include "zcommon.acs"
#include "8bdmlib.acs"

// - Targeter Constants -
#LIBDEFINE TG_TEAM 1
#LIBDEFINE TG_ENEMY 2
//MAX_TARGET_ANGLE (0.0 - 0.5) i think
#DEFINE MAX_TARGET_ANGLE 0.005
#DEFINE MAX_TARGET_ANGLE2 0.0005
#DEFINE TEAM_NONE -1
#DEFINE TEAM_COOP -2

#DEFINE LOSAMMO_MAX 300

//just using this until GetActorProperty(0,APROP_Height)/2 works
#DEFINE PLAYER_CENTER 28.0

int targetRegister; //replaced with User_STargTID
int angleDistRegister; // replaced with User_angleDistRegister



script "TracerTargeter" (int TargType, int TargRange) {
	int ownerNumber = PlayerNumber();
	int team;
	int x;
	int y;
	int z;
	int angle;
	int pitch;
	int i;
	
	str WepName = getweapon();
	//log(s:WepName);
	// each instance of this script is tied to a weapon, when you are off of it, it terminates
	
	//if(CheckInventory("TargScriptActive")){Terminate;}
		//an instance of this script is already live for this person
	
	if (TargRange<=0){setuservariable(0,"User_STargRange",600); 
					  adjustInventory("TargetingRangeFlag",getuservariable(0,"User_STargRange")+1);}
	else{setuservariable(0,"User_STargRange",TargRange);
		adjustInventory("TargetingRangeFlag",getuservariable(0,"User_STargRange")+1);}
	
	GiveInventory("TargActive",1);
	
	while(GetActorProperty(0,APROP_HEALTH) > 0 
			&& Checkinventory("TargActive")
			&& getWeapon() == WepName
			) { 
		team = getSelfTeam();
		x = GetActorX(0);
		y = GetActorY(0);
		z = GetActorZ(0) + GetActorViewHeight(0);
		angle = GetActorAngle(0);
		pitch = pitchAdjust(GetActorPitch(0));
		
		//targetRegister = -1;
		//angleDistRegister = MAX_TARGET_ANGLE;
		if(!Checkinventory("TargHolder"))
		{
		
		setuservariable(0,"User_STargTID",-1);
		
		if(Checkinventory("TargContractor"))
		{setuservariable(0,"User_angleDistRegister",MAX_TARGET_ANGLE2);}
		else
		{setuservariable(0,"User_angleDistRegister",MAX_TARGET_ANGLE);}

			if(team==TEAM_NONE && (TargType & TG_ENEMY)) {
				for(i=0;i<ownerNumber;i++) {
					Targeter(x, y, z, angle, pitch, i);
				}
				for(i=ownerNumber+1;i<GetMaxPlayers();i++) {
					Targeter(x, y, z, angle, pitch, i);
				}
			} else if(team!=TEAM_COOP) {
				for(i=0;i<ownerNumber;i++) {
					TargeterTeam(team, x, y, z, angle, pitch, i, TargType);
				}
				for(i=ownerNumber+1;i<GetMaxPlayers();i++) {
					TargeterTeam(team, x, y, z, angle, pitch, i, TargType);
				}
			}
		}
		
		
		
			if(xyzDistance(0,getuservariable(0,"User_STargTID")+1000) <= TargRange
				&& !checkinventory("RespawnCamera")
				&& getuservariable(0,"User_STargTID") > -1)
			{
			setpointer(AAPTR_TRACER,getuservariable(0,"User_STargTID")+1000);
			}
			else {setpointer(AAPTR_TRACER,0,AAPTR_NULL);}
		
			adjustInventory("TargetingFlag",getuservariable(0,"User_STargTID")+1);
			if (TargRange!=checkinventory("TargetingRangeFlag"))
				{
				setuservariable(0,"User_STargRange",TargRange);
				adjustInventory("TargetingRangeFlag",getuservariable(0,"User_STargRange")+1);
				}
		
		//giveinventory("TargScriptActive");
		delay(1);
	}
		//takeinventory("TargScriptActive",9)
		setuservariable(0,"User_STargTID",-1);
		setuservariable(0,"User_angleDistRegister",MAX_TARGET_ANGLE);
		adjustInventory("TargetingFlag",0);
		adjustInventory("TargetingRangeFlag",0);
}

function void TargeterTeam(int team, int x, int y, int z, int angle, int pitch, int i, int TargType) {
	if(team != GetPlayerInfo(i, PLAYERINFO_TEAM) && (TargType & TG_ENEMY)) 
		{
		Targeter(x, y, z, angle, pitch, i);
		}
		
	else if(team == GetPlayerInfo(i, PLAYERINFO_TEAM) && (TargType & TG_TEAM)) 
		{
		Targeter(x, y, z, angle, pitch, i);
		}
		
	Else if(TargType & TG_ENEMY && TargType & TG_TEAM) 
		{
		Targeter(x, y, z, angle, pitch, i);
		}
}

function void Targeter(int x, int y, int z, int angle, int pitch, int i) {
	int target = i+1000;
	if(CheckActorInventory(target,"Discorded")==0
		&& GetActorProperty(target,APROP_HEALTH)>0
		&& CheckSight(0,target,CSF_NOFAKEFLOORS)) {
		int xDist = GetActorX(target) - x;
		int yDist = GetActorY(target) - y;
		int angleDist = vectorangle(xDist,yDist);
		int dist = fDistanceVal1(angleDist, xDist, yDist);
		int zDist = GetActorZ(target) + PLAYER_CENTER - z;
		int pitchDist = vectorangle(dist, zDist);
		//dist = fDistanceVal2(pitchDist, dist, zDist);		
		
		angleDist = WrapAround(angleDist-angle);
		pitchDist = WrapAround(pitchDist-pitch);
		angleDist = fixedMul(angleDist,angleDist) + fixedMul(pitchDist,pitchDist);
		//print(f:angleDist);
		if(angleDist<getuservariable(0,"User_angleDistRegister")) {
			//targetRegister = i;
			//angleDistRegister = angleDist;
			
			setuservariable(0,"User_STargTID",i);
			setuservariable(0,"User_angleDistRegister",angleDist);
			
			
		}
	}
}

function int fDistanceVal1(int ang, int x, int y)
{
	int len;
	
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	else len = fixeddiv(x, cos(ang));

	//print(f:len);
	return len;
}

function int fDistanceVal2(int ang, int len, int z)
{
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
	else len = fixeddiv(len, cos(ang));

	//print(f:len);
	return len;
}

function int pitchAdjust(int i) {
	if(i>0.0) return 1.0-i;
	return -i;
}

function int WrapAround(int i)
{
	if(i<-0.5) return i+1.0;
	if(i>0.5) return i-1.0;
	return i;
}


function int getSelfTeam(void)
{
if (GetCVar("teamplay")==1||GetCVar("teamlms")==1||GetCVar("teampossession")==1
||GetCVar("teamgame")==1){
	Return PlayerTeam();
} else if (GetCVar("cooperative")==1) {
	Return TEAM_COOP;
}
Return TEAM_NONE;
}

function void adjustInventory(str item, int quantity) {
	int diff = quantity-CheckInventory(item);
	if(diff>0) {
		giveInventory(item,diff);
	} else if (diff<0) {
		takeInventory(item,-diff);
	}
}

function void adjustActorInventory(int actor, str item, int quantity) {
	int diff = quantity-CheckActorInventory(actor,item);
	if(diff>0) {
		giveActorInventory(actor,item,diff);
	} else if (diff<0) {
		takeActorInventory(actor,item,-diff);
	}
}

script 405 ENTER CLIENTSIDE {
	int ownerNumber = PlayerNumber();
	
	if(ownerNumber==ConsolePlayerNumber()) {
	
		int xOffset = 10.0;
		int yOffset = 380.0;
		int t;
		int T_Range;
		int i;
	
		while(GetActorProperty(0,APROP_HEALTH) > 0) {
			t =  checkInventory("TargetingFlag"); //getuservariable(0,"User_STargTID")+1;
			T_Range = checkInventory("TargetingRangeFlag"); //getuservariable(ownerNumber+1000,"User_STargRange");
			
			if(t>0) {
			if(checkinventory("TargHolder")) {
				HudMessageOnActorZPlusAllign(1000-1+t, PLAYER_CENTER, 103, 0, 0, 0, 0, T_Range, "JUSTA0", "Target", 0, CR_UNTRANSLATED);
				}
				else
				{
				HudMessageOnActorZPlusAllign(1000-1+t, PLAYER_CENTER, 103, 0, 0, 0, 0, T_Range, "JUSTB0", "Target", 0, CR_UNTRANSLATED);
				}
			}
			
			//apparently these two for loops are done in a way that excludes the
			//script activator. possibly for potential desynch maybe?
			
			for(i=0;i<ownerNumber;i++) {
				if(CheckActorInventory(1000+i,"Discorded")) {
					HudMessageOnActorZPlusAllign(1000+i, PLAYER_CENTER, 200+i, 0, 0, 0, -10, 9000, "JUSTA0", "Discord", 0, CR_UNTRANSLATED);
				}
			}
			for(i=ownerNumber+1;i<ServerMax;i++) {
				if(CheckActorInventory(1000+i,"Discorded")) {
					HudMessageOnActorZPlusAllign(1000+i, PLAYER_CENTER, 200+i, 0, 0, 0, -10, 9000, "JUSTA0", "Discord", 0, CR_UNTRANSLATED);
				}
			}
			
			delay(1);
		}
	}
}

script 406 RESPAWN CLIENTSIDE {
	ACS_ExecuteAlways(405,0);
}

script 409 ENTER { //So joining players see stuff right
	for(int i=0;i<ServerMax;i++) {
		Thing_ChangeTID(1000+i,1000+i);
	}
}
//Pretty sure I don't need a respawn script to call this too.

//HudMessageOnActor from ZDoom wiki
function void HudMessageOnActorZPlusAllign(int tid, int ZPlus, int msgID, int hudX, int hudY, int xOffset, int yOffset, int range, str sprite, str text, int holdTime, str colour)
{
		
	int dist, angle, vang, pitch, x, y;
	
	int CamTID = ConsolePlayerNumber () + 9000;

	if (holdTime == 0) { holdTime = 0.1; }	
	if (hudX == 0) { hudX = 640; }
	if (hudY == 0) { hudY = 480; }
	
	if(sprite != -1)
	{
		
		SetFont(sprite);
		text = "A";
		
	}
	
	SetHudSize(hudX, hudY, 1);
	x = GetActorX(tid) - GetActorX(CamTID);
	y = GetActorY(tid) - GetActorY(CamTID);
	
	vang = VectorAngle(x,y);
	angle = (vang - GetActorAngle(CamTID) + 1.0) % 1.0;
	
	if(((vang+0.125)%0.5) > 0.25) dist = FixedDiv(y, sin(vang));
	else dist = FixedDiv(x, cos(vang));
	
	if ((angle < 0.23 || angle > 0.85) && (dist >> 16) < range)
	{
		
		if (GetActorPitch(CamTID) >= -0.5 && GetActorPitch(CamTID) <= 0.5)
		{
 
			pitch = VectorAngle(dist, GetActorZ(tid) + ZPlus - (GetActorZ(CamTID) + GetActorViewHeight(CamTID)));
			pitch += FixedMul(GetActorPitch(CamTID), 1.2) % 1.0;
 
			if ((hudX/2) * sin(angle) != 0 && cos(angle) != 0 && (hudX/2) * sin(pitch) != 0 && cos(pitch) != 0)
			{
				
				x = hudX/2 - ((hudX/2) * sin(angle) / cos(angle));
				y = hudY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));
				
				x+=xOffset;
				y+=yOffset;
				
				HudMessage(s:text; HUDMSG_PLAIN, msgID, colour, (x << 16)+0.1, (y << 16)+0.1, holdTime);
				
			}
			
		}
		
	}
	
}




function void hudmessageonactor(int tid, int msgID, int hudX, int hudY, int xOffset, int yOffset, int range, str sprite, str text, int holdTime, str colour, int swap)
{
	int dist, angle, vang, pitch, x, y;

	if (hudX == 0) { hudX = 640; }
	if (hudY == 0) { hudY = 480; }

	if(sprite != -1)
	{
		SetFont(sprite);
		text = "A";
		//offset = 0.1;
	}

	SetHudSize(hudX, hudY, 1);
	x = GetActorX(tid) - GetActorX(0);
	y = GetActorY(tid) - GetActorY(0);

	vang = VectorAngle(x,y);
	angle = (vang - GetActorAngle(0) + 1.0) % 1.0;

	if(((vang+0.125)%0.5) > 0.25) dist = FixedDiv(y, sin(vang));
	else dist = FixedDiv(x, cos(vang));

	if ((angle < 0.2 || angle > 0.8) && (dist >> 16) < range)
	{
		if (GetActorPitch(0) >= -0.25 && GetActorPitch(0) <= 0.25)
		{
			pitch = VectorAngle(dist, GetActorZ(tid) - (GetActorZ(0) + 41.0));
			pitch = (pitch + GetActorPitch(0) + 1.0) % 1.0;
			if ((hudX/2) * sin(angle) != 0 && cos(angle) != 0 && (hudX/2) * sin(pitch) != 0 && cos(pitch) != 0) //    Fixes divide by zero
			{
				x = hudX/2 - ((hudX/2) * sin(angle) / cos(angle));
				y = hudY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));

				x+=xOffset;
				y+=yOffset;
				if(swap){HudMessage(i:dist >> 16; HUDMSG_PLAIN, msgID, colour, (x << 16), (y << 16), holdTime);}
				else{HudMessage(s:text; HUDMSG_PLAIN, msgID, colour, (x << 16), (y << 16), holdTime);}
			}
		}
	}
}
