/* -=- Technical Machine Dex -=-
 * Contains a large array that charts what pokemon can learn what TM 
 * 
 * Okay, so originally I was going to have a single, 100 element array to store all the TM checklists, but that got massive
 * and simply became hard to read. and I felt like there had to be a better way, one that was more readable and easier
 * to edit.
 * 
 * and so, I instead thought of a system of functions checked by a switch block. since a lot of times either a small number of
 * pokemon will learn a TM, or a small number won't, I'll instead create small inclusive or exclusive lists functions. an inclusive
 * list will report "true" if the player's Dexnumber matches any of the pokemon on the list, an exclusive list will report false
 * in the same condition.
 * 

*/
#library "Dex_TM"
#include "zcommon.acs"

#import "Dex_Pokemon.acs"
#import "Dex_Types.acs"
#import "Dex_Leveling.acs"
#import "Dex_BaseStats.acs"
//#region -=- constants -=-

#LIBDEFINE TMT_NULL 0
#LIBDEFINE TMT_NORMAL 1
#LIBDEFINE TMT_FIGHTING 2
#LIBDEFINE TMT_FLYING 4
#LIBDEFINE TMT_POISON 8
#LIBDEFINE TMT_GROUND 16
#LIBDEFINE TMT_ROCK 32
#LIBDEFINE TMT_BUG 64
#LIBDEFINE TMT_GHOST 128
#LIBDEFINE TMT_STEEL 256
#LIBDEFINE TMT_FIRE 512
#LIBDEFINE TMT_WATER 1024
#LIBDEFINE TMT_GRASS 2048
#LIBDEFINE TMT_ELECTRIC 4096
#LIBDEFINE TMT_PSYCHIC 8192
#LIBDEFINE TMT_ICE 16384
#LIBDEFINE TMT_DRAGON 32768
#LIBDEFINE TMT_DARK 65536
#LIBDEFINE TMT_FAIRY 131072


#LIBDEFINE TMA_Null 0
#LIBDEFINE TMA_Mature 1
#LIBDEFINE TMA_Prankster 2
#LIBDEFINE TMA_Defensive 4
#LIBDEFINE TMA_Succor	8
#LIBDEFINE TMA_Pugilist 16
#LIBDEFINE TMA_Terrestrial 32
#LIBDEFINE TMA_Artillery 64
#LIBDEFINE TMA_Draconic 128
#LIBDEFINE TMA_Spikey 256
#LIBDEFINE TMA_Slasher 512
//#endregion

//#region -=- TM Reference -=-
/*
14 = Reflect
15 = LightScreen
16 = Safeguard
19 = toxic
20 = protect
40 = BulletSeed
44 = MagicalLeaf
50 = IcyWind
51 = EnergyBall
58 = SolarBeam
59 = Earthquake
*/
//#endregion

script "CheckTM" (int TM_TYPE, int TM_ARCH1)
{
int output; 
int PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));
int PlayerTypeA = StatDEX[PlayerDexNum][7];
int PlayerTypeB = StatDEX[PlayerDexNum][8];
Int CheckType;


if(TM_TYPE != TMT_NULL){CheckType = 1;}
if(TM_ARCH1 != 0){CheckType = 2;}

//First, Check for a matching Type
    if(CheckType>=1)
    {
        if(TM_TYPE & GrabTMType(PlayerTypeA)
        || TM_TYPE & GrabTMType(PlayerTypeB)){output = 1; CheckType = -1;}
    }


if(CheckType>=2)
    {
    //If type doesn't match, then we check for archetypes

    if(!output && TM_ARCH1 & TMA_Mature) output = TMArch_Mature(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Prankster) output = TMArch_Prankster(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Defensive) output = TMArch_Defensive(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Succor) output = TMArch_Succor(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Pugilist) output = TMArch_Pugilist(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Terrestrial) output = TMArch_Terrestrial(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Artillery) output = TMArch_Artillery(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Draconic) output = TMArch_Draconic(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Spikey) output = TMArch_Spikey(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Slasher) output = TMArch_Slasher(PlayerDexNum);
    }


    // When all values are 0, the TM is considered semi-universal, thus it works on everyone except
    //The Following pokemon. this is always checked in the end as it can also act as a dequalifier.
    if(!Semi_UniversalTM(PlayerDexNum))Output = 0;

SetResultValue(output);
}

//#region Grab TM Type function

Function int GrabTMType (int TMType)
{
int output = 0;
// Evolved TM's are learnable by any pokemon that is at their final stage;


    Switch (TMType)
    {
        case Type_NORMAL: output = TMT_Normal; break;
        case Type_FIGHTING: output = TMT_Fighting; break;
        case Type_FLYING: output = TMT_Flying; break;
        case Type_POISON: output = TMT_Poison; break;
        case Type_GROUND: output = TMT_Ground; break;
        case Type_ROCK: output = TMT_Rock; break;
        case Type_BUG: output = TMT_Bug; break;
        case Type_GHOST: output = TMT_Ghost; break;
        case Type_STEEL: output = TMT_Steel; break;
        case Type_FIRE: output = TMT_Fire; break;
        case Type_WATER: output = TMT_Water; break;
        case Type_GRASS: output = TMT_Grass; break;
        case Type_ELECTRIC: output = TMT_Electric; break;
        case Type_PSYCHIC: output = TMT_Psychic; break;
        case Type_ICE: output = TMT_Ice; break;
        case Type_DRAGON: output = TMT_Dragon; break;
        case Type_DARK: output = TMT_Dark; break;
        case Type_FAIRY: output = TMT_Fairy; break;
    }
return output;
}

//#endregion

//#region -=- Semi Universal TMs
Function int Semi_UniversalTM (int Dexnum)
{
int output = 1;
// Semi universal TM's wor for nearly everyone, excluding smeargle who learns no TM's and
// deliberately weak pokemon like Magicarp

    Switch (Dexnum)
    {
    case SMEARGLE: output = 0;
    }
return output;
}
//#endregion 

//#region -=- Archetype : Mature
Function int TMArch_Mature (int Dexnum)
{
int output = 0;
// Semi universal TM's wor for nearly everyone, excluding smeargle who learns no TM's and
// deliberately weak pokemon like Magicarp

    Switch (Dexnum)
    {
        case VENUSAUR: output = 1; break;
        case CHARIZARD: output = 1; break;
        case BLASTOISE: output = 1; break;
        case MEGANIUM: output = 1; break;
        case TYPHLOSION: output = 1; break;
        case FERALIGATR: output = 1; break;
        case SCEPTILE: output = 1; break;
        case BLAZIKEN: output = 1; break;
        case SWAMPERT: output = 1; break;
        case TORTERRA: output = 1; break;
        case INFERNAPE: output = 1; break;
        case EMPOLEON: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- Archetype : Prankster
Function int TMArch_Prankster (int Dexnum)
{
int output = 0;
// Prankster archetype favors mischevous and/or status oriented pokemon

    Switch (Dexnum)
    {
        case CHIMCHAR: output = 1; break;
        case MONFERNO: output = 1; break;
        case INFERNAPE: output = 1; break;
    }
return output;
}
//#endregion 

//#region -=- Archetype : Defensive
Function int TMArch_Defensive (int Dexnum)
{
int output = 0;
// Prankster archetype favors Pokemon naturally built for more defensive playstyles, this favors recovery moves,
// protective moves, and some zone control moves.

    Switch (Dexnum)
    {
        case SQUIRTLE: output = 1; break;
        case WARTORTLE: output = 1; break;
        case BLASTOISE: output = 1; break;
        case CHIKORITA: output = 1; break;
        case BAYLEEF: output = 1; break;
        case MEGANIUM: output = 1; break;
        case TURTWIG: output = 1; break;
        case GROTLE: output = 1; break;
        case TORTERRA: output = 1; break;
    }
return output;
}
//#endregion 

//#region -=- Archetype : Succor
Function int TMArch_Succor (int Dexnum)
{
int output = 0;
    /* Succor archetype Favors pokemon naturally disposed to team support through healing and buffing, also
     * favors some protective abilities

    */
    Switch (Dexnum)
        {
        case CHIKORITA: output = 1; break;
        case BAYLEEF: output = 1; break;
        case MEGANIUM: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- Archetype : Pugilist
Function int TMArch_Pugilist (int Dexnum)
{
int output = 0;
    /* Pugilist archetype favors pokemon that mainly fight through punches and kicks, thus can learn TM's based around
     * Punches, kicks, and other physical maneuvers.

    */
    Switch (Dexnum)
        {        
            case COMBUSKEN: output = 1; break;
            case BLAZIKEN: output = 1; break;
            case MARSHTOMP: output = 1; break;
            case SWAMPERT: output = 1; break;
            case CHIMCHAR: output = 1; break;
            case MONFERNO: output = 1; break;
            case INFERNAPE: output = 1; break;    
        }
return output;
}
//#endregion 

//#region -=- Archetype : Terrestrial
Function int TMArch_Terrestrial (int Dexnum)
{
int output = 0;
    /* Terrestrial archetype involves pokemon that are largely land based, and can learn many 
     * ground and rock moves as a result.

    */
    Switch (Dexnum)
        {
            case BULBASAUR: output = 1; break;
            case IVYSAUR: output = 1; break;
            case VENUSAUR: output = 1; break;
            case CHIKORITA: output = 1; break;
            case BAYLEEF: output = 1; break;
            case MEGANIUM: output = 1; break;
            case MUDKIP: output = 1; break;
            case MARSHTOMP: output = 1; break;
            case SWAMPERT: output = 1; break;
            case TURTWIG: output = 1; break;
            case GROTLE: output = 1; break;
            case TORTERRA: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- Archetype : Artillery
Function int TMArch_Artillery (int Dexnum)
{
int output = 0;
    /* Artillery archetype Favors largely projectile oriented pokemon, typically those with natural cannons on them,
    moves for this archetype are usually lob move, beam moves, or moves with words like "Bullet" or "Cannon" in their
    name

    */
    Switch (Dexnum)
        {
        case BLASTOISE: output = 1; break;   
        }
return output;
}
//#endregion 

//#region -=- Archetype : Draconic
Function int TMArch_Draconic (int Dexnum)
{
int output = 0;
    /* Draconic archetype favors Dragon type and dragon like pokemon, allowing the use of dragon moves, and moves
     * that resemble dragon breath.

    */
    Switch (Dexnum)
        {
        case CHARIZARD: output = 1; break;
        case SCEPTILE: output = 1; break;

        }
return output;
}
//#endregion 

//#region -=- Archetype : Spikey
Function int TMArch_Spikey (int Dexnum)
{
int output = 0;
    /* Spikey archetype

    */
    Switch (Dexnum)
        {
            
        }
return output;
}
//#endregion 

//#region -=- Archetype : Slasher
Function int TMArch_Slasher (int Dexnum)
{
int output = 0;
    /* Slasher archetype involves pokemon that possess sharp claws, or blades, thus they can learn slashing moves.

    */
    Switch (Dexnum)
        {
        case CHARMELEON: output = 1; break;
        case CHARIZARD: output = 1; break;
        case FERALIGATR: output = 1; break;
        case GROVYLE: output = 1; break;
        case SCEPTILE: output = 1; break; 
        case EMPOLEON: output = 1; break;
        }
return output;
}
//#endregion 

//======


//#region -=-=-= Depreciated -=-=-=

//#region -=- old TM check -=-
script "CheckTM_Old" (int TMNum)
{
int output; 
int PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));


Switch (TMNum)
    {
    Case 6: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 14: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 15: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 16: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 19: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 20: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 40: output = CheckTM40(PlayerDexNum); break;
    Case 44: output = CheckTM44(PlayerDexNum); break;
    Case 45: output = CheckTM45(PlayerDexNum); break;
    Case 50: output = CheckTM50(PlayerDexNum); break;
    Case 51: output = CheckTM51(PlayerDexNum); break;
    Case 58: output = CheckTM58(PlayerDexNum); break;
    Case 59: output = EvolvedTM(PlayerDexNum); break;
    default: log(s:"No TM Data"); output = 0; break;
    }
//log(i:PlayerDexNum);
//log(i:output);
SetResultValue(output);
}

//#endregion

//#region -=- evolved pokemon only TMs -=-
Function int EvolvedTM (int Dexnum)
{
int output = 0;
// Evolved TM's are learnable by any pokemon that is at their final stage;

    Switch (Dexnum)
    {
    case VENUSAUR: output = 1; break;
    case CHARIZARD: output = 1; break;
    case BLASTOISE: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case FERALIGATR: output = 1; break;
    case SCEPTILE: output = 1; break;
    case BLAZIKEN: output = 1; break;
    case SWAMPERT: output = 1; break;
    case TORTERRA: output = 1; break;
    case INFERNAPE: output = 1; break;
    case EMPOLEON: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM40: Bullet Seed -=-
Function int CheckTM40 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM44: Magicalleaf -=-
Function int CheckTM44 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM45: FlameThrower -=-
Function int CheckTM45 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case CHARMANDER: output = 1; break;
    case CHARMELEON: output = 1; break;
    case CHARIZARD: output = 1; break;
    case CYNDAQUIL: output = 1; break;
    case QUILAVA: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TORCHIC: output = 1; break;
    case COMBUSKEN: output = 1; break;
    case BLAZIKEN: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM50: Icy Wind -=-
Function int CheckTM50 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case SQUIRTLE: output = 1; break;
    case WARTORTLE: output = 1; break;
    case BLASTOISE: output = 1; break;
    case TOTODILE: output = 1; break;
    case CROCONAW: output = 1; break;
    case FERALIGATR: output = 1; break;
    case MUDKIP: output = 1; break;
    case MARSHTOMP: output = 1; break;
    case SWAMPERT: output = 1; break;
    case PIPLUP: output = 1; break;
    case PRINPLUP: output = 1; break;
    case EMPOLEON: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM51: Energy Ball -=-
Function int CheckTM51 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM58: SolarBeam -=-
Function int CheckTM58 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHARIZARD: output = 1; break;
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    case BLAZIKEN: output = 1; break;
    }
return output;
}
//#endregion

//#endregion

//#region -=- the big, fat, array

#LIBDEFINE MAXTMS 100

#DEFINE NOPE 0 //No, cannot learn
#DEFINE YEAH 1 //Yes, can learn


Int TM_Dex [MAXDEX][MAXTMS] = {
//    | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |100 |
/*0*/ {},//
/*1*/ {},//
/*2*/ {},//
/*3*/ {},//
/*4*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,NOPE,YEAH,YEAH,YEAH,NOPE,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,NOPE,NOPE,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*5*/ {},//
/*6*/ {},//
/*7*/ {},//
/*8*/ {},//
/*9*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,NOPE,YEAH,YEAH,YEAH,NOPE,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,NOPE,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
//     | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |100 |
/*10*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,NOPE,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*11*/ {},//
/*12*/ {},//
/*13*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*14*/ {},//
/*15*/ {},//
/*16*/ {},//
/*17*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*18*/ {},//
/*19*/ {},//
//     | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |100 |
/*20*/ {},//
/*21*/ {},//
/*22*/ {},//
/*23*/ {},//
/*24*/ {},//
/*25*/ {},//
/*26*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*27*/ {},//
/*28*/ {},//
/*29*/ {},//
//     | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |100 |
/*30*/ {},//
/*31*/ {},//
/*32*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*33*/ {},//
/*34*/ {},//
/*35*/ {},//
/*36*/ {},//
};

//#endregion 