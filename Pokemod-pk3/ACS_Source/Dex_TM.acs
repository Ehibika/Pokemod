/* -=- Technical Machine Dex -=-
 * Contains a large array that charts what pokemon can learn what TM 
 * 
 * Okay, so originally I was going to have a single, 100 element array to store all the TM checklists, but that got massive
 * and simply became hard to read. and I felt like there had to be a better way, one that was more readable and easier
 * to edit.
 * 
 * and so, I instead thought of a system of functions checked by a switch block. since a lot of times either a small number of
 * pokemon will learn a TM, or a small number won't, I'll instead create small inclusive or exclusive lists functions. an inclusive
 * list will report "true" if the player's Dexnumber matches any of the pokemon on the list, an exclusive list will report false
 * in the same condition.
 * 

*/
#library "Dex_TM"
#import "Dex_Pokemon.acs"
#import "Dex_moves.acs"
#import "Dex_Movesets.acs"
#import "Dex_Types.acs"
#import "Dex_Leveling.acs"
#import "Dex_BaseStats.acs"
#include "zcommon.acs"


//#region -=- constants -=-

#LIBDEFINE TMT_NULL 0
#LIBDEFINE TMT_NORMAL 1
#LIBDEFINE TMT_FIGHTING 2
#LIBDEFINE TMT_FLYING 4
#LIBDEFINE TMT_POISON 8
#LIBDEFINE TMT_GROUND 16
#LIBDEFINE TMT_ROCK 32
#LIBDEFINE TMT_BUG 64
#LIBDEFINE TMT_GHOST 128
#LIBDEFINE TMT_STEEL 256
#LIBDEFINE TMT_FIRE 512
#LIBDEFINE TMT_WATER 1024
#LIBDEFINE TMT_GRASS 2048
#LIBDEFINE TMT_ELECTRIC 4096
#LIBDEFINE TMT_PSYCHIC 8192
#LIBDEFINE TMT_ICE 16384
#LIBDEFINE TMT_DRAGON 32768
#LIBDEFINE TMT_DARK 65536
#LIBDEFINE TMT_FAIRY 131072


#LIBDEFINE TMA_Null 0
#LIBDEFINE TMA_Mature 1
#LIBDEFINE TMA_Prankster 2
#LIBDEFINE TMA_Defensive 4
#LIBDEFINE TMA_Succor	8
#LIBDEFINE TMA_Pugilist 16
#LIBDEFINE TMA_Terrestrial 32
#LIBDEFINE TMA_Artillery 64
#LIBDEFINE TMA_Draconic 128
#LIBDEFINE TMA_Spikey 256
#LIBDEFINE TMA_Slasher 512

#LIBDEFINE TMF_NULL 0
#LIBDEFINE TMF_UNIVERSAL 1
#LIBDEFINE TMF_EVOLVED 2

#LIBDEFINE TML_ALL 0
#LIBDEFINE TML_LOW 3
#LIBDEFINE TML_MID 5
#LIBDEFINE TML_MID2 7
#LIBDEFINE TML_HIGH 10
#LIBDEFINE TML_MAX 15

//TM Price
#LIBDEFINE TMP_1 3
#LIBDEFINE TMP_2 5
#LIBDEFINE TMP_3 10
#LIBDEFINE TMP_4 15
#LIBDEFINE TMP_5 30



#LIBDEFINE MAXTMLIST 117
//#endregion

//#region -=- TM Reference -=-
/*
14 = Reflect
15 = LightScreen
16 = Safeguard
19 = toxic
20 = protect
40 = BulletSeed
44 = MagicalLeaf
50 = IcyWind
51 = EnergyBall
58 = SolarBeam
59 = Earthquake
*/
//#endregion


int TMMem_Team [4][MAXTMLIST] = {};
int TMMem_Player [64][MAXTMLIST] = {};
//#region -=- TM MasterList -=-
int TMList [MAXTMLIST][5] = {
{Substitute     ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_ALL},
{Protect        ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_ALL},
{Taunt          ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_ALL},
{Fakeout        ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_ALL},
{FalseSwipe     ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_ALL},
{Rest           ,TMF_UNIVERSAL      ,TMT_PSYCHIC                                ,TMP_1  ,TML_ALL},
{Refresh        ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_ALL},
{HelpingHand    ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_ALL},
{Swagger        ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_ALL},
{Flatter        ,TMF_UNIVERSAL      ,TMT_DARK                                   ,TMP_1  ,TML_ALL},


{CalmMind       ,TMF_UNIVERSAL      ,TMT_PSYCHIC                                ,TMP_3  ,TML_ALL},
{CosmicPower    ,TMF_UNIVERSAL      ,TMT_PSYCHIC|TMT_FAIRY                      ,TMP_3  ,TML_ALL},
{Rage           ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_3  ,TML_ALL},
{Meditate       ,TMF_UNIVERSAL      ,TMT_PSYCHIC                                ,TMP_3  ,TML_ALL},
{HoneClaws      ,TMF_NULL           ,TMT_DARK                                   ,TMP_3  ,TML_ALL},
{DragonDance    ,TMF_NULL           ,TMT_DRAGON                                 ,TMP_3  ,TML_ALL},
{RockPolish     ,TMF_NULL           ,TMT_ROCK|TMT_GROUND|TMT_Steel              ,TMP_3  ,TML_ALL},
{BulkUp         ,TMF_NULL           ,TMT_FIGHTING                               ,TMP_3  ,TML_ALL},

{IronDefense    ,TMF_UNIVERSAL      ,TMT_STEEL                                  ,TMP_4  ,TML_MID},
{Amnesia        ,TMF_UNIVERSAL      ,TMT_PSYCHIC                                ,TMP_4  ,TML_MID},

{Screech        ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_MID},
{FakeTears      ,TMF_UNIVERSAL      ,TMT_DARK                                   ,TMP_1  ,TML_MID},
{Charm          ,TMF_UNIVERSAL      ,TMT_FAIRY                                  ,TMP_1  ,TML_MID},
{Captivate      ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_MID},
{ScaryFace      ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_1  ,TML_MID},

{Haze           ,TMF_NULL           ,TMT_WATER|TMT_ICE|TMT_FAIRY|TMT_GHOST      ,TMP_1  ,TML_ALL},
{Mist           ,TMF_NULL           ,TMT_WATER|TMT_ICE|TMT_FAIRY|TMT_GHOST      ,TMP_1  ,TML_ALL},
{Teleport_M           ,TMF_NULL       ,TMT_PSYCHIC                                ,TMP_1  ,TML_ALL},

{WideGuard      ,TMF_NULL           ,TMT_GROUND|TMT_ROCK|TMT_STEEL              ,TMP_2  ,TML_ALL},
{SafeGuard      ,TMF_NULL           ,TMT_NORMAL|TMT_PSYCHIC|TMT_FAIRY           ,TMP_2  ,TML_ALL},
{Reflect        ,TMF_NULL           ,TMT_PSYCHIC|TMT_FAIRY                      ,TMP_2  ,TML_ALL},
//{CraftyShield   ,TMF_NULL           ,TMT_PSYCHIC|TMT_FAIRY                      ,TMP_2  ,TML_ALL},
{LightScreen    ,TMF_NULL           ,TMT_PSYCHIC|TMT_FAIRY                      ,TMP_2  ,TML_ALL},
{HealPulse      ,TMF_NULL           ,TMT_PSYCHIC|TMT_FAIRY                      ,TMP_2  ,TML_ALL},
{LifeDew        ,TMF_NULL           ,TMT_WATER|TMT_PSYCHIC|TMT_FAIRY            ,TMP_2  ,TML_ALL},
{Barrier        ,TMF_NULL           ,TMT_PSYCHIC                                ,TMP_2  ,TML_ALL},
{AquaRing       ,TMF_NULL           ,TMT_WATER                                  ,TMP_2  ,TML_ALL},
{Roost          ,TMF_NULL           ,TMT_FLYING                                 ,TMP_2  ,TML_ALL},

{Spikes         ,TMF_NULL           ,TMT_GROUND                                 ,TMP_2  ,TML_ALL},
{ToxicSpikes    ,TMF_NULL           ,TMT_POISON                                 ,TMP_2  ,TML_ALL},
{StealthRock    ,TMF_NULL           ,TMT_ROCK                                   ,TMP_2  ,TML_ALL},
{Defog          ,TMF_NULL           ,TMT_FLYING                                 ,TMP_2  ,TML_ALL},

{Magicalleaf    ,TMF_NULL           ,TMT_GRASS|TMT_FAIRY|TMT_PSYCHIC            ,TMP_2  ,TML_ALL},
{EnergyBall    ,TMF_NULL           ,TMT_GRASS|TMT_FAIRY|TMT_PSYCHIC            ,TMP_2  ,TML_ALL},
{BulletSeed     ,TMF_NULL           ,TMT_GRASS|TMT_BUG                          ,TMP_2  ,TML_ALL},
{Swift          ,TMF_NULL           ,TMT_NORMAL|TMT_PSYCHIC|TMT_FAIRY           ,TMP_2  ,TML_ALL},
{HeadButt       ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_2  ,TML_ALL},
{IcyWind        ,TMF_NULL           ,TMT_WATER|TMT_ICE|TMT_FLYING               ,TMP_2  ,TML_LOW},
{Heatwave       ,TMF_NULL           ,TMT_FIRE|TMT_FLYING                        ,TMP_2  ,TML_LOW},
{FlameBurst     ,TMF_NULL           ,TMT_FIRE|TMT_DRAGON                        ,TMP_2  ,TML_MID},
{LavaPlume      ,TMF_NULL           ,TMT_FIRE|TMT_DRAGON                        ,TMP_2  ,TML_MID},
{WaterPulse     ,TMF_NULL           ,TMT_WATER                                  ,TMP_2  ,TML_MID},
{Brine          ,TMF_NULL           ,TMT_WATER|TMT_POISON                       ,TMP_2  ,TML_MID},
{Scald          ,TMF_NULL           ,TMT_WATER|TMT_FIRE                         ,TMP_2  ,TML_MID},
{DragonRage     ,TMF_NULL           ,TMT_DRAGON                                 ,TMP_2  ,TML_LOW},
{Incinerate     ,TMF_NULL           ,TMT_FIRE|TMT_DRAGON                        ,TMP_2  ,TML_MID},
{ThunderWave    ,TMF_NULL           ,TMT_ELECTRIC|TMT_PSYCHIC                   ,TMP_2  ,TML_ALL},
{Acrobatics     ,TMF_NULL           ,TMT_FLYING                                 ,TMP_2  ,TML_MID},
{Rollout        ,TMF_NULL           ,TMT_ROCK                                   ,TMP_2  ,TML_LOW},
{GyroBall       ,TMF_NULL           ,TMT_STEEL                                  ,TMP_2  ,TML_LOW},
{AuroraBeam     ,TMF_NULL           ,TMT_ICE|TMT_WATER                          ,TMP_2  ,TML_MID},
{DrainingKiss   ,TMF_NULL           ,TMT_FAIRY                                  ,TMP_2  ,TML_MID},
{FirePunch      ,TMF_NULL           ,TMT_FIGHTING|TMT_FIRE|TMT_DRAGON           ,TMP_2  ,TML_MID},
{IcePunch       ,TMF_NULL           ,TMT_FIGHTING|TMT_ICE|TMT_WATER             ,TMP_2  ,TML_MID},
{ThunderPunch   ,TMF_NULL           ,TMT_FIGHTING|TMT_ELECTRIC                  ,TMP_2  ,TML_MID},
{FireFang       ,TMF_NULL           ,TMT_FIRE|TMT_DRAGON                        ,TMP_2  ,TML_MID},
{IceFang        ,TMF_NULL           ,TMT_ICE|TMT_WATER                          ,TMP_2  ,TML_MID},
{ThunderFang    ,TMF_NULL           ,TMT_ELECTRIC                               ,TMP_2  ,TML_MID},
{DreamEater     ,TMF_NULL           ,TMT_PSYCHIC|TMT_FAIRY|TMT_GHOST|TMT_DARK   ,TMP_2  ,TML_MID},
{ClearSmog      ,TMF_NULL           ,TMT_POISON|TMT_FIRE                        ,TMP_2  ,TML_MID},
{RockTomb       ,TMF_NULL           ,TMT_ROCK|TMT_GROUND|TMT_Steel              ,TMP_2  ,TML_MID},
{FlameCharge    ,TMF_NULL           ,TMT_FIRE                                   ,TMP_2  ,TML_LOW},
{FuryCutter     ,TMF_NULL           ,TMT_BUG                                    ,TMP_2  ,TML_LOW},
{BugBite        ,TMF_NULL           ,TMT_BUG                                    ,TMP_2  ,TML_LOW},
{DarkPulse      ,TMF_NULL           ,TMT_DARK|TMT_GHOST                         ,TMP_4  ,TML_MID2},
{Dig            ,TMF_NULL           ,TMT_ROCK|TMT_GROUND                        ,TMP_4  ,TML_MID2},
{Bulldoze       ,TMF_NULL           ,TMT_ROCK|TMT_GROUND|TMT_Steel              ,TMP_4  ,TML_MID2},
{EarthPower     ,TMF_NULL           ,TMT_ROCK|TMT_GROUND|TMT_Steel|TMT_GRASS    ,TMP_4  ,TML_MID2},
{IronHead       ,TMF_NULL           ,TMT_ROCK|TMT_GROUND|TMT_Steel              ,TMP_4  ,TML_MID2},
{PoisonJab      ,TMF_NULL           ,TMT_POISON                                 ,TMP_4  ,TML_MID2},
{ElectroBall    ,TMF_NULL           ,TMT_ELECTRIC                               ,TMP_4  ,TML_MID2},
{Psyshock       ,TMF_NULL           ,TMT_PSYCHIC|TMT_FAIRY                      ,TMP_4  ,TML_MID2},
{SeismicToss    ,TMF_UNIVERSAL      ,TMT_FIGHTING                               ,TMP_4  ,TML_MID2},
{SuperPower     ,TMF_NULL           ,TMT_FIGHTING|TMT_GROUND                    ,TMP_4  ,TML_MID2},
{AuraSphere     ,TMF_NULL           ,TMT_FIGHTING|TMT_PSYCHIC                   ,TMP_4  ,TML_MID2},
{ZenHeadbutt    ,TMF_NULL           ,TMT_PSYCHIC|TMT_FIGHTING                   ,TMP_4  ,TML_MID2},
{PowerGem       ,TMF_NULL           ,TMT_ROCK|TMT_PSYCHIC|TMT_FAIRY             ,TMP_4  ,TML_MID2},
{SignalBeam     ,TMF_NULL           ,TMT_BUG|TMT_ELECTRIC|TMT_PSYCHIC|TMT_FAIRY ,TMP_4  ,TML_MID2},
{WillOWisp      ,TMF_NULL           ,TMT_FIRE|TMT_PSYCHIC|TMT_GHOST             ,TMP_4  ,TML_MID2},
{MysticalFire   ,TMF_NULL           ,TMT_FIRE|TMT_PSYCHIC|TMT_FAIRY             ,TMP_4  ,TML_MID2},

{IceBeam        ,TMF_NULL           ,TMT_WATER|TMT_ICE                          ,TMP_4  ,TML_MID2},
{Flamethrower   ,TMF_NULL           ,TMT_FIRE|TMT_DRAGON                        ,TMP_4  ,TML_MID2},
{ThunderBolt    ,TMF_NULL           ,TMT_ELECTRIC                               ,TMP_4  ,TML_MID2},
{ShadowBall     ,TMF_NULL           ,TMT_GHOST|TMT_PSYCHIC                      ,TMP_4  ,TML_MID2},
{Toxic          ,TMF_UNIVERSAL      ,TMT_POISON                                 ,TMP_4  ,TML_ALL},
{SludgeBomb     ,TMF_NULL           ,TMT_POISON|TMT_GRASS                       ,TMP_4  ,TML_MID2},
{Waterfall      ,TMF_NULL           ,TMT_WATER                                  ,TMP_4  ,TML_MID2},
{DragonPulse    ,TMF_NULL           ,TMT_DRAGON                                 ,TMP_4  ,TML_MID2},
{Dazzlinggleam  ,TMF_NULL           ,TMT_FAIRY|TMT_PSYCHIC                      ,TMP_4  ,TML_ALL},
{PsychoCut      ,TMF_NULL           ,TMT_PSYCHIC                                ,TMP_4  ,TML_MID2},
{AirSlash       ,TMF_NULL           ,TMT_Flying                                 ,TMP_4  ,TML_MID2},
{HammerArm      ,TMF_NULL           ,TMT_FIGHTING                               ,TMP_4  ,TML_MID2},
{BodySlam       ,TMF_UNIVERSAL      ,TMT_NORMAL                                 ,TMP_4  ,TML_MID2},
{RockSlide      ,TMF_NULL           ,TMT_ROCK|TMT_GROUND|TMT_Steel              ,TMP_4  ,TML_MID2},

{Fly            ,TMF_NULL           ,TMT_FLYING                                 ,TMP_5  ,TML_HIGH},
{SkyDrop        ,TMF_NULL           ,TMT_FLYING                                 ,TMP_5  ,TML_HIGH},
{Surf           ,TMF_NULL           ,TMT_WATER                                  ,TMP_5  ,TML_HIGH},
{EarthQuake     ,TMF_UNIVERSAL      ,TMT_GROUND|TMT_ROCK|TMT_STEEL              ,TMP_5  ,TML_HIGH},
{FireBlast      ,TMF_NULL           ,TMT_FIRE|TMT_DRAGON                        ,TMP_5  ,TML_HIGH},
{SolarBeam      ,TMF_NULL           ,TMT_GRASS|TMT_FIRE                         ,TMP_5  ,TML_HIGH},
{GigaDrain      ,TMF_NULL           ,TMT_GRASS|TMT_BUG                          ,TMP_5  ,TML_HIGH},
{Psychic        ,TMF_NULL           ,TMT_PSYCHIC|TMT_GHOST                      ,TMP_5  ,TML_HIGH},
{Blizzard       ,TMF_NULL           ,TMT_WATER|TMT_ICE                          ,TMP_5  ,TML_HIGH},
{Overheat       ,TMF_NULL           ,TMT_FIRE                                   ,TMP_5  ,TML_HIGH},
{Thunder        ,TMF_NULL           ,TMT_ELECTRIC                               ,TMP_5  ,TML_HIGH},
{CloseCombat    ,TMF_NULL           ,TMT_FIGHTING                               ,TMP_5  ,TML_HIGH},
{StoneEdge      ,TMF_NULL           ,TMT_ROCK|TMT_GROUND|TMT_Steel|TMT_FIGHTING ,TMP_5  ,TML_HIGH},
{FocusBlast     ,TMF_NULL           ,TMT_FIGHTING|TMT_PSYCHIC                   ,TMP_5  ,TML_HIGH},

};

//#endregion

function void UnlockTM (int Index)
{
    TMMem_Player[PlayerNumber()][Index] = ON;
    ACS_NamedExecuteAlways("unlockTMonClient",0,0,Index);
}

function void UnlockTeamTM (int Index, int TeamNum)
{
    TMMem_Team[TeamNum][Index] = ON;
    ACS_NamedExecuteAlways("unlockTMonClient",0,1,Index,TeamNum);
}

Script "unlockTMonClient"(int mode, int index, int TeamNum) CLIENTSIDE
{
switch(mode)
    {
        case 0: TMMem_Player[PlayerNumber()][Index] = ON; break;
        case 1: TMMem_Team[TeamNum][Index] = ON; break;
    }

}

function int CheckTMUnlock (int Index, int Dexnum, int Level)
{

    
    //is the TM unlocked for the team
    if(TMMem_Team[PlayerTeam()][Index] == ON) return 1;

    //is the TM unlocked for this player
    if(TMMem_Player[PlayerNumber()][Index] == ON) return 1;

    //is the TM move available in their levelup set?
    int h;
    int MoveListVal;
    For(int k = 0; k < Level; k++) // + StartMoves - 1
    {
        For(h = 0; h < 4; h++)
        {
            MoveListVal = MoveDex2[Dexnum][k][h];
            if (MoveListVal == TMList[Index][0]) {return 1; break;}
        }
    }

    return 0;
}

function int CheckTMArray (int Index, int Dexnum, int Level)
{
//Redurns the move index number of that given TM number if it passes all checks
int TMOut = TMList[Index][0];
int PlayerTypeA = StatDEX[Dexnum][7];
int PlayerTypeB = StatDEX[Dexnum][8];

    //First, check if you have this move in your levelup set already
    int h;
    int MoveListVal;
    For(int k = 0; k < Level; k++) // + StartMoves - 1
    {
        For(h = 0; h < 4; h++)
        {
            MoveListVal = MoveDex2[Dexnum][k][h];
            if (MoveListVal == TMList[Index][0]) {return TMOut; break;}
        }
    }

    //Next we will check if the player is of the correct level, or if the TM is unlocked
    // if the TM is unlocked then this check is skipped
        if(TMMem_Team[PlayerTeam()][Index] == OFF && TMMem_Player[PlayerNumber()][Index] == OFF) 
         //Now, check if the player is of the appropriate level
        {if (Level < TMList[Index][4]) return -1; }//not the right level? no TM.

    //next check for first qualifiers, if the TM is universal, it will pass
    if (TMList[Index][1] & TMF_UNIVERSAL) return TMOut;

    //next, if the TM is for all evolved pokemon
    if (TMList[Index][1] & TMF_EVOLVED) {if(TMR_Evolved(Dexnum)) {return TMOut;}}

    //Next, Check for any matching Types
    if(TMList[Index][2] & GrabTMType(PlayerTypeA)
    || TMList[Index][2] & GrabTMType(PlayerTypeB)){return TMOut;}

    //next, check if there's a specialty rule for this move and pokemon
    if(SpecialtyMoveRules(Dexnum,TMOut)){return TMOut;}
    

    // All Checks failed
    return -1;
}


// -=- Specialty Rules -=-

//#region -=- TM Rules : Evolved
Function int TMR_Evolved (int Dexnum)
{
int output = 0;
// All Final Stage pokemon can learn this TM

    Switch (Dexnum)
    {
        case VENUSAUR: output = 1; break;
        case CHARIZARD: output = 1; break;
        case BLASTOISE: output = 1; break;
        case MEGANIUM: output = 1; break;
        case TYPHLOSION: output = 1; break;
        case FERALIGATR: output = 1; break;
        case SCEPTILE: output = 1; break;
        case BLAZIKEN: output = 1; break;
        case SWAMPERT: output = 1; break;
        case TORTERRA: output = 1; break;
        case INFERNAPE: output = 1; break;
        case EMPOLEON: output = 1; break;
        case DRAGAPULT: output = 1; break;
        case DRAGONITE: output = 1; break;
        case SALAMENCE: output = 1; break;
        case SLOWBRO: output = 1; break;
        case SLOWKING: output = 1; break;
        case STARMIE: output = 1; break;
        case CLOYSTER: output = 1; break;
        case NINETALES: output = 1; break;
        case NINETALES_A: output = 1; break;
        case ABOMASNOW: output = 1; break;
        case MAMOSWINE: output = 1; break;
        case ALAKAZAM: output = 1; break;
        case HYPNO: output = 1; break;
        case GARDEVOIR: output = 1; break;
        case GALLADE: output = 1; break;
        case EXEGGUTOR: output = 1; break;
        case TORKOAL: output = 1; break;
        case MAGCARGO: output = 1; break;  
        case RAICHU: output = 1; break;
        case FERROTHORN: output = 1; break;      
        case KINGDRA: output = 1; break;      
        case CHERRIM_O: output = 1; break;      
        case CHERRIM_S: output = 1; break;      
        case ARCANINE: output = 1; break;      
        case HYDREIGON: output = 1; break;      
        case REUNICLUS: output = 1; break;      
        case BLISSEY: output = 1; break;      
        }
return output;
}
//#endregion 

Function int SpecialtyMoveRules (int Dexnum, int MoveID)
{
int output = 0;

/*
 * This function returns of a given move has any specialty learning rules, that is to say, if pokemon outside the TM's general typing rules can learn that
 * specific move. this is done by first checking if the given move has specialty rules, which is in the form of another function. if the rules exist then
 * it inputs the Dex number and returns the output.
*/

    Switch (MoveID)
    {
        case MagicalLeaf: output = TMR_MagicalLeaf(Dexnum); break;    
        case EnergyBall: output = TMR_EnergyBall(Dexnum); break;    
        case WaterPulse: output = TMR_WaterPulse(Dexnum); break;    
        case Brine: output = TMR_WaterPulse(Dexnum); break;    
        case Scald: output = TMR_WaterPulse(Dexnum); break;    
        case Surf: output = TMR_Surf(Dexnum); break;    
        case Waterfall: output = TMR_WaterPulse(Dexnum); break;   
        case HealPulse: output = TMR_HealPulse(Dexnum); break;    
        case LifeDew: output = TMR_HealPulse(Dexnum); break;    
        case Reflect: output = TMR_Reflect(Dexnum); break;    
        case LightScreen: output = TMR_LightScreen(Dexnum); break;    
        case CraftyShield: output = TMR_CraftyShield(Dexnum); break;    
        case Psychic: output = TMR_Psychic(Dexnum); break;    
        case Refresh: output = TMR_HealPulse(Dexnum); break;    
        case Dragonrage: output = TMR_Dragonrage(Dexnum); break;    
        case DragonPulse: output = TMR_Dragonrage(Dexnum); break;    
        case Wideguard: output = TMR_WideGuard(Dexnum); break;    
        case Spikes: output = TMR_Spikes(Dexnum); break;    
        case ToxicSpikes: output = TMR_ToxicSpikes(Dexnum); break;    
        case StealthRock: output = TMR_StealthRock(Dexnum); break;   
        case Defog: output = TMR_Defog(Dexnum); break;   
        case ThunderWave: output = TMR_ThunderWave(Dexnum); break;   
        case Dazzlinggleam: output = TMR_Dazzlinggleam(Dexnum); break; 
        case Acrobatics: output = TMR_Acrobatics(Dexnum); break; 
        case Rollout: output = TMR_Rollout(Dexnum); break; 
        case GyroBall: output = TMR_Rollout(Dexnum); break; 
        case HammerArm: output = TMR_HammerArm(Dexnum); break; 
        case DrainingKiss: output = TMR_DrainingKiss(Dexnum); break; 
        case FirePunch: output = TMR_FirePunch(Dexnum); break; 
        case IcePunch: output = TMR_FirePunch(Dexnum); break; 
        case ThunderPunch: output = TMR_FirePunch(Dexnum); break; 
        case AirSlash: output = TMR_AirSlash(Dexnum); break; 
        case Psychocut: output = TMR_AirSlash(Dexnum); break; 
        case Thunderbolt: output = TMR_Thunderbolt(Dexnum); break; 
        case Thunder: output = TMR_Thunder(Dexnum); break; 
        case Solarbeam: output = TMR_SolarBeam(Dexnum); break; 
        case Flamethrower: output = TMR_Flamethrower(Dexnum); break; 
        case Incinerate: output = TMR_Flamethrower(Dexnum); break; 
        case FireBlast: output = TMR_Flamethrower(Dexnum); break; 
        case ClearSmog: output = TMR_ClearSmog(Dexnum); break; 
        case IceBeam: output = TMR_IceBeam(Dexnum); break; 
        case Blizzard: output = TMR_IceBeam(Dexnum); break; 
        case Barrier: output = TMR_WideGuard(Dexnum); break;   
        case AquaRing: output = TMR_HealPulse(Dexnum); break;    
        case CloseCombat: output = TMR_CloseCombat(Dexnum); break;    
        case Toxic: output = TMR_Toxic(Dexnum); break;    
        case SludgeBomb: output = TMR_SludgeBomb(Dexnum); break;    
        case IcyWind: output = TMR_IcyWind(Dexnum); break;    
        case StoneEdge: output = TMR_StoneEdge(Dexnum); break;    
        case RockTomb: output = TMR_RockTomb(Dexnum); break;    
        case FuryCutter: output = TMR_FuryCutter(Dexnum); break;    
        case BugBite: output = TMR_BugBite(Dexnum); break;    
        case DarkPulse: output = TMR_DarkPulse(Dexnum); break;    
        case FocusBlast: output = TMR_FocusBlast(Dexnum); break;    
        case HoneClaws: output = TMR_HoneClaws(Dexnum); break;    
        case DragonDance: output = TMR_DragonDance(Dexnum); break;    
        case RockPolish: output = TMR_RockPolish(Dexnum); break;    
        case BulkUp: output = TMR_BulkUp(Dexnum); break;    
        case IronHead: output = TMR_IronHead(Dexnum); break;    
        case EarthPower: output = TMR_EarthPower(Dexnum); break;    
        case PoisonJab: output = TMR_PoisonJab(Dexnum); break;    
        case GigaDrain: output = TMR_GigaDrain(Dexnum); break;    
        case Fly: output = TMR_Fly(Dexnum); break;    
        case SkyDrop: output = TMR_Fly(Dexnum); break;    
        case SeismicToss: output = TMR_SeismicToss(Dexnum); break;    
        case ElectroBall: output = TMR_Thunderbolt(Dexnum); break; 
        case SuperPower: output = TMR_SuperPower(Dexnum); break; 
        case ZenHeadbutt: output = TMR_ZenHeadbutt(Dexnum); break; 
        case AuraSphere: output = TMR_FocusBlast(Dexnum); break;    
        case BodySlam: output = TMR_BodySlam(Dexnum); break;    
        case FireFang: output = TMR_FireFang(Dexnum); break; 
        case IceFang: output = TMR_FireFang(Dexnum); break; 
        case ThunderFang: output = TMR_FireFang(Dexnum); break;     
        case PowerGem: output = TMR_PowerGem(Dexnum); break;     
        case SignalBeam: output = TMR_SignalBeam(Dexnum); break;     
        case WilloWisp: output = TMR_WilloWisp(Dexnum); break;     
        case MysticalFire: output = TMR_MysticalFire(Dexnum); break;     
        case Roost: output = TMR_Roost(Dexnum); break;     
        case Teleport_M: output = TMR_Teleport(Dexnum); break;     

        //case sworddance: output = TMR_sworddance(Dexnum); break; 
        //case NastyPlot: output = TMR_NastyPlot(Dexnum); break; 
        
        
        
        
    }
return output;
}


//#region -=- TM Rules : SwordDance -=-
Function int TMR_SwordDance (int Dexnum) 
{
int output = 0; //Inverted, Works more like a banlist
    Switch (Dexnum)
    {
    case TOTODILE: output = 0; break;
    case CROCONAW: output = 0; break;
    case FERALIGATR: output = 0; break;
    case TREECKO: output = 0; break;
    case GROVYLE: output = 0; break;
    case SCEPTILE: output = 0; break;
    case TORCHIC: output = 0; break;
    case COMBUSKEN: output = 0; break;
    case BLAZIKEN: output = 0; break;
    case MUDKIP: output = 0; break;
    case MARSHTOMP: output = 0; break;
    case SWAMPERT: output = 0; break;
    case TURTWIG: output = 0; break;
    case GROTLE: output = 0; break;
    case TORTERRA: output = 0; break;
    case CHIMCHAR: output = 0; break;
    case MONFERNO: output = 0; break;
    case INFERNAPE: output = 0; break;
    case SWINUB: output = 0; break;
    case PILOSWINE: output = 0; break;
    case MAMOSWINE: output = 0; break;
    case DRATINI: output = 0; break;
    case DRAGONAIR: output = 0; break;
    case DRAGONITE: output = 0; break;
    case BAGON: output = 0; break;
    case SHELGON: output = 0; break;
    case SALAMENCE: output = 0; break;
    case DREEPY: output = 0; break;
    case DRAKLOAK: output = 0; break;
    case DRAGAPULT: output = 0; break;
    }
return output;
}
//#endregion

//#region -=- TM Rules : NastyPlot -=-
Function int TMR_NastyPlot (int Dexnum) 
{
int output = 0; //Inverted, Works more like a banlist
    Switch (Dexnum)
    {
    case BULBASAUR: output = 0; break;
    case IVYSAUR: output = 0; break;
    case VENUSAUR: output = 0; break;
    case CHARMANDER: output = 0; break;
    case CHARMELEON: output = 0; break;
    case CHARIZARD: output = 0; break;
    case TOTODILE: output = 0; break;
    case CROCONAW: output = 0; break;
    case FERALIGATR: output = 0; break;
    case TREECKO: output = 0; break;
    case GROVYLE: output = 0; break;
    case SCEPTILE: output = 0; break;
    case TORCHIC: output = 0; break;
    case COMBUSKEN: output = 0; break;
    case BLAZIKEN: output = 0; break;
    case MUDKIP: output = 0; break;
    case MARSHTOMP: output = 0; break;
    case SWAMPERT: output = 0; break;
    case TURTWIG: output = 0; break;
    case GROTLE: output = 0; break;
    case TORTERRA: output = 0; break;
    case CHIMCHAR: output = 0; break;
    case MONFERNO: output = 0; break;
    case INFERNAPE: output = 0; break;
    case SWINUB: output = 0; break;
    case PILOSWINE: output = 0; break;
    case MAMOSWINE: output = 0; break;
    case DRATINI: output = 0; break;
    case DRAGONAIR: output = 0; break;
    case DRAGONITE: output = 0; break;
    case BAGON: output = 0; break;
    case SHELGON: output = 0; break;
    case SALAMENCE: output = 0; break;
    case DREEPY: output = 0; break;
    case DRAKLOAK: output = 0; break;
    case DRAGAPULT: output = 0; break;
    }
return output;
}
//#endregion

//#region -=- TM Rules : HammerArm -=-
Function int TMR_HammerArm (int Dexnum) 
{

    int output = 0;
    Switch (Dexnum)
    {
    case WARTORTLE: output = 1; break;
    case BLASTOISE: output = 1; break;
    case CROCONAW: output = 1; break;
    case FERALIGATR: output = 1; break;
    case MARSHTOMP: output = 1; break;
    case SWAMPERT: output = 1; break;
    case DRAGONITE: output = 1; break;
    case SALAMENCE: output = 1; break;
    case ABOMASNOW: output = 1; break;
    }
    if(TMArch_Pugilist(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : MagicalLeaf -=-
Function int TMR_MagicalLeaf (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case DREEPY: output = 1; break;
    case DRAKLOAK: output = 1; break;
    case DRAGAPULT: output = 1; break;
    }
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : EnergyBall -=-
Function int TMR_EnergyBall (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case DREEPY: output = 1; break;
    case DRAKLOAK: output = 1; break;
    case DRAGAPULT: output = 1; break;
    }
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : WaterPulse -=-
Function int TMR_WaterPulse (int Dexnum) 
{

    // also used for other water moves
int output = 0;
    Switch (Dexnum)
    {
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case DREEPY: output = 1; break;
    case DRAKLOAK: output = 1; break;
    case DRAGAPULT: output = 1; break;    
    }
return output;
}
//#endregion

//#region -=- TM Rules : Surf -=-
Function int TMR_Surf (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case PICHU: output = 1; break;
    case PIKACHU: output = 1; break;
    case RAICHU: output = 1; break;
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case DREEPY: output = 1; break;
    case DRAKLOAK: output = 1; break;
    case DRAGAPULT: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM Rules : DrainingKiss -=-
Function int TMR_DrainingKiss (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case MUDKIP: output = 1; break;
    case MARSHTOMP: output = 1; break;
    case SWAMPERT: output = 1; break;
    case PICHU: output = 1; break;
    case PIKACHU: output = 1; break;
    case RAICHU: output = 1; break;
    }
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : FirePunch -=-
Function int TMR_FirePunch (int Dexnum) 
{
 // includes other elemental punches
int output = 0;
    Switch (Dexnum)
    {
    case PICHU: output = 1; break;
    case PIKACHU: output = 1; break;
    case RAICHU: output = 1; break;
    }
    if(TMArch_Pugilist(Dexnum)){output = 1;}
    if(TMArch_Generalist(Dexnum)){output = 1;}
    if(TMDeq_Armless(Dexnum)){output = 0;}

    
return output;
}
//#endregion

//#region -=- TM Rules : FireFang -=-
Function int TMR_FireFang (int Dexnum) 
{
 // includes other elemental fanges
int output = 0;
    Switch (Dexnum)
    {
        case VULPIX: output = 1; break;
        case VULPIX_A: output = 1; break;
        case NINETALES: output = 1; break;
        case NINETALES_A: output = 1; break;
        case GROWLITHE: output = 1; break;
        case ARCANINE: output = 1; break;
        case MUNCHLAX: output = 1; break;
        case SNORLAX: output = 1; break;
        case GYARADOS: output = 1; break;
        case CYNDAQUIL: output = 1; break;
        case QUILAVA: output = 1; break;
        case TYPHLOSION: output = 1; break;
        case TOTODILE: output = 1; break;
        case CROCONAW: output = 1; break;
        case FERALIGATR: output = 1; break;
        case DREEPY: output = 1; break;
        case DRAKLOAK: output = 1; break;
        case DRAGAPULT: output = 1; break;

        case DRATINI: output = 1; break;
        case DRAGONAIR: output = 1; break;
        case DRAGONITE: output = 1; break;

        case BAGON: output = 1; break;
        case SHELGON: output = 1; break;
        case SHELGON: output = 1; break;
        case SALAMENCE: output = 1; break;
        case DEINO: output = 1; break;
        case ZWEILOUS: output = 1; break;
        case HYDREIGON: output = 1; break;
        case GOLEM: output = 1; break;
        case GOLEM_A: output = 1; break;
        case ONIX: output = 1; break;
        case STEELIX: output = 1; break;
        case SEVIPER: output = 1; break;
        case EKANS: output = 1; break;
        case ARBOK: output = 1; break;
        case STUNKY: output = 1; break;
        case SKUNTANK: output = 1; break;
        case TRAPINCH: output = 1; break;
        case VIBRAVA: output = 1; break;
        case FLYGON: output = 1; break;
        case SHIFTRY: output = 1; break;
        case DURANT: output = 1; break;
        case RIOLU: output = 1; break;
        case LUCARIO: output = 1; break;



    }
    if(TMDeq_Fangless(Dexnum)){output = 0;}

    
return output;
}
//#endregion

//#region -=- TM Rules : AirSlash -=-
Function int TMR_AirSlash (int Dexnum) 
{
 // includes other "Slashing" moves
int output = 0;
    Switch (Dexnum)
    {

    }
    if(TMArch_Slasher(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Swift -=-
Function int TMR_Swift (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case CYNDAQUIL: output = 1; break;
    case QUILAVA: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    }
    if(TMArch_Generalist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : HealPulse -=-
Function int TMR_HealPulse (int Dexnum) 
{
    //Also used for most supportive moves
int output = 0;
    Switch (Dexnum)
    {
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    }
    if(TMArch_Succor(Dexnum)){output = 1;}
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Reflect -=-
Function int TMR_Reflect (int Dexnum) 
{
    //Also used for most supportive moves
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHARMANDER: output = 1; break;
    case CHARMELEON: output = 1; break;
    case CHARIZARD: output = 1; break;
    case SQUIRTLE: output = 1; break;
    case WARTORTLE: output = 1; break;
    case BLASTOISE: output = 1; break;
    case PIKACHU: output = 1; break;
    case RAICHU: output = 1; break;
    case GROWLITHE: output = 1; break;
    case ARCANINE: output = 1; break;
    case SHELLDER: output = 1; break;
    case CLOYSTER: output = 1; break;
    case SWINUB: output = 1; break;
    case PILOSWINE: output = 1; break;
    case MAMOSWINE: output = 1; break;
    case SLUGMA: output = 1; break;
    case MAGCARGO: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    case HYDREIGON: output = 1; break;
    case DRAGAPULT: output = 1; break;
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    }
    if(TMArch_Succor(Dexnum)){output = 1;}
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : LightScreen -=-
Function int TMR_LightScreen (int Dexnum) 
{
    //Also used for most supportive moves
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case PIKACHU: output = 1; break;
    case RAICHU: output = 1; break;
    case SHELLDER: output = 1; break;
    case CLOYSTER: output = 1; break;
    case SCYTHER: output = 1; break;
    case SCIZOR: output = 1; break;
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case SLUGMA: output = 1; break;
    case MAGCARGO: output = 1; break;
    case SWINUB: output = 1; break;
    case PILOSWINE: output = 1; break;
    case MAMOSWINE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    case SNOVER: output = 1; break;
    case ABOMASNOW: output = 1; break;
    case DRAGAPULT: output = 1; break;

    }
    if(TMArch_Succor(Dexnum)){output = 1;}
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : CraftyShield -=-
Function int TMR_CraftyShield (int Dexnum) 
{
    //Also used for most supportive moves
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case PIKACHU: output = 1; break;
    case RAICHU: output = 1; break;
    case SHELLDER: output = 1; break;
    case CLOYSTER: output = 1; break;
    case SCYTHER: output = 1; break;
    case SCIZOR: output = 1; break;
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case SLUGMA: output = 1; break;
    case MAGCARGO: output = 1; break;
    case SWINUB: output = 1; break;
    case PILOSWINE: output = 1; break;
    case MAMOSWINE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    case SNOVER: output = 1; break;
    case ABOMASNOW: output = 1; break;
    case DRAGAPULT: output = 1; break;

    }
    if(TMArch_Succor(Dexnum)){output = 1;}
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Psychic -=-
Function int TMR_Psychic (int Dexnum) 
{

    int output = 0;
    Switch (Dexnum)
    {
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case VULPIX_A: output = 1; break;
    case NINETALES_A: output = 1; break;
    case HAPPINY: output = 1; break;
    case CHANSEY: output = 1; break;
    case BLISSEY: output = 1; break;
    }
    if(TMArch_Generalist(Dexnum)){output = 1;}
    if(TMArch_Mystic(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : ThunderBolt -=-
Function int TMR_ThunderBolt (int Dexnum) 
{

    int output = 0;
    Switch (Dexnum)
    {
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case BAGON: output = 1; break;
    case SHELGON: output = 1; break;
    case SALAMENCE: output = 1; break;
    case DRAKLOAK: output = 1; break;
    case DRAGAPULT: output = 1; break;
    case FERROSEED: output = 1; break;
    case FERROTHORN: output = 1; break;
    case RALTS: output = 1; break;
    case KIRLIA: output = 1; break;
    case GARDEVOIR: output = 1; break;
    case GALLADE: output = 1; break;
    case STARYU: output = 1; break;
    case STARMIE: output = 1; break;
    case GASTLY: output = 1; break;
    case HAUNTER: output = 1; break;
    case GENGAR: output = 1; break;
    case GYARADOS: output = 1; break;

    }
    if(TMArch_Generalist(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Thunder -=-
Function int TMR_Thunder (int Dexnum) 
{

    int output = 0;
    Switch (Dexnum)
    {
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case BAGON: output = 1; break;
    case SHELGON: output = 1; break;
    case SALAMENCE: output = 1; break;
    case DRAKLOAK: output = 1; break;
    case DRAGAPULT: output = 1; break;
    case FERROSEED: output = 1; break;
    case FERROTHORN: output = 1; break;
    case SOLOSIS: output = 1; break;
    case DUOSION: output = 1; break;
    case REUNICLUS: output = 1; break;
    case GASTLY: output = 1; break;
    case HAUNTER: output = 1; break;
    case GENGAR: output = 1; break;
    case GYARADOS: output = 1; break;
    }
    if(TMArch_Generalist(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : ThunderWave -=-
Function int TMR_ThunderWave (int Dexnum) 
{

    int output = 0;
    Switch (Dexnum)
    {
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case DREEPY: output = 1; break;
    case DRAKLOAK: output = 1; break;
    case DRAGAPULT: output = 1; break;
    case VULPIX_A: output = 1; break;
    case NINETALES_A: output = 1; break;
    case DEINO: output = 1; break;
    case ZWEILOUS: output = 1; break;
    case HYDREIGON: output = 1; break;
    }
    if(TMArch_Succor(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Dazzlinggleam -=-
Function int TMR_Dazzlinggleam (int Dexnum) 
{

    int output = 0;
    Switch (Dexnum)
    {
    case STARYU: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM Rules : DragonRage -=-
Function int TMR_DragonRage (int Dexnum) 
{
    //used for other dragon moves
    int output = 0;
    Switch (Dexnum)
    {

    }

    if(TMArch_Draconic(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : Flamethrower -=-
Function int TMR_Flamethrower (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        case GEODUDE: output = 1; break;
        case GRAVELER: output = 1; break;
        case GOLEM: output = 1; break;
        case GEODUDE_A: output = 1; break;
        case GRAVELER_A: output = 1; break;
        case GOLEM_A: output = 1; break;
        case STUNKY: output = 1; break;
        case SKUNTANK: output = 1; break;

    }

    if(TMArch_Draconic(Dexnum)){output = 1;}
    if(TMArch_Generalist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : FireBlast -=-
Function int TMR_FireBlast (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        case SLOWPOKE: output = 1; break;
        case SLOWBRO: output = 1; break;
        case SLOWKING: output = 1; break;
        case GEODUDE: output = 1; break;
        case GRAVELER: output = 1; break;
        case GOLEM: output = 1; break;
        case GEODUDE_A: output = 1; break;
        case GRAVELER_A: output = 1; break;
        case GOLEM_A: output = 1; break;
        case STUNKY: output = 1; break;
        case SKUNTANK: output = 1; break;
    }

    if(TMArch_Draconic(Dexnum)){output = 1;}
    if(TMArch_Generalist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : IceBeam -=-
Function int TMR_IceBeam (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    }

    if(TMArch_Generalist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : IcyWind -=-
Function int TMR_IcyWind (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
    case DRATINI: output = 1; break;
    case DRAGONAIR: output = 1; break;
    case DRAGONITE: output = 1; break;
    case RALTS: output = 1; break;
    case KIRLIA: output = 1; break;
    case GARDEVOIR: output = 1; break;
    case GALLADE: output = 1; break;
    case METANG: output = 1; break;
    case METAGROSS: output = 1; break;
    }

    if(TMArch_Generalist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : WideGuard -=-
Function int TMR_WideGuard (int Dexnum) 
{
    //used for other Defensive moves
    int output = 0;
    Switch (Dexnum)
    {

    }
    if(TMArch_Defensive(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Spikes -=-
Function int TMR_Spikes (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {

    }
    if(TMArch_Defensive(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : ToxicSpikes -=-
Function int TMR_ToxicSpikes (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {

    }
return output;
}
//#endregion

//#region -=- TM Rules : StealthRock -=-
Function int TMR_StealthRock (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {

    }
    if(TMArch_Defensive(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Defog -=-
Function int TMR_Defog (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        case STUNKY: output = 1; break;
        case SKUNTANK: output = 1; break;
        case SHIFTRY: output = 1; break;
    }
    if(TMArch_Flyer(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Fly -=-
Function int TMR_Fly (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {

    }
    if(TMArch_Flyer(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Acrobatics -=-
Function int TMR_Acrobatics (int Dexnum) 
{

    int output = 0;
    Switch (Dexnum)
    {
    case CHARMANDER: output = 1; break;
    case CHARMELEON: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TORCHIC: output = 1; break;
    case COMBUSKEN: output = 1; break;
    case BLAZIKEN: output = 1; break;
    case CHIMCHAR: output = 1; break;
    case MONFERNO: output = 1; break;
    case INFERNAPE: output = 1; break;
    case STARYU: output = 1; break;
    case STARMIE: output = 1; break;
    case KIRLIA: output = 1; break;
    case GARDEVOIR: output = 1; break;
    case GALLADE: output = 1; break;
    case DREEPY: output = 1; break;
    case DRAKLOAK: output = 1; break;
    case DRAGAPULT: output = 1; break;
    case HITMONLEE: output = 1; break;
    case HITMONTOP: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM Rules : Rollout -=-
Function int TMR_Rollout (int Dexnum) 
{
    //used for other rolling moves
    int output = 0;
    Switch (Dexnum)
    {
    case SQUIRTLE: output = 1; break;
    case WARTORTLE: output = 1; break;
    case BLASTOISE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    case CLOYSTER: output = 1; break;
    case SLOWPOKE: output = 1; break;
    case SLOWBRO: output = 1; break;
    case SLOWKING: output = 1; break;
    case SLUGMA: output = 1; break;
    case MAGCARGO: output = 1; break;
    case STARYU: output = 1; break;
    case STARMIE: output = 1; break;
    case SHELGON: output = 1; break;
    case SALAMENCE: output = 1; break;
    case HAPPINY: output = 1; break;
    case CHANSEY: output = 1; break;
    case BLISSEY: output = 1; break;
    case GEODUDE: output = 1; break;
    case GRAVELER: output = 1; break;
    case GOLEM: output = 1; break;
    case GEODUDE_A: output = 1; break;
    case GRAVELER_A: output = 1; break;
    case GOLEM_A: output = 1; break;
    case HITMONTOP: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM Rules : SolarBeam -=-
Function int TMR_SolarBeam (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
    case DRAGAPULT: output = 1; break;
    }
    if(TMArch_Generalist(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : ClearSmog -=-
Function int TMR_ClearSmog (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
    case HORSEA: output = 1; break;
    case SEADRA: output = 1; break;
    case KINGDRA: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM Rules : SludgeBomb -=-
Function int TMR_SludgeBomb (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        case MUDKIP: output = 1; break;
        case MARSHTOMP: output = 1; break;
        case SWAMPERT: output = 1; break;
        case TORKOAL: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM Rules : Toxic -=-
Function int TMR_Toxic (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
    case MUDKIP: output = 1; break;
    case MARSHTOMP: output = 1; break;
    case SWAMPERT: output = 1; break;
    case HORSEA: output = 1; break;
    case SEADRA: output = 1; break;
    case KINGDRA: output = 1; break;
    }
    if(TMArch_Defensive(Dexnum)){output = 1;}
    if(TMArch_Generalist(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : CloseCombat -=-
Function int TMR_CloseCombat (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case GROWLITHE: output = 1; break;
    case ARCANINE: output = 1; break;
    }
    if(TMArch_Pugilist(Dexnum)){output = 1;}
    if(TMDeq_Armless(Dexnum)){output = 0;}
    
return output;
}
//#endregion

//#region -=- TM Rules : PoisonJab -=-
Function int TMR_PoisonJab (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case GROWLITHE: output = 1; break;
    case ARCANINE: output = 1; break;
    }
    if(TMArch_Pugilist(Dexnum)){output = 1;}
    if(TMArch_Sharp(Dexnum)){output = 1;}
    
return output;
}
//#endregion

//#region -=- TM Rules : StoneEdge -=-
Function int TMR_StoneEdge (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case SALAMENCE: output = 1; break;
    case HYDREIGON: output = 1; break;
    case TORKOAL: output = 1; break;
    }
    
return output;
}
//#endregion

//#region -=- TM Rules : RockTomb -=-
Function int TMR_RockTomb (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case CHARMANDER: output = 1; break;
    case CHARMELEON: output = 1; break;
    case CHARIZARD: output = 1; break;
    case SQUIRTLE: output = 1; break;
    case WARTORTLE: output = 1; break;
    case BLASTOISE: output = 1; break;
    case DRAGONITE: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TORCHIC: output = 1; break;
    case COMBUSKEN: output = 1; break;
    case BLAZIKEN: output = 1; break;
    case MUDKIP: output = 1; break;
    case MARSHTOMP: output = 1; break;
    case SWAMPERT: output = 1; break;
    case TORKOAL: output = 1; break;
    case ABOMASNOW: output = 1; break;
    case GALLADE: output = 1; break;
    case SOLOSIS: output = 1; break;
    case DUOSION: output = 1; break;
    case REUNICLUS: output = 1; break;
    case BAGON: output = 1; break;
    case SHELGON: output = 1; break;
    case SALAMENCE: output = 1; break;
    case HYDREIGON: output = 1; break;
    case TORKOAL: output = 1; break;
    }
    if(TMArch_Defensive(Dexnum)){output = 1;}
    if(TMArch_Generalist(Dexnum)){output = 1;}
    if(TMArch_Terrestrial(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : Dig -=-
Function int TMR_Dig (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    }
    if(TMArch_Terrestrial(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : Bulldoze -=-
Function int TMR_Bulldoze (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    }
    if(TMArch_Terrestrial(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : EarthPower -=-
Function int TMR_EarthPower (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
        case DEINO: output = 1; break;
        case ZWEILOUS: output = 1; break;
        case HYDREIGON: output = 1; break;

    }
    if(TMArch_Terrestrial(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : HoneClaws -=-
Function int TMR_HoneClaws (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    }
    if(TMArch_Slasher(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : DragonDance -=-
Function int TMR_DragonDance (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    }
    if(TMArch_Draconic(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : RockPolish -=-
Function int TMR_RockPolish (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
        case BERGMITE: output = 1; break;
        case AVALUGG: output = 1; break;
    }

return output;
}
//#endregion

//#region -=- TM Rules : BulkUp -=-
Function int TMR_BulkUp (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
        case GOLISOPOD: output = 1; break;
    }
    if(TMArch_Pugilist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : FuryCutter -=-
Function int TMR_FuryCutter (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
        case BULBASAUR: output = 1; break;
        case IVYSAUR: output = 1; break;
        case VENUSAUR: output = 1; break;
        case CHARMANDER: output = 1; break;
        case GOLEM: output = 1; break;  
        case SLOWBRO: output = 1; break;
        case SLOWKING: output = 1; break;
        case DRAGONITE: output = 1; break;
        case CHIKORITA: output = 1; break;
        case BAYLEEF: output = 1; break;
        case MEGANIUM: output = 1; break;
        case TOTODILE: output = 1; break;
        case CROCONAW: output = 1; break;
        case FERALIGATR: output = 1; break;
        case QUILAVA: output = 1; break;
        case TYPHLOSION: output = 1; break;
        case TREECKO: output = 1; break;
        case COMBUSKEN: output = 1; break;
        case BLAZIKEN: output = 1; break;
        case SALAMENCE: output = 1; break;
        case METANG: output = 1; break;
        case METAGROSS: output = 1; break;
    }
    if(TMArch_Slasher(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : BugBite -=-
Function int TMR_BugBite (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
        case TRAPINCH: output = 1; break;
        case VIBRAVA: output = 1; break;
        case FLYGON: output = 1; break;
    }
    //if(TMArch_Slasher(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : DarkPulse -=-
Function int TMR_DarkPulse (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case BLASTOISE: output = 1; break;
    case VULPIX: output = 1; break;
    case VULPIX_A: output = 1; break;
    case NINETALES: output = 1; break;
    case NINETALES_A: output = 1; break;
    case STEELIX: output = 1; break;
    case SEVIPER: output = 1; break;
    }
    
return output;
}
//#endregion

//#region -=- TM Rules : FocusBlast -=-
Function int TMR_FocusBlast (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case CHARIZARD: output = 1; break;
    case BLASTOISE: output = 1; break;
    case RAICHU: output = 1; break;
    case GOLEM: output = 1; break;
    case GOLEM_A: output = 1; break;
    case DRAGONITE: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case FERALIGATR: output = 1; break;
    case SWAMPERT: output = 1; break;
    case SCEPTILE: output = 1; break;
    case HYDREIGON: output = 1; break;
    case GASTLY: output = 1; break;
    case HAUNTER: output = 1; break;
    case GENGAR: output = 1; break;
    }
    if(TMArch_Generalist(Dexnum)){output = 1;}
    if(TMArch_Mystic(Dexnum)){output = 1;}
    
return output;
}
//#endregion

//#region -=- TM Rules : BodySlam -=-
Function int TMR_BodySlam (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
    case CHARIZARD: output = 1; break;
    case BLASTOISE: output = 1; break;
    case RAICHU: output = 1; break;
    case GOLEM: output = 1; break;
    case GOLEM_A: output = 1; break;
    case DRAGONITE: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case FERALIGATR: output = 1; break;
    case SWAMPERT: output = 1; break;
    }
    if(TMArch_Generalist(Dexnum)){output = 1;}
    if(TMArch_Terrestrial(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : IronHead -=-
Function int TMR_IronHead (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
        case ARCANINE: output = 1; break;
        case DRAGONITE: output = 1; break;
        case KINGDRA: output = 1; break;
        case AVALUGG: output = 1; break;
        case HITMONTOP: output = 1; break;
    }
    

return output;
}
//#endregion

//#region -=- TM Rules : GigaDrain -=-
Function int TMR_GigaDrain (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {
        case EKANS: output = 1; break;
        case ARBOK: output = 1; break;
        case TENTACOOL: output = 1; break;
        case TENTACRUEL: output = 1; break;
        case GASTLY: output = 1; break;
        case HAUNTER: output = 1; break;
        case GENGAR: output = 1; break;
        case TRAPINCH: output = 1; break;
        case VIBRAVA: output = 1; break;
        case FLYGON: output = 1; break;
        case GULPIN: output = 1; break;
        case SWALOT: output = 1; break;
        case ZANGOOSE: output = 1; break;
        case SEVIPER: output = 1; break;
        case TENTACRUEL: output = 1; break;
        case VENONAT: output = 1; break;
        case VENOMOTH: output = 1; break;
        case GOLISOPOD: output = 1; break;

    }
    

return output;
}
//#endregion

//#region -=- TM Rules : SeismicToss -=-
Function int TMR_SeismicToss (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {

        case CHARMANDER: output = 1; break;
        case CHARMELEON: output = 1; break;
        case CHARIZARD: output = 1; break;
        case SQUIRTLE: output = 1; break;
        case WARTORTLE: output = 1; break;
        case BLASTOISE: output = 1; break;
        case PICHU: output = 1; break;
        case PIKACHU: output = 1; break;
        case RAICHU: output = 1; break;
        case CLEFAIRY: output = 1; break;
        case CLEFABLE: output = 1; break;
        case JIGGLYPUFF: output = 1; break;
        case WIGGLYTUFF: output = 1; break;

    }
    if(TMArch_Generalist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : SuperPower -=-
Function int TMR_SuperPower (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {

        case ARCANINE: output = 1; break;
        case SNORLAX: output = 1; break;
        case DRAGONITE: output = 1; break;
        case SCIZOR: output = 1; break;
        case TORKOAL: output = 1; break;
        case DEINO: output = 1; break;
        case ZWEILOUS: output = 1; break;
        case HYDREIGON: output = 1; break;

    }
    if(TMArch_Pugilist(Dexnum)){output = 1;}
    if(TMArch_Terrestrial(Dexnum)){output = 1;}
    if(TMArch_Generalist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : ZenHeadbutt -=-
Function int TMR_ZenHeadbutt (int Dexnum) 
{

int output = 0;
    Switch (Dexnum)
    {


    }
    if(TMArch_Pugilist(Dexnum)){output = 1;}
    if(TMArch_Terrestrial(Dexnum)){output = 1;}
    if(TMArch_Generalist(Dexnum)){output = 1;}

return output;
}
//#endregion

//#region -=- TM Rules : Powergem -=-
Function int TMR_Powergem (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        case STARYU: output = 1; break;
    }
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : SignalBeam -=-
Function int TMR_SignalBeam (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        case STARYU: output = 1; break;
        case STARMIE: output = 1; break;
        case BLASTOISE: output = 1; break;
        case QWILFISH: output = 1; break;
        case HORSEA: output = 1; break;
        case SEADRA: output = 1; break;
        case KINGDRA: output = 1; break;
        case CLOYSTER: output = 1; break;
        case TRAPINCH: output = 1; break;
        case VIBRAVA: output = 1; break;
        case FLYGON: output = 1; break;
        case PIPLUP: output = 1; break;
        case PRINPLUP: output = 1; break;
        case EMPOLEON: output = 1; break;
        case AUDINO: output = 1; break;
        case HYDREIGON: output = 1; break;
    }
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : WillOWisp -=-
Function int TMR_WillOWisp (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {

    }
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : MysticalFire -=-
Function int TMR_MysticalFire (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        
    }
    if(TMArch_Mystic(Dexnum)){output = 1;}
return output;
}
//#endregion


//#region -=- TM Rules : Roost -=-
Function int TMR_Roost (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        
    }
    if(TMArch_Flyer(Dexnum)){output = 1;}
return output;
}
//#endregion

//#region -=- TM Rules : Teleport -=-
Function int TMR_Teleport (int Dexnum) 
{
    int output = 0;
    Switch (Dexnum)
    {
        
    }
    if(TMArch_Flyer(Dexnum)){output = 1;}
return output;
}
//#endregion

//======

//#region -=- TM Archetype : Draconic
Function int TMArch_Draconic (int Dexnum)
{
int output = 0;
    /* Draconic archetype favors Dragon type and dragon like pokemon, allowing the use of dragon moves, and moves
     * that resemble dragon breath.

    */
    Switch (Dexnum)
        {
            case CHARMANDER: output = 1; break;
            case CHARMELEON: output = 1; break;
            case CHARIZARD: output = 1; break;
            case TOTODILE: output = 1; break;
            case CROCONAW: output = 1; break;
            case FERALIGATR: output = 1; break;
            case TREECKO: output = 1; break;
            case GROVYLE: output = 1; break;
            case SCEPTILE: output = 1; break;
            case HORSEA: output = 1; break;
            case SEADRA: output = 1; break;
            case ONIX: output = 1; break;
            case STEELIX: output = 1; break;
            case SEVIPER: output = 1; break;
            case EKANS: output = 1; break;
            case ARBOK: output = 1; break;
            case GYARADOS: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Succor
Function int TMArch_Succor (int Dexnum)
{
int output = 0;
    /* Succor archetype Favors pokemon naturally disposed to team support through healing and buffing, also
     * favors some protective abilities

    */
    Switch (Dexnum)
        {
        case CHIKORITA: output = 1; break;
        case BAYLEEF: output = 1; break;
        case MEGANIUM: output = 1; break;
        case RALTS: output = 1; break;
        case KIRLIA: output = 1; break;
        case GARDEVOIR: output = 1; break;
        case GALLADE: output = 1; break;
        case CHERUBI: output = 1; break;
        case CHERRIM_O: output = 1; break;
        case HAPPINY: output = 1; break;
        case CHANSEY: output = 1; break;
        case BLISSEY: output = 1; break;
        case CLEFFA: output = 1; break;
        case CLEFAIRY: output = 1; break;
        case CLEFABLE: output = 1; break;
        case IGGLYBUFF: output = 1; break;
        case JIGGLYPUFF: output = 1; break;
        case WIGGLYTUFF: output = 1; break;
        case AUDINO: output = 1; break;
        case ALOMOMOLA: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Pugilist
Function int TMArch_Pugilist (int Dexnum)
{
int output = 0;
    /* Pugilist archetype favors pokemon that mainly fight through punches and kicks, thus can learn TM's based around
     * Punches, kicks, and other physical maneuvers.

    */
    Switch (Dexnum)
        {        
            case COMBUSKEN: output = 1; break;
            case BLAZIKEN: output = 1; break;
            case MARSHTOMP: output = 1; break;
            case SWAMPERT: output = 1; break;
            case CHIMCHAR: output = 1; break;
            case MONFERNO: output = 1; break;
            case INFERNAPE: output = 1; break;   
            case DROWZEE: output = 1; break;
            case HYPNO: output = 1; break; 
            case GALLADE: output = 1; break;
            case ABRA: output = 1; break;
            case KADABRA: output = 1; break;
            case ALAKAZAM: output = 1; break;
            case REUNICLUS: output = 1; break;
            case GEODUDE: output = 1; break;
            case GRAVELER: output = 1; break;
            case GOLEM: output = 1; break;
            case GEODUDE_A: output = 1; break;
            case GRAVELER_A: output = 1; break;
            case GOLEM_A: output = 1; break;
            case ZANGOOSE: output = 1; break;
            case SCIZOR: output = 1; break;
            case METANG: output = 1; break;
            case METAGROSS: output = 1; break;
            case CROAGUNK: output = 1; break;
            case TOXICROAK: output = 1; break;
            case GULPIN: output = 1; break;
            case SWALOT: output = 1; break;
            case HAUNTER: output = 1; break;
            case GENGAR: output = 1; break;
            case TANGROWTH: output = 1; break;
            case HERACROSS: output = 1; break;
            case MACHOP: output = 1; break;
            case MACHOKE: output = 1; break;
            case MACHAMP: output = 1; break;
            case MAKUHITA: output = 1; break;
            case HARIYAMA: output = 1; break;
            case TYROGUE: output = 1; break;
            case HITMONLEE: output = 1; break;
            case HITMONCHAN: output = 1; break;
            case HITMONTOP: output = 1; break;
            case RIOLU: output = 1; break;
            case LUCARIO: output = 1; break;

        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Slasher
Function int TMArch_Slasher (int Dexnum)
{
int output = 0;
    /* Slasher archetype favors pokemon that possess sharp claws or natural blades of some kind, 
     * thus they can perform any sword based or slashing moves

    */
    Switch (Dexnum)
        {        
        case CHARMELEON: output = 1; break;
        case CHARIZARD: output = 1; break;
        case FERALIGATR: output = 1; break;
        case EMPOLEON: output = 1; break;
        case GROVYLE: output = 1; break;
        case SCEPTILE: output = 1; break;
        case GALLADE: output = 1; break;
        case ZANGOOSE: output = 1; break;
        case SCYTHER: output = 1; break;
        case SCIZOR: output = 1; break;
        case SEVIPER: output = 1; break;
        case SKUNTANK: output = 1; break;
        case ZANGOOSE: output = 1; break;
        case GOLISOPOD: output = 1; break;
        case HITMONLEE: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Generalist
Function int TMArch_Generalist (int Dexnum)
{
int output = 0;
    /* the Generalist archetype is common on most normal types, it gives them super broad type coverage.

    */
    Switch (Dexnum)
        {        
        case HAPPINY: output = 1; break;
        case CHANSEY: output = 1; break;
        case BLISSEY: output = 1; break;
        case ZANGOOSE: output = 1; break;
        case CLEFFA: output = 1; break;
        case CLEFAIRY: output = 1; break;
        case CLEFABLE: output = 1; break;
        case IGGLYBUFF: output = 1; break;
        case JIGGLYPUFF: output = 1; break;
        case WIGGLYTUFF: output = 1; break;
        case AUDINO: output = 1; break;

        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Defensive
Function int TMArch_Defensive (int Dexnum)
{
int output = 0;
    /* the Defensive archetype is given to more tanky and defense oriented pokemon, giving them access to many defensive utilities.

    */
    Switch (Dexnum)
        {        
            case SQUIRTLE: output = 1; break;
            case WARTORTLE: output = 1; break;
            case BLASTOISE: output = 1; break;
            case CYNDAQUIL: output = 1; break;
            case QUILAVA: output = 1; break;
            case TYPHLOSION: output = 1; break;
            case CHIKORITA: output = 1; break;
            case BAYLEEF: output = 1; break;
            case MEGANIUM: output = 1; break;
            case SHELLDER: output = 1; break;
            case CLOYSTER: output = 1; break;
            case SHELGON: output = 1; break;
            case TORKOAL: output = 1; break;
            case GEODUDE: output = 1; break;
            case GRAVELER: output = 1; break;
            case GOLEM: output = 1; break;
            case GEODUDE_A: output = 1; break;
            case GRAVELER_A: output = 1; break;
            case GOLEM_A: output = 1; break;
            case ONIX: output = 1; break;
            case STEELIX: output = 1; break;
            case BERGMITE: output = 1; break;
            case AVALUGG: output = 1; break;
            case GULPIN: output = 1; break;
            case SWALOT: output = 1; break;
            case SHUCKLE: output = 1; break;
            case MAKUHITA: output = 1; break;
            case HARIYAMA: output = 1; break;

        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Terrestrial
Function int TMArch_Terrestrial (int Dexnum)
{
int output = 0;
    /* Terrestrial archetype involves pokemon that are largely land based, and can learn many 
     * ground and rock moves as a result.

    */
    Switch (Dexnum)
        {
            case BULBASAUR: output = 1; break;
            case IVYSAUR: output = 1; break;
            case VENUSAUR: output = 1; break;
            case CHIKORITA: output = 1; break;
            case BAYLEEF: output = 1; break;
            case MEGANIUM: output = 1; break;
            case CYNDAQUIL: output = 1; break;
            case QUILAVA: output = 1; break;
            case TYPHLOSION: output = 1; break;
            case MUDKIP: output = 1; break;
            case MARSHTOMP: output = 1; break;
            case SWAMPERT: output = 1; break;
            case TURTWIG: output = 1; break;
            case GROTLE: output = 1; break;
            case TORTERRA: output = 1; break;
            case STUNKY: output = 1; break;
            case SKUNTANK: output = 1; break;
            case ZANGOOSE: output = 1; break;
            case SEVIPER: output = 1; break;
            case EKANS: output = 1; break;
            case ARBOK: output = 1; break;
            case DURANT: output = 1; break;
            case HERACROSS: output = 1; break;
            case PINSIR: output = 1; break;
            case MAKUHITA: output = 1; break;
            case HARIYAMA: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Sharp
Function int TMArch_Sharp (int Dexnum)
{
int output = 0;
    /* Sharp archetype involves pokemon that possess horns or spikes of some kind, and can perform
     * Jabbing moves

    */
    Switch (Dexnum)
        {
            case CLOYSTER: output = 1; break;
            case QWILFISH: output = 1; break;
            case JOLTIK: output = 1; break;
            case GALVANTULA: output = 1; break;
            case GOLISOPOD: output = 1; break;
            case PINSIR: output = 1; break;
            case HERACROSS: output = 1; break;
            case HITMONTOP: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Flyer
Function int TMArch_Flyer (int Dexnum)
{
int output = 0;
    /* Flyer archetype involves pokemon that possess wings and are able to fly even if they are not flying type

    */
    Switch (Dexnum)
        {
            case SCYTHER: output = 1; break;
            case SCIZOR: output = 1; break;
            case FLYGON: output = 1; break;
            case VOLCARONA: output = 1; break;
            case VENOMOTH: output = 1; break;
            case DRAGAPULT: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- TM Archetype : Mystic
Function int TMArch_Mystic (int Dexnum)
{
int output = 0;
    /* Mystic archetype involves pokemon that possess supernatural qualities despite not being psychic or fairy typed, this
    gives them access to those types of moves

    */
    Switch (Dexnum)
        {
            case DRAGONITE: output = 1; break;

            case GASTLY: output = 1; break;
            case HAUNTER: output = 1; break;
            case GENGAR: output = 1; break;

            case NUZLEAF: output = 1; break;
            case SHIFTRY: output = 1; break;
            case VOLCARONA: output = 1; break;
            case VENOMOTH: output = 1; break;
            case LUCARIO: output = 1; break;
        }
return output;
}
//#endregion 

//======

//#region -=- TM Dequalifier : Armless
Function int TMDeq_Armless (int Dexnum)
{
int output = 0;
    /* acts as the antithesis to the pugilist archetype, and prevents armless pokemon from learning punching moves.

    */
    Switch (Dexnum)
        {
            case BULBASAUR: output = 1; break;
            case IVYSAUR: output = 1; break;
            case VENUSAUR: output = 1; break;
            case HORSEA: output = 1; break;
            case SEADRA: output = 1; break;
            case KINGDRA: output = 1; break;
            case STARYU: output = 1; break;
            case STARMIE: output = 1; break;
            case CHIKORITA: output = 1; break;
            case BAYLEEF: output = 1; break;
            case MEGANIUM: output = 1; break;
            case MUDKIP: output = 1; break;
            case DREEPY: output = 1; break;
            case DRAKLOAK: output = 1; break;
            case DRAGAPULT: output = 1; break;
            case VULPIX: output = 1; break;
            case NINETALES: output = 1; break;
            case VULPIX_A: output = 1; break;
            case NINETALES_A: output = 1; break;
            case SWINUB: output = 1; break;
            case PILOSWINE: output = 1; break;
            case MAMOSWINE: output = 1; break;
            case BAGON: output = 1; break;
            case SHELGON: output = 1; break;
            case SALAMENCE: output = 1; break;
            case EXEGGCUTE: output = 1; break;
            case EXEGGUTOR: output = 1; break;
            case TORKOAL: output = 1; break;
            case SLUGMA: output = 1; break;
            case MAGCARGO: output = 1; break;
            case FERROSEED: output = 1; break;
            case CHERUBI: output = 1; break;
            case CHERRIM_O: output = 1; break;
            case CHERRIM_S: output = 1; break;
            case GROWLITHE: output = 1; break;
            case ARCANINE: output = 1; break;
            case DEINO: output = 1; break;
            case ZWEILOUS: output = 1; break;
            case HYDREIGON: output = 1; break;
            case SOLOSIS: output = 1; break;
            case DUOSION: output = 1; break;
            case ONIX: output = 1; break;
            case STEELIX: output = 1; break;
            case SCYTHER: output = 1; break;
            case SEVIPER: output = 1; break;
            case BELDUM: output = 1; break;
            case BERGMITE: output = 1; break;
            case AVALUGG: output = 1; break;
            case EKANS: output = 1; break;
            case ARBOK: output = 1; break;
            case GASTLY: output = 1; break;
            case TENTACOOL: output = 1; break;
            case TENTACRUEL: output = 1; break;
            case MAGIKARP: output = 1; break;
            case GYARADOS: output = 1; break;
            case QWILFISH: output = 1; break;
            case SKARMORY: output = 1; break;
            case LARVESTA: output = 1; break;
            case VOLCARONA: output = 1; break;
            case MANTYKE: output = 1; break;
            case MANTINE: output = 1; break;
            case TRAPINCH: output = 1; break;
            case VIBRAVA: output = 1; break;
            case SEEDOT: output = 1; break;
            case MAGNEMITE: output = 1; break;
            case MAGNETON: output = 1; break;
            case MAGNEZONE: output = 1; break;
            case MURKROW: output = 1; break;
            case HONCHKROW: output = 1; break;
            case MAREEP: output = 1; break;
            case SHELLDER: output = 1; break;
            case CLOYSTER: output = 1; break;
            case JOLTIK: output = 1; break;
            case GALVANTULA: output = 1; break;
            case WIMPOD: output = 1; break;
            case YANMA: output = 1; break;
            case YANMEGA: output = 1; break;
            case VENONAT: output = 1; break;
            case VENOMOTH: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- TM Dequalifier : Fangless
Function int TMDeq_Fangless (int Dexnum)
{
int output = 0;
    /* Prevents pokemon without teeth from learning biting moves

    */
    Switch (Dexnum)
        {
            case HORSEA: output = 1; break;
            case SEADRA: output = 1; break;
            case KINGDRA: output = 1; break;
            case STARYU: output = 1; break;
            case STARMIE: output = 1; break;
            case EXEGGCUTE: output = 1; break;
            case EXEGGUTOR: output = 1; break;
            case TORKOAL: output = 1; break;
            case SLUGMA: output = 1; break;
            case MAGCARGO: output = 1; break;
            case FERROSEED: output = 1; break;
            case CHERUBI: output = 1; break;
            case CHERRIM_O: output = 1; break;
            case CHERRIM_S: output = 1; break;
            case SOLOSIS: output = 1; break;
            case DUOSION: output = 1; break;
            case BELDUM: output = 1; break;
            case TENTACOOL: output = 1; break;
            case TENTACRUEL: output = 1; break;
            case MAGIKARP: output = 1; break;
            case QWILFISH: output = 1; break;
            case MANTYKE: output = 1; break;
            case MANTINE: output = 1; break;
            case SEEDOT: output = 1; break;
            case NUZLEAF: output = 1; break;
            case MAGNEMITE: output = 1; break;
            case MAGNETON: output = 1; break;
            case MAGNEZONE: output = 1; break;
            case MURKROW: output = 1; break;
            case HONCHKROW: output = 1; break;
            case MAREEP: output = 1; break;
            case FLAAFFY: output = 1; break;
            case AMPHAROS: output = 1; break;
            case SHELLDER: output = 1; break;
            case CLOYSTER: output = 1; break;
            case WIMPOD: output = 1; break;
            case YANMA: output = 1; break;
            case YANMEGA: output = 1; break;
            case VENONAT: output = 1; break;
            case VENOMOTH: output = 1; break;
            case CLEFFA: output = 1; break;
            case CLEFAIRY: output = 1; break;
            case CLEFABLE: output = 1; break;
            case JIGGLYPUFF: output = 1; break;
            case WIGGLYTUFF: output = 1; break;
            case IGGLYBUFF: output = 1; break;
            case HAPPINY: output = 1; break;
            case CHANSEY: output = 1; break;
            case BLISSEY: output = 1; break;
            case AUDINO: output = 1; break;
            case ALOMOMOLA: output = 1; break;

        }
return output;
}
//#endregion 


//#region -=-=-= Depreciated -=-=-=


script "CheckTM" (int TM_TYPE, int TM_ARCH1)
{
int output; 
int PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));
int PlayerTypeA = StatDEX[PlayerDexNum][7];
int PlayerTypeB = StatDEX[PlayerDexNum][8];
Int CheckType;


if(TM_TYPE != TMT_NULL){CheckType = 1;}
if(TM_ARCH1 != 0){CheckType = 2;}

if(CheckType==0)
    {//if both are 0, this TM is Semi-universal
        output = 1;
    }

//First, Check for a matching Type
    if(CheckType>=1)
    {
        if(TM_TYPE & GrabTMType(PlayerTypeA)
        || TM_TYPE & GrabTMType(PlayerTypeB)){output = 1; CheckType = -1;}
    }


if(CheckType>=2)
    {
    //If type doesn't match, then we check for archetypes

    if(!output && TM_ARCH1 & TMA_Mature) output = TMArch_Mature(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Prankster) output = TMArch_Prankster(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Defensive) output = TMArch_Defensive(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Succor) output = TMArch_Succor(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Pugilist) output = TMArch_Pugilist(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Terrestrial) output = TMArch_Terrestrial(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Artillery) output = TMArch_Artillery(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Draconic) output = TMArch_Draconic(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Spikey) output = TMArch_Spikey(PlayerDexNum);
    if(!output && TM_ARCH1 & TMA_Slasher) output = TMArch_Slasher(PlayerDexNum);
    }

    //if the pokemon is on the no-TM list, then auto reject
    if(TM_Exclusion(PlayerDexNum) == 1)Output = 0;

SetResultValue(output);
}

//#region Grab TM Type function

Function int GrabTMType (int TMType)
{
int output = 0;
// Evolved TM's are learnable by any pokemon that is at their final stage;


    Switch (TMType)
    {
        case Type_NORMAL: output = TMT_Normal; break;
        case Type_FIGHTING: output = TMT_Fighting; break;
        case Type_FLYING: output = TMT_Flying; break;
        case Type_POISON: output = TMT_Poison; break;
        case Type_GROUND: output = TMT_Ground; break;
        case Type_ROCK: output = TMT_Rock; break;
        case Type_BUG: output = TMT_Bug; break;
        case Type_GHOST: output = TMT_Ghost; break;
        case Type_STEEL: output = TMT_Steel; break;
        case Type_FIRE: output = TMT_Fire; break;
        case Type_WATER: output = TMT_Water; break;
        case Type_GRASS: output = TMT_Grass; break;
        case Type_ELECTRIC: output = TMT_Electric; break;
        case Type_PSYCHIC: output = TMT_Psychic; break;
        case Type_ICE: output = TMT_Ice; break;
        case Type_DRAGON: output = TMT_Dragon; break;
        case Type_DARK: output = TMT_Dark; break;
        case Type_FAIRY: output = TMT_Fairy; break;
    }
return output;
}

//#endregion

//#region -=- Semi Universal TMs
Function int Semi_UniversalTM (int Dexnum)
{
int output = 1;
// Semi universal TM's wor for nearly everyone, excluding smeargle who learns no TM's and
// deliberately weak pokemon like Magicarp

    Switch (Dexnum)
    {
    case SMEARGLE: output = 0;
    }
return output;
}
//#endregion 

//#region -=- Semi Universal TMs
Function int TM_Exclusion (int Dexnum)
{
int output = 0;
// Following pokemon cannot use TM's at all

    Switch (Dexnum)
    {
    case SMEARGLE: output = 1;
    }
return output;
}
//#endregion 

//#region -=- Archetype : Mature
Function int TMArch_Mature (int Dexnum)
{
int output = 0;
// Semi universal TM's wor for nearly everyone, excluding smeargle who learns no TM's and
// deliberately weak pokemon like Magicarp

    Switch (Dexnum)
    {
        case VENUSAUR: output = 1; break;
        case CHARIZARD: output = 1; break;
        case BLASTOISE: output = 1; break;
        case MEGANIUM: output = 1; break;
        case TYPHLOSION: output = 1; break;
        case FERALIGATR: output = 1; break;
        case SCEPTILE: output = 1; break;
        case BLAZIKEN: output = 1; break;
        case SWAMPERT: output = 1; break;
        case TORTERRA: output = 1; break;
        case INFERNAPE: output = 1; break;
        case EMPOLEON: output = 1; break;
        }
return output;
}
//#endregion 

//#region -=- Archetype : Prankster
Function int TMArch_Prankster (int Dexnum)
{
int output = 0;
// Prankster archetype favors mischevous and/or status oriented pokemon

    Switch (Dexnum)
    {
        case CHIMCHAR: output = 1; break;
        case MONFERNO: output = 1; break;
        case INFERNAPE: output = 1; break;
    }
return output;
}
//#endregion 

//#region -=- Archetype : Artillery
Function int TMArch_Artillery (int Dexnum)
{
int output = 0;
    /* Artillery archetype Favors largely projectile oriented pokemon, typically those with natural cannons on them,
    moves for this archetype are usually lob move, beam moves, or moves with words like "Bullet" or "Cannon" in their
    name

    */
    Switch (Dexnum)
        {
        case BLASTOISE: output = 1; break;   
        }
return output;
}
//#endregion 

//#region -=- Archetype : Spikey
Function int TMArch_Spikey (int Dexnum)
{
int output = 0;
    /* Spikey archetype

    */
    Switch (Dexnum)
        {
            
        }
return output;
}
//#endregion 


//====

//#region -=- old TM check -=-
script "CheckTM_Old" (int TMNum)
{
int output; 
int PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));


Switch (TMNum)
    {
    Case 6: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 14: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 15: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 16: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 19: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 20: output = Semi_UniversalTM(PlayerDexNum); break;
    Case 40: output = CheckTM40(PlayerDexNum); break;
    Case 44: output = CheckTM44(PlayerDexNum); break;
    Case 45: output = CheckTM45(PlayerDexNum); break;
    Case 50: output = CheckTM50(PlayerDexNum); break;
    Case 51: output = CheckTM51(PlayerDexNum); break;
    Case 58: output = CheckTM58(PlayerDexNum); break;
    Case 59: output = EvolvedTM(PlayerDexNum); break;
    default: log(s:"No TM Data"); output = 0; break;
    }
//log(i:PlayerDexNum);
//log(i:output);
SetResultValue(output);
}

//#endregion

//#region -=- evolved pokemon only TMs -=-
Function int EvolvedTM (int Dexnum)
{
int output = 0;
// Evolved TM's are learnable by any pokemon that is at their final stage;

    Switch (Dexnum)
    {
    case VENUSAUR: output = 1; break;
    case CHARIZARD: output = 1; break;
    case BLASTOISE: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case FERALIGATR: output = 1; break;
    case SCEPTILE: output = 1; break;
    case BLAZIKEN: output = 1; break;
    case SWAMPERT: output = 1; break;
    case TORTERRA: output = 1; break;
    case INFERNAPE: output = 1; break;
    case EMPOLEON: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM40: Bullet Seed -=-
Function int CheckTM40 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM44: Magicalleaf -=-
Function int CheckTM44 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM45: FlameThrower -=-
Function int CheckTM45 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case CHARMANDER: output = 1; break;
    case CHARMELEON: output = 1; break;
    case CHARIZARD: output = 1; break;
    case CYNDAQUIL: output = 1; break;
    case QUILAVA: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TORCHIC: output = 1; break;
    case COMBUSKEN: output = 1; break;
    case BLAZIKEN: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM50: Icy Wind -=-
Function int CheckTM50 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case SQUIRTLE: output = 1; break;
    case WARTORTLE: output = 1; break;
    case BLASTOISE: output = 1; break;
    case TOTODILE: output = 1; break;
    case CROCONAW: output = 1; break;
    case FERALIGATR: output = 1; break;
    case MUDKIP: output = 1; break;
    case MARSHTOMP: output = 1; break;
    case SWAMPERT: output = 1; break;
    case PIPLUP: output = 1; break;
    case PRINPLUP: output = 1; break;
    case EMPOLEON: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM51: Energy Ball -=-
Function int CheckTM51 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    }
return output;
}
//#endregion

//#region -=- TM58: SolarBeam -=-
Function int CheckTM58 (int Dexnum) 
{
int output = 0;
    Switch (Dexnum)
    {
    case BULBASAUR: output = 1; break;
    case IVYSAUR: output = 1; break;
    case VENUSAUR: output = 1; break;
    case CHARIZARD: output = 1; break;
    case CHIKORITA: output = 1; break;
    case BAYLEEF: output = 1; break;
    case MEGANIUM: output = 1; break;
    case TYPHLOSION: output = 1; break;
    case TREECKO: output = 1; break;
    case GROVYLE: output = 1; break;
    case SCEPTILE: output = 1; break;
    case TURTWIG: output = 1; break;
    case GROTLE: output = 1; break;
    case TORTERRA: output = 1; break;
    case BLAZIKEN: output = 1; break;
    }
return output;
}
//#endregion

//#endregion

//#region -=- the big, fat, array

#LIBDEFINE MAXTMS 100

#DEFINE NOPE 0 //No, cannot learn
#DEFINE YEAH 1 //Yes, can learn


Int TM_Dex [MAXDEX][MAXTMS] = {
//    | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |100 |
/*0*/ {},//
/*1*/ {},//
/*2*/ {},//
/*3*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*4*/ {},//
/*5*/ {},//
/*6*/ {},//
/*7*/ {},//
/*8*/ {},//
/*9*/ {},//
//     | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |100 |
/*10*/ {},//
/*11*/ {},//
/*12*/ {},//
/*13*/ {},//
/*14*/ {},//
/*15*/ {},//
/*16*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*17*/ {},//
/*18*/ {},//
/*19*/ {},//
//     | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |100 |
/*20*/ {},//
/*21*/ {},//
/*22*/ {},//
/*23*/ {},//
/*24*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*25*/ {},//
/*26*/ {},//
/*27*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*28*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*29*/ {},//
//     | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 |100 |
/*30*/ {},//
/*31*/ {},//
/*32*/ {},//
/*33*/ {},//
/*34*/ {YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,YEAH,},//
/*35*/ {},//
/*36*/ {},//
};

//#endregion 