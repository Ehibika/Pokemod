/* -=- Pokemon Stats -=-
 * Scripts that handle all the number crunching involved in generating stats for players on conditions such as level ups, or on
 * Stat alterations.
 * 

*/

#library "A_Stats"
#Import "A_Leveling.acs"
#Import "DB_Player.acs"
#Import "DB_Data.acs"
#Import "DB_Stats.acs"
#Import "Dex_Pokemon.acs"
#import "Dex_Types.acs"
#import "Dex_Leveling.acs"
#Import "Dex_Basestats.acs"
#Import "WEPACS.acs"
#include "zcommon.acs"
#include "8bdmlib.acs"

Script "StatInitializer" (int DexNum) 
{
    Int PLevel = GetCVar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
        if(PLevel <= 0)
            {
                PLevel = 1;
                SetCVar(StrParam(s:"PlayerLevel_",i:PlayerNumber()),PLevel);
            }
    ACS_NamedExecuteAlways("ChangeBaseStat",0,DexNum);   
    GetActiveStats(PLevel);
    ACS_NamedExecuteAlways("PokeSpeed_Handler",0,1);
    ACS_NamedExecuteAlways("ActiveStat_Handler",0,0,1);
}

Function Int ActStatCalc (int inputStat, int inputLevel)
{

int a ,b ,c ,d;

a = inputStat*4;
b = a * inputLevel;
c = (b / PKMN_MaxLVL);
d = c + 30;
if(d > 999){d=999;}
Return (d);

}

Script "ActiveStatUpdate" (int HPHeal) //for level ups
{
    StatClear(1);
    Int PLevel = GetCVar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
        if(PLevel <= 0)
            {
                PLevel = 1;
                SetCVar(StrParam(s:"PlayerLevel_",i:PlayerNumber()),PLevel);
            }
    GetActiveStats(PLevel);
    ACS_NamedExecuteAlways("PokeSpeed_Handler",0,1);
    ACS_NamedExecuteAlways("ActiveStat_Handler",0,0,HPHeal);
}

Script "StatUpdate" (VOID)  //for general stat modifications
{
    StatClear(0);

    ACS_NamedExecuteAlways("PokeSpeed_Handler",0,1);
    ACS_NamedExecuteAlways("ActiveStat_Handler",0,1);
}
/* -=- Depreciated
Script "StatusMenuUpdate" (void) CLIENTSIDE
{
if(PlayerIsBot(PlayerNumber())){Terminate;}

int pln = playernumber();
int PlayerLCV = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
int PlayerECV = GetCvar(StrParam(s:"PlayerEXP_",i:PlayerNumber()));
int PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));
Int LvlRate = StatDEX[PlayerDexNum][9];

SetUserCvar(pln,"YOUR_PATK",CheckInventory("Active_PAttack"));
SetUserCvar(pln,"YOUR_SATK",CheckInventory("Active_SAttack"));
SetUserCvar(pln,"YOUR_PDEF",CheckInventory("Active_PDefense"));
SetUserCvar(pln,"YOUR_SDEF",CheckInventory("Active_SDefense"));
SetUserCvar(pln,"YOUR_SPD",CheckInventory("Active_Speed"));

//SetUserCvar(pln,"YOUR_LEVEL",PlayerLCV);
//SetUserCvar(pln,"YOUR_EXP",PlayerECV);
//SetUserCvar(pln,"YOUR_NEXTEXP",LevelUpTable[LvlRate][PlayerLCV]);
}

Script "StatusMenuClear" (void) CLIENTSIDE
{
if(PlayerIsBot(PlayerNumber())){Terminate;}

int pln = playernumber();
SetUserCvar(pln,"YOUR_PATK",0);
SetUserCvar(pln,"YOUR_SATK",0);
SetUserCvar(pln,"YOUR_PDEF",0);
SetUserCvar(pln,"YOUR_SDEF",0);
SetUserCvar(pln,"YOUR_SPD",0);

SetUserCvar(pln,"YOUR_LEVEL",0);
SetUserCvar(pln,"YOUR_EXP",0);
SetUserCvar(pln,"YOUR_NEXTEXP",0);
}
*/

Function Void StatClear (Int Mode)
{
    str a ,b ,c ,d;
    if(Mode == 1)
    {
    TakeInventory("Active_PAttack",999);
    TakeInventory("Active_SAttack",999);
    TakeInventory("Active_PDefense",999);
    TakeInventory("Active_SDefense",999);
    TakeInventory("Active_HP",999);
    TakeInventory("Active_Speed",999);
    }

    For (int s = 0; s < 1001; s++)
    {
        a = StrParam(s:"PATK",i:s);
        b = StrParam(s:"SATK",i:s);
        c = StrParam(s:"PDEF",i:s);
        d = StrParam(s:"SDEF",i:s);
        if(CheckInventory(a)){TakeInventory(a,9);}
        if(CheckInventory(b)){TakeInventory(b,9);}
        if(CheckInventory(c)){TakeInventory(c,9);}
        if(CheckInventory(d)){TakeInventory(d,9);}

    }
}

Function Void GetActiveStats (Int PLevel)
{
    GiveInventory("Active_PAttack",ActStatCalc(CheckInventory("Base_PAttack"),PLevel));
    GiveInventory("Active_SAttack",ActStatCalc(CheckInventory("Base_SAttack"),PLevel));
    GiveInventory("Active_PDefense",ActStatCalc(CheckInventory("Base_PDefense"),PLevel));
    GiveInventory("Active_SDefense",ActStatCalc(CheckInventory("Base_SDefense"),PLevel));

    GiveInventory("Active_HP",ActStatCalc(CheckInventory("Base_HP"),PLevel));
    //GiveInventory("Active_Speed",ActStatCalc(CheckInventory("Base_Speed"),PLevel));
    //GiveInventory("Active_Speed",CheckInventory("Base_Speed"));
}


/*
Str StatName[5] = {
"PATK",
"SATK",
"PDEF",
"SDEF",
"SPD",
};

Str StatName2[7] = {
    "UP3",
    "UP2",
    "UP1",
    "Null",
    "DOWN1",
    "DOWN2",
    "DOWN3",
};
*/



Script "ChangeBaseStat" (int DexNum)
{
//Changes the base stats inventory and updates the active stats

if(DexNum < 0 || DexNum > MAXDEX){Terminate;}

TakeInventory("Base_PAttack",999);
TakeInventory("Base_SAttack",999);
TakeInventory("Base_PDefense",999);
TakeInventory("Base_SDefense",999);
TakeInventory("Base_HP",999);
//TakeInventory("Base_Speed",999);

GiveInventory("Base_PAttack",StatDEX[DexNum][BASE_PATK]);
GiveInventory("Base_SAttack",StatDEX[DexNum][BASE_SATK]);
GiveInventory("Base_PDefense",StatDEX[DexNum][BASE_PDEF]);
GiveInventory("Base_SDefense",StatDEX[DexNum][BASE_SDEF]);
GiveInventory("Base_HP",StatDEX[DexNum][BASE_HP]);
//GiveInventory("Base_Speed",StatDEX[DexNum][BASE_SPD]);
ACS_NamedExecuteAlways("ActiveStatUpdate",0,1);
}



Script "StatItemNuke" (int ItemType, int MistBlock)
{

    //first, if the player has a mist, the mist is removed but everything else is safe
    if(CheckInventory("MistFlag") && ItemType & SB_GOOD)
        {
        if(!MistBlock){TakeInventory("MistFlag",999);}
        else{Terminate;}
        //if mistblock is true, then this stat nuke is blocked entirely
        }
    for (int t = 0; t < STATITEMNUM; t++)
    {
        if((ItemType & SB_GOOD) && (StatEffectName[t][1] == "GOOD")){TakeInventory(StrParam(s:"STF_",s:StatEffectName[t][0]),999);}
        else if((ItemType & SB_BAD) && (StatEffectName[t][1] == "BAD")){TakeInventory(StrParam(s:"STF_",s:StatEffectName[t][0]),999);}
    }  

    //for extra stuff
    if(ItemType & SB_GOOD) 
        {
            if(CheckInventory("ReflectPower"))TakeInventory("ReflectPower",999);
            if(CheckInventory("LightScreenPower"))TakeInventory("LightScreenPower",999);
            if(CheckInventory("CraftyShieldPower"))TakeInventory("CraftyShieldPower",999);
            if(CheckInventory("MistFlag"))TakeInventory("MistFlag",999);
        }

}

Script "ActiveStat_Handler" (Int Mode, int HPHeal)
{
/*
So what goes on here is that, player have Active Stat inventories that act as a decider
for how much of a multiplier to physical/special attack/deense they get, as well as how
their HP and speed are

Edit: Much like Defense, Attack is now calculated Piecewise
*/


//First, let's wait untill the player has all of their active stats, if they take too long, then just terinate the script

int WaitTimer;

Until(CheckInventory("Active_PAttack")
    &&CheckInventory("Active_SAttack")
    &&CheckInventory("Active_PDefense")
    &&CheckInventory("Active_SDefense")
    &&CheckInventory("Active_HP")
    //&&CheckInventory("Active_Speed")
    )
    {Delay(1); WaitTimer++; if(WaitTimer > 35){Terminate;}}

int StatValue;
int ModStat;
int SpeedValue;
Int PlayeLVL = GetPokeValue(POKELEVEL);
/*
======| Attacking Stats | =======
*/


ModStat = StatModifier(CheckInventory("Active_PAttack"),PATK_ID);
StatValue = PieceWiseStatCalc(ModStat,STATMIN,ATKSTATBASELINE1,ATKSTATBASELINE2,STATMAX,ATKVAL1,ATKVAL2,ATKVAL3,ATKVAL4);

if(StatValue < 10){StatValue = 10;}
if(StatValue>1000){StatValue=1000;}
GiveInventory(StrParam(s:"PATK",i:StatValue),1);

ModStat = StatModifier(CheckInventory("Active_SAttack"),SATK_ID);
StatValue = PieceWiseStatCalc(ModStat,STATMIN,ATKSTATBASELINE1,ATKSTATBASELINE2,STATMAX,ATKVAL1,ATKVAL2,ATKVAL3,ATKVAL4);

if(StatValue < 10){StatValue = 10;}
if(StatValue>1000){StatValue=1000;}
GiveInventory(StrParam(s:"SATK",i:StatValue),1);

/*
======| Defending Stats | =======
okay so two things I'm doing differently

first is that the scaling value is reversed, so 250 means the lowest stat value number,
which equates to a stronger damage anti-multiplier (0.25)

Second, Defense is something of a piecewise equation, essentially, how defense is calculated is based on the value, if it is at or
above 80, it's calculated between the ranges of 80 and 250, if it is below 80, then it's adjusted to scale between the 
ranges of 80 and 1.

*/

ModStat = StatModifier(CheckInventory("Active_PDefense"),PDEF_ID);
StatValue = PieceWiseStatCalc(ModStat,STATMIN,DEFSTATBASELINE1,DEFSTATBASELINE2,STATMAX,DEFVAL4,DEFVAL3,DEFVAL2,DEFVAL1);

if(StatValue < 10){StatValue = 10;}
if(StatValue>1000){StatValue=1000;}
GiveInventory(StrParam(s:"PDEF",i:StatValue),1);

ModStat = StatModifier(CheckInventory("Active_SDefense"),SDEF_ID);
StatValue = PieceWiseStatCalc(ModStat,STATMIN,DEFSTATBASELINE1,DEFSTATBASELINE2,STATMAX,DEFVAL4,DEFVAL3,DEFVAL2,DEFVAL1);

if(StatValue < 10){StatValue = 10;}
if(StatValue>1000){StatValue=1000;}
GiveInventory(StrParam(s:"SDEF",i:StatValue),1);

/*
======| Health Stats | =======

HP is also piecewise
*/
If (Mode == 0)
    {
        StatValue = PieceWiseStatCalc(CheckInventory("Active_HP"),STATMIN,HPSTATBASELINE1,HPSTATBASELINE2,STATMAX,HPVAL1,HPVAL2,HPVAL3,HPVAL4);
        StatValue = HPRound(StatValue);
        /*
    if(CheckInventory("Active_HP") >= HPSTATBASELINE2)
        {
        StatValue = ValueMap(CheckInventory("Active_HP"),STATMAX,HPSTATBASELINE2,HPVAL3,HPVAL2);
        }
    else
        {
        StatValue = ValueMap(CheckInventory("Active_HP"),HPSTATBASELINE2,STATMIN,HPVAL2,HPVAL1);
        }
    */
    if(StatValue < 50){StatValue = 50;}
    //if(StatValue>999){StatValue=999;}
    SetActorPRoperty(0,APROP_SPAWNHEALTH,StatValue);
    //if(GetActorProperty(0,APROP_HEALTH) > GetActorProperty(0,APROP_SPAWNHEALTH)){SetActorPRoperty(0,APROP_HEALTH,StatValue);}
    if(HPHeal){SetActorPRoperty(0,APROP_HEALTH,StatValue);}
    TakeInventory("SBAR_HP",9999);
    GiveInventory("SBAR_HP",StatValue);
    }

TakeInventory("SBAR_LVL",999);
if(PlayeLVL <= PKMN_MaxLVL){GiveInventory("SBAR_LVL",PlayeLVL);}
Else{GiveInventory("SBAR_LVL",PKMN_MaxLVL);}

//log(i:PlayeLVL);
    
}

//#region -=- piecewise function -=-
Function int PieceWiseStatCalc(int Input,int range0, Int Range1, int Range2, int Range3, int OutPut1, int Output2, int Output3, int Output4)
{
int ReturnVal;

if(Input >= Range2)
    {
        ReturnVal = Noneg(ValueMap(Input,Range3,Range2,Output4,Output3));
    }
else if(Input >= Range1)
    {
        ReturnVal = Noneg(ValueMap(Input,Range2,Range1,Output3,Output2));
    }
else
    {
        ReturnVal = Noneg(ValueMap(Input,Range1,range0,Output2,OutPut1));    
    }

    return ReturnVal;
}
//#endregion

Script "PokeSpeed_Handler" (Void)
{
/*
======| Speed Stats | =======
*/
int PlayerDexNum;
Switch(IsValidPKMNActor(ActivatorTID()))
    {
    Case 0: terminate; Break;
    Case 1: PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber())); Break;
    Case 2: PlayerDexNum = CheckInventory("MobDexNum"); Break;
    }
 

SetActorPRoperty(0,APROP_SPEED,GetSpeedTier(PlayerDexNum,StatModCount(SPD_ID)));
}

Function int GetSpeedTier (int DexNum, int ModCount)
{

//int SpeedTier = ValueMap(Speed,SpeedTable[Level-1][1],SpeedTable[Level-1][0],6,4);
int Output = 0.0;

/*
 * if the player has their speed increased, then it would increase it based on their
 * baseline speed tier, however if their speed has been decreased, they will be interpreted
 * as having the lowest base speed tier. in other words. one speed drop means every
 * pokemon regardless of speed is now at speed tier 3 with 0.7 speed multiplier.
*/

int SpeedTier = StatDEX[DexNum][BASE_SPD];

if(ModCount > 0 && SpeedTier < SUPERFAST_SPD){SpeedTier = SUPERFAST_SPD;}
if(ModCount < 0 && SpeedTier > SLOW_SPD){SpeedTier = SLOW_SPD;}

SpeedTier += ModCount;

 if(SpeedTier > 10){SpeedTier = 10;}
 if(SpeedTier < 0){SpeedTier = 0;}

 switch(SpeedTier)
    {
    Case 0: Output = SPEEDTIER_0; break;
    Case 1: Output = SPEEDTIER_1; break;
    Case 2: Output = SPEEDTIER_2; break;
    Case 3: Output = SPEEDTIER_3; break;
    Case 4: Output = SPEEDTIER_4; break;
    Case 5: Output = SPEEDTIER_5; break;
    Case 6: Output = SPEEDTIER_6; break;
    Case 7: Output = SPEEDTIER_7; break;
    Case 8: Output = SPEEDTIER_8; break;
    Case 9: Output = SPEEDTIER_9; break;
    Case 10: Output = SPEEDTIER_10; break;
    }
//log(s:"SpeedTier: ",i:SpeedTier, s:" Speed: ",f:Output);
PlayerSpeedTiers[PlayerNumber()] = SpeedTier;
Return Output;

}

Script "StatValueRamp" (int StatID, Int MinValue, Int MaxValue)
{
int StatValue;
int ModStat;

switch(StatID)
    {
        default: ModStat = StatModifier(CheckInventory("Active_PAttack"),0); break;
        Case 1: ModStat = StatModifier(CheckInventory("Active_SAttack"),1); break;
        Case 2: ModStat = StatModifier(CheckInventory("Active_PDefense"),2); break;
        Case 3: ModStat = StatModifier(CheckInventory("Active_SDefense"),3); break;
        Case 4: ModStat = StatModifier(CheckInventory("Active_Speed"),4); break;
        Case 5: ModStat = StatModifier(CheckInventory("Active_HP"),5); break;
    }

    StatValue = ValueMap(ModStat,999,1,MaxValue,MinValue);
    //Log(i:StatValue);
    SetResultValue(StatValue);
}


Script "StatValueRamp2" (int StatID, Int MinValue, Int MaxValue)
{ // - For missile actors to grab stats from their owner -


int StatValue;
int ModStat;
int FiringPlayer= ACS_ExecuteWithResult(257, 0);
switch(StatID)
    {
        default: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_PAttack"),0); break;
        Case 1: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_SAttack"),1); break;
        Case 2: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_PDefense"),2); break;
        Case 3: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_SDefense"),3); break;
        Case 4: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_Speed"),4); break;
        Case 5: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_HP"),5); break;
    }

    StatValue = ValueMap(ModStat,999,1,MaxValue,MinValue);
    //Log(i:StatValue);
    SetResultValue(StatValue);
}


Script "StatTest" (int input)
{
int StatValue;

StatValue = ValueMap(input,250,80,300,25);

//Log(s:"Stat Value is ",i:StatValue);
}

script "InitializePlayers" OPEN
{
if(!GetCVar("Player_INIT")) {
    ClearAllPlayerCVars();
    ClearAllPersistentLoadouts();
    //log(s:"Players initialized");
	SetCvar("Player_INIT",true);
}
}


script "StatusVarsGameOver" UNLOADING
{
ACS_NamedExecuteWithResult("CLEAR_ALL_STATUSVARS"); //must be executewithresult for unloading
SetCvar("StartingLevelSet",false);
}

script "StatusVarsPlayerSpec" (int p) DISCONNECT
{
ACS_NamedExecuteWithResult("CLEAR_STATUSVARS",p);
}

script "CLEAR_ALL_STATUSVARS" (void)
{
    ClearAllPlayerCVars();
}

script "CLEAR_STATUSVARS" (int p)
{
    ClearPlayerCVars(p,0);
}


Script "ObjectATKstat" (int level, int BaseATK, int BaseSATK)
{
    if(Level<1){Level = GetCvar(StrParam(s:"PlayerLevel_",i:ACS_NamedExecuteWithResult("core_gettarget",0)-1000));}

int Act_ATK = ActStatCalc(BaseATK,level);
int Act_SATK = ActStatCalc(BaseSATK,level);
int ModStat;
int StatValue;

GiveInventory("Active_PAttack",Act_ATK);
GiveInventory("Active_SAttack",Act_SATK);

ModStat = Act_ATK;
StatValue = PieceWiseStatCalc(ModStat,STATMIN,ATKSTATBASELINE1,ATKSTATBASELINE2,STATMAX,ATKVAL1,ATKVAL2,ATKVAL3,ATKVAL4);

if(StatValue < 10){StatValue = 10;}
if(StatValue>1000){StatValue=1000;}
GiveInventory(StrParam(s:"PATK",i:StatValue),1);

ModStat = Act_SATK;
StatValue = PieceWiseStatCalc(ModStat,STATMIN,ATKSTATBASELINE1,ATKSTATBASELINE2,STATMAX,ATKVAL1,ATKVAL2,ATKVAL3,ATKVAL4);

if(StatValue < 10){StatValue = 10;}
if(StatValue>1000){StatValue=1000;}
GiveInventory(StrParam(s:"SATK",i:StatValue),1);
//log(s:StrParam(s:"SATK",i:StatValue));
}

Script "ObjectDEFstat" (int level, int BaseDEF, int BaseSDEF)
{
    if(Level<1){Level = GetCvar(StrParam(s:"PlayerLevel_",i:ACS_NamedExecuteWithResult("core_gettarget",0)-1000));}

    int Act_DEF = ActStatCalc(BaseDEF,level);
    int Act_SDEF = ActStatCalc(BaseSDEF,level);
    int ModStat;
    int StatValue;

    GiveInventory("Active_PDefense",Act_DEF);
    GiveInventory("Active_SDefense",Act_SDEF);

    ModStat = Act_DEF;
    StatValue = PieceWiseStatCalc(ModStat,STATMIN,DEFSTATBASELINE1,DEFSTATBASELINE2,STATMAX,DEFVAL4,DEFVAL3,DEFVAL2,DEFVAL1);

    if(StatValue < 10){StatValue = 10;}
    if(StatValue>1000){StatValue=1000;}
    GiveInventory(StrParam(s:"PDEF",i:StatValue),1);
    
    ModStat = Act_SDEF;
    StatValue = PieceWiseStatCalc(ModStat,STATMIN,DEFSTATBASELINE1,DEFSTATBASELINE2,STATMAX,DEFVAL4,DEFVAL3,DEFVAL2,DEFVAL1);

    if(StatValue < 10){StatValue = 10;}
    if(StatValue>1000){StatValue=1000;}
    GiveInventory(StrParam(s:"SDEF",i:StatValue),1);    
}


Script "ObjectHPstat" (int level, int BaseHP)
{
    Delay(1);
    if(Level<1){Level = GetCvar(StrParam(s:"PlayerLevel_",i:ACS_NamedExecuteWithResult("core_gettarget",0)-1000));}

    int Act_HP = ActStatCalc(BaseHP,level);
    int ModStat;
    int StatValue;

    GiveInventory("Active_HP",Act_HP);
    StatValue = PieceWiseStatCalc(CheckInventory("Active_HP"),STATMIN,HPSTATBASELINE1,HPSTATBASELINE2,STATMAX,HPVAL1,HPVAL2,HPVAL3,HPVAL4);
    StatValue = HPRound(StatValue);

    if(StatValue < 50){StatValue = 50;}
    SetActorPRoperty(0,APROP_HEALTH,StatValue);
    //log(i:level,s:"  :  ",i:StatValue,s:"   ::    ",i:GetActorPRoperty(0,APROP_HEALTH));
    TakeInventory("SBAR_HP",9999);
    GiveInventory("SBAR_HP",StatValue);
}