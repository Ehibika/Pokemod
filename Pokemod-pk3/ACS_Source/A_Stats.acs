/* -=- Pokemon Stats -=-
 * Scripts that handle all the number crunching involved in generating stats for players on conditions such as level ups, or on
 * Stat alterations.
 * 

*/

#library "A_Stats"
#Import "A_Leveling.acs"
#Import "DB_Player.acs"
#Import "DB_Data.acs"
#Import "Dex_Pokemon.acs"
#import "Dex_Types.acs"
#import "Dex_Leveling.acs"
#Import "Dex_Basestats.acs"
#include "zcommon.acs"


//#region -=- General Constants & Variables
#DEFINE HPVAL1 10
#DEFINE HPVAL2 100
#DEFINE HPVAL3 999

#DEFINE ATKVAL1 1
#DEFINE ATKVAL2 100
#DEFINE ATKVAL3 400

#DEFINE DEFVAL1 1
#DEFINE DEFVAL2 100
#DEFINE DEFVAL3 400

#DEFINE STATMIN 1
#DEFINE STATBASELINE 80
#DEFINE STATMAX 999

#DEFINE SPDVAL1 75
#DEFINE SPDVAL2 125

#DEFINE TestLevel 10


Int SpeedTable[10][2] = {
{32,90},
{34,150},
{36,210},
{38,270},
{40,330},
{42,390},
{44,450},
{46,510},
{48,570},
{50,630},
};
//#endregion

Script "StatInitializer" (Void) 
{
    Int PLevel = GetCVar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
        if(PLevel <= 0)
            {
                PLevel = 1;
                SetCVar(StrParam(s:"PlayerLevel_",i:PlayerNumber()),PLevel);
            }
    GetActiveStats(PLevel);
    ACS_NamedExecuteAlways("ActiveStat_Handler",0);
}

Function Int ActStatCalc (int inputStat, int inputLevel)
{

int a ,b ,c ,d;

a = inputStat*4;
b = a * inputLevel;
c = (b / 10);
d = c + 30;

Return (d);

}

Script "ActiveStatUpdate" (VOID) //for level ups
{
    StatClear(1);
    Int PLevel = GetCVar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
        if(PLevel <= 0)
            {
                PLevel = 1;
                SetCVar(StrParam(s:"PlayerLevel_",i:PlayerNumber()),PLevel);
            }
    GetActiveStats(PLevel);
    ACS_NamedExecuteAlways("ActiveStat_Handler",0);
}

Script "StatUpdate" (VOID)  //for general stat modifications
{
    StatClear(0);
    ACS_NamedExecuteAlways("ActiveStat_Handler",0,1);
}

Script "StatusMenuUpdate" (void) CLIENTSIDE
{
if(PlayerIsBot(PlayerNumber())){Terminate;}

int pln = playernumber();
int PlayerLCV = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
int PlayerECV = GetCvar(StrParam(s:"PlayerEXP_",i:PlayerNumber()));
int PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));
Int LvlRate = StatDEX[PlayerDexNum][9];

SetUserCvar(pln,"YOUR_PATK",CheckInventory("Active_PAttack"));
SetUserCvar(pln,"YOUR_SATK",CheckInventory("Active_SAttack"));
SetUserCvar(pln,"YOUR_PDEF",CheckInventory("Active_PDefense"));
SetUserCvar(pln,"YOUR_SDEF",CheckInventory("Active_SDefense"));
SetUserCvar(pln,"YOUR_SPD",CheckInventory("Active_Speed"));

SetUserCvar(pln,"YOUR_LEVEL",PlayerLCV);
SetUserCvar(pln,"YOUR_EXP",PlayerECV);
SetUserCvar(pln,"YOUR_NEXTEXP",LevelUpTable[LvlRate][PlayerLCV]);
}

Script "StatusMenuClear" (void) CLIENTSIDE
{
if(PlayerIsBot(PlayerNumber())){Terminate;}

int pln = playernumber();
SetUserCvar(pln,"YOUR_PATK",0);
SetUserCvar(pln,"YOUR_SATK",0);
SetUserCvar(pln,"YOUR_PDEF",0);
SetUserCvar(pln,"YOUR_SDEF",0);
SetUserCvar(pln,"YOUR_SPD",0);

SetUserCvar(pln,"YOUR_LEVEL",0);
SetUserCvar(pln,"YOUR_EXP",0);
SetUserCvar(pln,"YOUR_NEXTEXP",0);
}

Function Void StatClear (Int Mode)
{
    str a ,b ,c ,d;
    if(Mode == 1)
    {
    TakeInventory("Active_PAttack",999);
    TakeInventory("Active_SAttack",999);
    TakeInventory("Active_PDefense",999);
    TakeInventory("Active_SDefense",999);
    TakeInventory("Active_HP",999);
    TakeInventory("Active_Speed",999);
    }

    For (int s = 1; s < 1001; s++)
    {
        a = StrParam(s:"PATK",i:s);
        b = StrParam(s:"SATK",i:s);
        c = StrParam(s:"PDEF",i:s);
        d = StrParam(s:"SDEF",i:s);
        if(CheckInventory(a)){TakeInventory(a,9);}
        if(CheckInventory(b)){TakeInventory(b,9);}
        if(CheckInventory(c)){TakeInventory(c,9);}
        if(CheckInventory(d)){TakeInventory(d,9);}

    }
}

Function Void GetActiveStats (Int PLevel)
{
    GiveInventory("Active_PAttack",ActStatCalc(CheckInventory("Base_PAttack"),PLevel));
    GiveInventory("Active_SAttack",ActStatCalc(CheckInventory("Base_SAttack"),PLevel));
    GiveInventory("Active_PDefense",ActStatCalc(CheckInventory("Base_PDefense"),PLevel));
    GiveInventory("Active_SDefense",ActStatCalc(CheckInventory("Base_SDefense"),PLevel));

    GiveInventory("Active_HP",ActStatCalc(CheckInventory("Base_HP"),PLevel));
    GiveInventory("Active_Speed",ActStatCalc(CheckInventory("Base_Speed"),PLevel));
}

/*
Str StatName[5] = {
"PATK",
"SATK",
"PDEF",
"SDEF",
"SPD",
};

Str StatName2[7] = {
    "UP3",
    "UP2",
    "UP1",
    "Null",
    "DOWN1",
    "DOWN2",
    "DOWN3",
};
*/

#DEFINE STATITEMNUM 13

Str StatEffectName[STATITEMNUM] = {
    "Growth",
    "Growl",
    "Tailwhip",
    "ScaryFace",
    "Amnesia",
    "IronDefense",
    "DragonDance",
    "ShellSmash",
    "Yawn",
    "IcyWind",
    "PowerSeed",
    "GuardSeed",
    "HasteSeed",
};

#define PATK_ID 0
#define SATK_ID 1
#define PDEF_ID 2
#define SDEF_ID 3
#define SPD_ID 4

Int StatEffectValue[STATITEMNUM][5] = {
//Patk  Satk    PDef    SDef        Spd
{   1,      1,      0,      0,       0}, 
{   -1,      0,      0,      0,      0}, 
{   0,      0,      -1,      0,      0}, 
{   0,      0,      0,      0,      -2}, 
{   0,      0,      0,      2,      0}, 
{   0,      0,      2,      0,      0}, 
{   1,      0,      0,      0,      1}, 
{   2,      2,      -1,      -1,      2},
{   0,      0,      0,      0,      -1}, 
{   0,      0,      0,      0,      -1}, 
{   1,      1,      0,      0,      0}, 
{   0,      0,      1,      1,      0}, 
{   0,      0,      0,      0,      1}, 
};

Int StatMulti[13] = {
0.25,
0.28,
0.33,
0.40,
0.50,
0.66,
1.0,
1.5,
2.0,
2.5,
3.0,
3.5,
4.0,
};

Function int StatModifier (int ModStat, int StatID)
{

int Output = ModStat;
str Flagname;
int ModLevel = 6;
/*
Here, this checks for any flag items that would serve as modifiers to your active stats
*/
int t;
int v;

for (t = 0; t < STATITEMNUM; t++)
    {
        Flagname = StrParam(s:"STF_",s:StatEffectName[t]);
        if(CheckInventory(Flagname)){ModLevel += StatEffectValue[t][StatID];}
            /*
        for (v = 0; v < 7; v++)
            {
            Flagname = StrParam(s:StatName[StatID],s:StatName2[v],s:"_ID",i:t);
            log(s:Flagname);
                if(CheckInventory(Flagname)){ModLevel += (3-v);}
            }
        v = 0;
        */
    }

    if(ModLevel > 13){ModLevel = 13;}
    if(ModLevel < 0){ModLevel = 0;}


    Output = (Output*StatMulti[ModLevel]) >> 16;
    //Log(i:Output);
Return Output;
}

Script "ChangeBaseStat" (int DexNum)
{
//Changes the base stats inventory and updates the active stats

if(DexNum < 0 || DexNum > MAXDEX){Terminate;}

TakeInventory("Base_PAttack",999);
TakeInventory("Base_SAttack",999);
TakeInventory("Base_PDefense",999);
TakeInventory("Base_SDefense",999);
TakeInventory("Base_HP",999);
TakeInventory("Base_Speed",999);

GiveInventory("Base_PAttack",StatDEX[DexNum][BASE_PATK]);
GiveInventory("Base_SAttack",StatDEX[DexNum][BASE_SATK]);
GiveInventory("Base_PDefense",StatDEX[DexNum][BASE_PDEF]);
GiveInventory("Base_SDefense",StatDEX[DexNum][BASE_SDEF]);
GiveInventory("Base_HP",StatDEX[DexNum][BASE_HP]);
GiveInventory("Base_Speed",StatDEX[DexNum][BASE_SPD]);
ACS_NamedExecuteAlways("ActiveStatUpdate",0);
}


Script "ActiveStat_Handler" (Int Mode)
{
/*
So what goes on here is that, player have Active Stat inventories that act as a decider
for how much of a multiplier to physical/special attack/deense they get, as well as how
their HP and speed are

Edit: Much like Defense, Attack is now calculated Piecewise
*/


//First, let's wait untill the player has all of their active stats, if they take too long, then just terinate the script

int WaitTimer;

Until(CheckInventory("Active_PAttack")
    &&CheckInventory("Active_SAttack")
    &&CheckInventory("Active_PDefense")
    &&CheckInventory("Active_SDefense")
    &&CheckInventory("Active_HP")
    &&CheckInventory("Active_Speed"))
    {Delay(1); WaitTimer++; if(WaitTimer > 35){Terminate;}}

int StatValue;
int ModStat;
int SpeedValue;
Int PlayeLVL = GetPokeValue(POKELEVEL);
/*
======| Attacking Stats | =======
*/


ModStat = StatModifier(CheckInventory("Active_PAttack"),PATK_ID);
if(ModStat >= STATBASELINE)
    {
    StatValue = ValueMap(ModStat,STATMAX,STATBASELINE,ATKVAL3,ATKVAL2);
    }
else
    {
    StatValue = Noneg(ValueMap(ModStat,STATBASELINE,STATMIN,ATKVAL2,ATKVAL1));    
    }
GiveInventory(StrParam(s:"PATK",i:StatValue),1);

ModStat = StatModifier(CheckInventory("Active_SAttack"),SATK_ID);

if(ModStat >= STATBASELINE)
    {
    StatValue = ValueMap(ModStat,STATMAX,STATBASELINE,ATKVAL3,ATKVAL2);
    }
else
    {
    StatValue = Noneg(ValueMap(ModStat,STATBASELINE,STATMIN,ATKVAL2,ATKVAL1));    
    }
GiveInventory(StrParam(s:"SATK",i:StatValue),1);

/*
======| Defending Stats | =======
okay so two things I'm doing differently

first is that the scaling value is reversed, so 250 means the lowest stat value number,
which equates to a stronger damage anti-multiplier (0.25)

Second, Defense is something of a piecewise equation, essentially, how defense is calculated is based on the value, if it is at or
above 80, it's calculated between the ranges of 80 and 250, if it is below 80, then it's adjusted to scale between the 
ranges of 80 and 1.

*/

ModStat = StatModifier(CheckInventory("Active_PDefense"),PDEF_ID);

if(ModStat >= STATBASELINE)
    {
    StatValue = Noneg(ValueMap(ModStat,STATMAX,STATBASELINE,DEFVAL1,DEFVAL2));
    }
else
    {
    StatValue = Noneg(ValueMap(ModStat,STATBASELINE,STATMIN,DEFVAL2,DEFVAL3));    
    }
GiveInventory(StrParam(s:"PDEF",i:StatValue),1);

ModStat = StatModifier(CheckInventory("Active_SDefense"),SDEF_ID);

if(ModStat >= STATBASELINE)
    {
    StatValue = Noneg(ValueMap(ModStat,STATMAX,STATBASELINE,DEFVAL1,DEFVAL2));
    }
    else
    {
    StatValue = Noneg(ValueMap(ModStat,STATBASELINE,STATMIN,DEFVAL2,DEFVAL3));    
    }

GiveInventory(StrParam(s:"SDEF",i:StatValue),1);

/*
======| Health Stats | =======

HP is also piecewise
*/
If (Mode == 0)
    {
    if(CheckInventory("Active_HP") >= STATBASELINE)
        {
        StatValue = ValueMap(CheckInventory("Active_HP"),STATMAX,STATBASELINE,HPVAL3,HPVAL2);
        }
    else
        {
        StatValue = ValueMap(CheckInventory("Active_HP"),STATBASELINE,STATMIN,HPVAL2,HPVAL1);
        }
    SetActorPRoperty(0,APROP_SPAWNHEALTH,StatValue);
    SetActorPRoperty(0,APROP_HEALTH,StatValue);
    TakeInventory("SBAR_HP",999);
    GiveInventory("SBAR_HP",StatValue);
    }

    TakeInventory("SBAR_LVL",999);
    if(PlayeLVL <= 10){GiveInventory("SBAR_LVL",PlayeLVL);}
    Else{GiveInventory("SBAR_LVL",10);}
/*
======| Speed Stats | =======
*/

ModStat = StatModifier(CheckInventory("Active_Speed"),SPD_ID);
//StatValue = ValueMap(ModStat,STATMAX,STATMIN,SPDVAL2,SPDVAL1);
SpeedValue = ValueMap(ModStat,SpeedTable[PlayeLVL-1][1],SpeedTable[PlayeLVL-1][0],SPDVAL2,SPDVAL1);
if(SpeedValue < 1){SpeedValue = 1;}
//log(i:SpeedValue,s:"  ",f:SpeedValue*0.01);
SetActorPRoperty(0,APROP_SPEED,SpeedValue*0.01);

ACS_NamedExecuteAlways("StatusMenuUpdate",0);
}


Script "StatValueRamp" (int StatID, Int MinValue, Int MaxValue)
{
int StatValue;
int ModStat;

switch(StatID)
    {
        default: ModStat = StatModifier(CheckInventory("Active_PAttack"),0); break;
        Case 1: ModStat = StatModifier(CheckInventory("Active_SAttack"),1); break;
        Case 2: ModStat = StatModifier(CheckInventory("Active_PDefense"),2); break;
        Case 3: ModStat = StatModifier(CheckInventory("Active_SDefense"),3); break;
        Case 4: ModStat = StatModifier(CheckInventory("Active_Speed"),4); break;
        Case 5: ModStat = StatModifier(CheckInventory("Active_HP"),5); break;
    }

    StatValue = ValueMap(ModStat,999,1,MaxValue,MinValue);
    //Log(i:StatValue);
    SetResultValue(StatValue);
}


Script "StatValueRamp2" (int StatID, Int MinValue, Int MaxValue)
{ // - For missile actors to grab stats from their owner -


int StatValue;
int ModStat;
int FiringPlayer= ACS_ExecuteWithResult(257, 0);
switch(StatID)
    {
        default: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_PAttack"),0); break;
        Case 1: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_SAttack"),1); break;
        Case 2: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_PDefense"),2); break;
        Case 3: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_SDefense"),3); break;
        Case 4: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_Speed"),4); break;
        Case 5: ModStat = StatModifier(CheckActorInventory(FiringPlayer,"Active_HP"),5); break;
    }

    StatValue = ValueMap(ModStat,999,1,MaxValue,MinValue);
    //Log(i:StatValue);
    SetResultValue(StatValue);
}


Script "StatTest" (int input)
{
int StatValue;

StatValue = ValueMap(input,250,80,300,25);

//Log(s:"Stat Value is ",i:StatValue);
}

Function Void ClearPlayerCVars(int PlayerNum, int NewLevel)
{
    SetCvar(StrParam(s:"PlayerLevel_",i:PlayerNum),NewLevel);
    SetCvar(StrParam(s:"PlayerEXP_",i:PlayerNum),0);
    SetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNum),-1);
    //SetCvar(StrParam(s:"Player",i:PlayerNum,s:"_Cash"),0);
    SetCvarString(StrParam(s:"Player",i:PlayerNum,s:"_INV"),"0000");

    ACS_NamedExecuteAlways("StatusMenuClear",0);
}

Function Void ClearAllPlayerCVars(void)
{
    For (int i; i < 37; i++) {ClearPlayerCVars(i,0);}
}

script "StatusVarsGameOver" UNLOADING
{
ACS_NamedExecuteWithResult("CLEAR_ALL_STATUSVARS"); //must be executewithresult for unloading
SetCvar("StartingLevelSet",false);
}

script "StatusVarsPlayerSpec" (int p) DISCONNECT
{
ACS_NamedExecuteWithResult("CLEAR_STATUSVARS",p);
}

script "CLEAR_ALL_STATUSVARS" (void)
{
    ClearAllPlayerCVars();
}

script "CLEAR_STATUSVARS" (int p)
{
    ClearPlayerCVars(p,0);
}


Function int GetStatMod (int TID, int StatID)
{
Int Output;
str Flagname;

    for (int t = 0; t < STATITEMNUM; t++)
    {
        Flagname = StrParam(s:"STF_",s:StatEffectName[t]);
        if(TID>0){if(CheckActorInventory(TID,Flagname)){Output += StatEffectValue[t][StatID];}}
        Else{if(CheckInventory(Flagname)){Output += StatEffectValue[t][StatID];}}
    }
    //if(Output != 0){log(i:Output);}
Return Output;
}
