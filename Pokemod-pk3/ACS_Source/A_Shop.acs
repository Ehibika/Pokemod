#library "A_Shop"
#include "zcommon.acs"
#import "DB_3PCam.acs"
#import "Dex_Pokemon.acs"
#import "Dex_Types.acs"
#import "Dex_Leveling.acs"
#import "Dex_Basestats.acs"
#import "Dex_Moves.acs"
#import "Dex_TM.acs"
#import "DB_Data.acs"
#import "DB_Shop.acs"


script "ShopEvents" (int type, int arg1, int arg2) EVENT
{

Switch(type)
    {
    Case 5: Delay(2); LoadAllPlayerInventory(); break;
    Case 6: SaveAllPlayerInventory(); break;
    }

}

script "ItemSpawnTID" (void)
{
int NewTID = ITEMSPAWNERTID+Random(0,999);

until(!IsTIDUsed(NewTID)){NewTID = ITEMSPAWNERTID+Random(0,999);}
Thing_ChangeTID(0,NewTID);
}

script "ItemSpawnerCheck" (void)
{
int Output;

if(!IsTIDUsed(ActivatorTID()+1000)){Output = 1;}

setResultValue(Output);
}

script "ItemRespawnCheck" (void)
{
int Output = 1;

if(GetCvar("lastmanstanding")==1||GetCvar("teamlms")==1)
{if(GetGameModeState()!=GAMESTATE_INPROGRESS){Output = 0;}}
if(GetCvar("Game_Arena")==1){Output = 0;}

setResultValue(Output);
}

//#region -=- Shop Display -=-
#region -=- Shop Display -=-
Script "DisplayBPAndSlots" (Void) CLIENTSIDE // OPEN
{
int conP = ConsolePlayerNumber();
while(true) {
	if(GetCvar("sv_EnableShop") == 1 || GetCvar("sv_EnableTM") == 1){DisplayBPAndSlotsFunc(conP);}
	delay(1);
}
}

function int getConPlayerView(int conP)
{
	int camera = CheckPlayerCamera(conP);
	if(camera>999&&camera<(1000+SHOP_MAX_PLAYERS)) return (camera-1000);
	return conP;
}

#DEFINE MSGID 1000

//#DEFINE XHUDSIZE 320
//#DEFINE YHUDSIZE 240
//#DEFINE XOFFSET 20.0
//#DEFINE YOFFSET 180.0

//#DEFINE XHUDSIZE 640
//#DEFINE YHUDSIZE 480

#DEFINE XHUDSIZE 480
#DEFINE YHUDSIZE 360
#DEFINE XOFFSET 24.0
#DEFINE YOFFSET 240.0

function void DisplayBPAndSlotsFunc(int conP) {
	SetHudSize(XHUDSIZE, YHUDSIZE, 0);
	SetFont("CONFONT");
    int camP = getConPlayerView(conP);

    //LevelUpTable[LvlRate][PlayerLCV]
	//HudMessage(s:"BP: ", i:GetPlayerBP(camP); HUDMSG_PLAIN, 77, CR_WHITE, 0.5, 0.75, 0.1);
	HudMessage(s:"BP: ", i:GetPlayerBP(camP); HUDMSG_PLAIN, MSGID, CR_WHITE, XOFFSET+0.1, YOFFSET+0.1, 0.1);
	HudMessage(s:"Exp: ", i:GetNowEXP(camP),s:"/",i:GetNextEXP(camP); HUDMSG_PLAIN, MSGID+1, CR_WHITE, XOFFSET+0.1, YOFFSET+0.2, 0.1);
}

function int GetPlayerBP(int p)
{
return GetCvar(StrParam(s:"PLAYER",i:p,s:"_BP"));
}

function int GetSlotCount(int p)
{
int slotCount = 0;
for(int i = 0; i<SHOP_MAX_SLOTS; i++) if(GetCvar(StrParam(s:"PLAYER",i:p,s:"_SLOT",i:i))!=-1) slotCount++;
return slotCount;
}

function int GetNowEXP(int p)
{
int PlayerEXP = GetCvar(StrParam(s:"PlayerEXP_",i:p));
return PlayerEXP;
}

function int GetNextEXP(int p)
{
int Output;
int PlayerDexNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:p));
int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:p));
Int LvlRate = StatDEX[PlayerDexNum][9];
if(PlayerLVL < PKMN_MaxLVL){Output = LevelUpTable[LvlRate][PlayerLVL];}
return Output;
}

#endregion
//#endregion

//#region  -=- Shop Functions
#region  -=- Shop Functions
script "InitializeBP" OPEN
{
if(!GetCVar("BP_INIT")) {
	ResetAllBP();
	SetCvar("BP_INIT",true);
}
}

script "RESET_ALL_BP" (void)
{
ResetAllBP();
}

script "RESET_PLAYER_BP" (int p)
{
ResetPlayerBP(p);
}

function void ResetAllBP(void)
{
for(int i = 0; i < SHOP_MAX_PLAYERS; i++) ResetPlayerBP(i);
}

function void ResetPlayerBP(int p)
{
SetCvar(StrParam(s:"PLAYER",i:p,s:"_BP"),GetCvar("PKMN_StartingBP"));
UpdateSbar(p);
}

script "BPCheck" (int cost)
{
SetResultValue(GetCvar(StrParam(s:"PLAYER",i:PlayerNumber(),s:"_BP"))>=cost);
}

script "BPPay" (int cost)
{
AdjustCvar(StrParam(s:"PLAYER",i:PlayerNumber(),s:"_BP"),-cost);
UpdateSbar(PlayerNumber());
}

function void AdjustCvar(str cvar, int amount)
{
SetCvar(cvar,GetCvar(cvar)+amount);
}

function void UpdateSbar(int Player)
{
int Current = GetCvar(StrParam(s:"PLAYER",i:Player,s:"_BP"));
TakeActorInventory(Player+1000,"Sbar_BP",99999);
GiveActorInventory(Player+1000,"Sbar_BP",Current);
}

script "GivePlayerBP" (int p, int wage)
{
AdjustCvar(StrParam(s:"PLAYER",i:p,s:"_BP"),wage);
UpdateSbar(PlayerNumber());
}

script "BPGameOver" UNLOADING
{
ACS_NamedExecuteWithResult("RESET_ALL_BP");
}

script "BPPlayerSpec" (int p) DISCONNECT
{
ACS_NamedExecuteWithResult("RESET_PLAYER_BP",p);
}

Script "BPSBAR_ENTER" ENTER
{
Delay(2);
UpdateSbar(PlayerNumber());
}

Script "BPSBAR_RESPAWN" RESPAWN
{
Delay(2);
UpdateSbar(PlayerNumber());
}

#endregion
//#endregion

//#region -=- Gameplay BP Functions -=-
#region -=- Gameplay BP Functions -=-

script "PlayerJoin_E" ENTER
{
delay(1);
int p = PlayerNumber();
thePlayerPlayed[p] = true;
int t = GetPlayerInfo(p,PLAYERINFO_TEAM);
if(t>-1&&t<MAX_TEAMS) {
	thePlayerTeam[p] = t;
	theTeamPlayed[t] = true;
}
}

script "MatchStart" OPEN
{
delay(1);
if(GetCvar("teamlms")) ACS_NamedExecuteAlways("MatchMonitorTeam",0);
else if(GetCvar("lastmanstanding")) ACS_NamedExecuteAlways("MatchMonitorSolo",0);
}

script "MatchMonitorTeam" (void)
{
while(GetGameModeState()!=GAMESTATE_INRESULTSEQUENCE) delay(1);
int v = FindVictorTeam(GetCvar("sv_maxteams"));
if(v>-1) TeamFunc(v,SHOP_MAX_PLAYERS,MAX_TEAMS);
}

script "MatchMonitorSolo" (void)
{
while(GetGameModeState()!=GAMESTATE_INRESULTSEQUENCE) delay(1);
int theMaxPlayers = SHOP_MAX_PLAYERS;
int v = FindVictor(theMaxPlayers);
if(v>-1) SoloFunc(v,theMaxPlayers);
}

function int FindVictorTeam (int theMaxTeams)  {
for(int i = 0; i<theMaxTeams; i++) if(GetTeamProperty(i,TPROP_NumLivePlayers)>0) return i;
return -1;
}

function void TeamFunc(int v, int theMaxPlayers, int theMaxTeams)  {
for(int i = 0; i<theMaxPlayers; i++) {
	if(thePlayerPlayed[i]) {
		if(thePlayerTeam[i]==v) WinnerFunc(i);
		else LoserFunc(i);
	}
}
}

function int FindVictor (int theMaxPlayers)  {
for(int i = 0; i<theMaxPlayers; i++) if(thePlayerPlayed[i]&&GetActorProperty(1000+i,APROP_HEALTH)>0) return i;
return -1;
}

function void SoloFunc(int v, int theMaxPlayers)  {
int i;
for(i = 0; i<v; i++) if(thePlayerPlayed[i]) LoserFunc(i);
WinnerFunc(v);
for(i=v+1; i<theMaxPlayers; i++) if(thePlayerPlayed[i]) LoserFunc(i);
}

function void LoserFunc(int p)  {
    //PrintBold(s:"loser ",i:p);
    
    /*
    int MyTeam = GetPlayerInfo(p, PLAYERINFO_TEAM);
    int MyTeamWins = GetTeamProperty(MyTeam,TPROP_WinCount);
    int LoserBonus;
    int LeadTeamWins;
    int WinDiff;
    for(int i = 0; i<MAX_TEAMS; i++) 
        {
        if(GetTeamProperty(i,TPROP_WinCount)>LeadTeamWins) 
            {
                LeadTeamWins = GetTeamProperty(i,TPROP_WinCount);
            }
        }
        WinDiff = LeadTeamWins-MyTeamWins;
        if(WinDiff>0)
        {
            LoserBonus = 15*WinDiff;
            ACS_NamedExecuteWithResult("GivePlayerBP",p,LoserBonus);
        }
    */
    ACS_NamedExecuteWithResult("GivePlayerBP",p,GetCVar("PKMN_BPLoseAward"));
	ParticipantFunc(p);
}

function void WinnerFunc(int p)  {
    //PrintBold(s:"winner ",i:p);
    
    ACS_NamedExecuteWithResult("GivePlayerBP",p,GetCVar("PKMN_BPWinAward"));
	ParticipantFunc(p);
}

function void ParticipantFunc(int p)  {
	ACS_NamedExecuteWithResult("GivePlayerBP",p,GetCVar("PKMN_BPAward"));
	//if(GetActorProperty(1000+p,APROP_HEALTH)<1) ACS_NamedExecuteWithResult("CLEAR_PERSISTENT_LOADOUT",p);
}

Script "BPPickup" (int Payout)
{

int TotalGames;
for(int i = 0; i<MAX_TEAMS; i++) 
{
        TotalGames += GetTeamProperty(i,TPROP_WinCount);
}

//int BaseMoney = 1;
//int R1 = 1 + TotalGames; //random range 1
//int R2 = 3 + TotalGames;; //random range 2
//int Payout = BaseMoney*random(R1,R2);
//int Payout = BaseMoney;//+(5*TotalGames);

ACS_NamedExecuteAlways("GivePlayerBP",0,playernumber(),Payout);
ACS_NamedExecuteAlways("AddToBPAward",0,Payout);
}

#endregion 
//#endregion 

//#region -=- gameplay inventory functions -=-
#region -=- gameplay inventory functions -=-

Script "MoneyCount" (void)
{

    SetResultValue(ThingCountName("PokeMoney",0));  
}

Script "MoneySpawnRate" (void)
{
// -=- BP gained from pickup is based on total number of games, not counting draws -=-

int TotalGames;
int Output;
for(int i = 0; i<MAX_TEAMS; i++) 
{
        TotalGames += GetTeamProperty(i,TPROP_WinCount);
}

Output = 127 - 35*TotalGames;
if(Output<0){Output = 0;}
SetResultValue(Output);
}

Script "ItemSpew" DEATH
{
    if(GetCvar("lastmanstanding")==0&&GetCvar("teamlms")==0){ACS_NamedExecuteAlways("Write_Inventory",0); terminate;}
    if(GetGameModeState()!=GAMESTATE_INPROGRESS){terminate;}
    Int InvCount;

    for (int i=0; i<MAX_SHOP; i++) 
    {
    InvCount = CheckInventory(ShopItemList[i][0]);
     while(InvCount)
        {
            SpawnProjectile (0,ShopItemList[i][0], random(0,360), random(10,60), random(10,60), 0.5, 0);
            TakeInventory(ShopItemList[i][0],1);
            InvCount = CheckInventory(ShopItemList[i][0]);
            //DropInventory(0,ShopItemList[i][0]); 


        }
        SetCvarString(StrParam(s:"Player",i:PlayerNumber(),s:"_INV"),"0000");
    }

}

Script "ItemPurge" (int PurgeCount)
{
    if(GetGameModeState()!=GAMESTATE_INPROGRESS){terminate;}
    Int InvCount;
    Int PurgeReturn;

    for (int i=0; i<MAX_SHOP; i++) 
    {
        InvCount = CheckInventory(ShopItemList[i][0]);
        if(InvCount)
        {     
            TakeInventory(ShopItemList[i][0],PurgeCount);
            PurgeReturn = 1;        
        }
    }
    //ACS_NamedExecuteAlways("Write_Inventory",0,1);

    SetResultValue(PurgeReturn);
}

#endregion
//#endregion

//#region -=- Shop Game actions -=-
#region -=- Shop Game actions -=-

script "SHOP_SETUP" (void)
{
while(ShopDelay()==1) delay(1);
if(PlayerHealth()>0) GiveInventory("Shop",1);
}

Function int ShopDelay (void)
{
int output;
if(GetCvar("lastmanstanding")==1||GetCvar("teamlms")==1)
    {if(GetGameModeState()==GAMESTATE_INPROGRESS&&PlayerHealth()>0){Output = 1;}}
return output;
}

script "ShopFailSound" (void)
{
LocalAmbientSound("weapon/noammo",128);
}

script "ShopSuccessSound" (void)
{
LocalAmbientSound("weapon/weaponup",128);
}

Script "ShopOpenMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ){Log(l:"SHOP_OPEN");}
}

Script "ShopBuyMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUY");}
}

Script "ShopBuyFailMoneyMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_MONEY");}
}

Script "ShopSellFailQuantityMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_SELLFAIL_QUANTITY");}
}

Script "ShopBuyFailPossessMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_POSSESS");}
}

Script "ShopBuyFailSpaceMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_SPACE");}
}

Script "ShopBuyFailLVLMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_LVL");}
}

Script "ShopBuyFailTMMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_TM");}
}

Script "ShopBuyFailStatusMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_STATUS");}
}

#endregion
//#endregion

//#region -=- Shop item Scripts -=-
#region -=- Shop item Scripts -=-

script "ItemUseCheck" (void)
{
int Output = 1;

// -=- General Checks -=-
if(CheckInventory("SleepMark")
    ||CheckInventory("FreezeMark")
    ||CheckInventory("ConShotTimer")
    ||CheckInventory("EmbargoFlag")){Output = 0; }

    if(GetCvar("lastmanstanding")==1||GetCvar("teamlms")==1)
    {if(GetGameModeState()!=GAMESTATE_INPROGRESS){Output = 0; }}

    if (GetCvar("Game_Arena")==1){if(GetCvar("Game_GameState")==0){output = 0;}}
setresultvalue(Output);
}
#endregion
//#endregion

//#region -=- Inventory Data scripts
#region -=- Inventory Data scripts

    /* -=-=-=-=-=-=-=-=-=-= 
    * Okay, time for some advance stuff again. so my plan is to save player inventories withing a single string.
    * 
    * The idea is this: each item is represented by a 4 character hex value, like A105. the first two characters
    * are the item ID, and the second two characters are the quantity
    * 
    * -=-=-=-=-=-=-=-=-=-=-=
    */

Script "Write_Inventory" (int WriteDelay)
{
Delay(WriteDelay);
Str PlayerInv = StrParam(s:"Player",i:PlayerNumber(),s:"_INV");
str InvStr = "";
str InvStrCache = "";

Int InvCount;
str ItemID; //hex value of item ID
str ItemQ; //hex value of item quantity

int ItemCount; //number of different items found
    /* -=-=-=-=-=-=-=-=-=-= 
    * So what we are going to do here is go down the ShopItemList and see
    * if you have that item, if you do. then we count the quantity, and create
    * the inventory block. and then append it to the end of INVSTR
    * -=-=-=-=-=-=-=-=-=-=-=
    */

   for (int i=0; i<MAX_SHOP; i++) 
   {
    InvCount = CheckInventory(ShopItemList[i][0]);
    if(InvCount)
        {
            if(i<16){ItemID = StrParam(s:"0",x:i);}
            else{ItemID = StrParam(x:i);}

            if(InvCount<16){ItemQ = StrParam(s:"0",x:InvCount);}
            else{ItemQ = StrParam(x:InvCount);}  
            //log(s:ItemID,s:ItemQ);

            if(ItemCount>0){InvStrCache = StrParam(s:InvStr,s:ItemID,s:ItemQ);}
            else{InvStrCache = StrParam(s:ItemID,s:ItemQ);}
            InvStr = InvStrCache;
            ItemCount++;
        }
   }

   if(ItemCount){SetCvarString(PlayerInv,InvStr);}
    else{SetCvarString(PlayerInv,"0000");}
}

Script "Read_Inventory" (void)
{
    //log(s:"Begin Inventory read");

     /* -=-=-=-=-=-=-=-=-=-= 
    * now we're going to take the inventory string, read it block by block,
    * and hand out the inventory items.
    * 
    * Each block is a 4 character long hex value. so we will read the string that way.
    * -=-=-=-=-=-=-=-=-=-=-=
    */

Str PlayerInv = StrParam(s:"Player",i:PlayerNumber(),s:"_INV");
Str PlayerInvStr = GetCvarString(PlayerInv);
int BStart = 0; //Brefresh.
int BLen = 4;
int BlockCount = strLen(PlayerInvStr)/4;
str HexBlock;
int ItemID;
int ItemQ;

//log(s:"Total inventory blocks : ",i:BlockCount);

    for (int i=0; i<BlockCount; i++) 
    {
        HexBlock = StrMid(PlayerInvStr,BStart,BLen);
        ItemID = HextoInt(StrLeft(HexBlock,2));
        ItemQ = HextoInt(StrRight(HexBlock,2));
        if(ItemQ>0)
            {
            //log(s:"get ",i:ItemQ,s:" ",s:ShopItemList[ItemID]);
            GiveInventory(ShopItemList[ItemID][0],ItemQ);
            }
        

        BStart += 4;
    }

}


function void LoadAllPlayerInventory(void)
{
for(int i = 0; i < SHOP_MAX_PLAYERS; i++) GiveActorInventory(i+1000,"LoadShopInventory",1);
}

function void SaveAllPlayerInventory(void)
{
for(int i = 0; i < SHOP_MAX_PLAYERS; i++) GiveActorInventory(i+1000,"SaveShopInventory",1);
}

str HexArray[16] = {
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    };
    
    Function int HextoInt (str HexVal)
    {
    int len = StrLen(HexVal);
    int base = 1;
    int output;
    int HexDigit;
    for (int i=len-1; i>=0; i--) 
        { 
            HexDigit = HexCharToInt(strparam(c:GetChar(HexVal,i)));
            output += HexDigit*base;
            base = base*16;
            //log(i:Hex);
            //log(i:output);
        }
    
    return output;
    }
    
    
    Function int HexCharToInt (str HexChar)
    {
    int output;
    for(Int i;i<16;i++)
        {
        if(HexArray[i] == HexChar){output = i; break;}    
        }
    return output;
    }
    
    
    Script "HexTest" (int A)
    
    {
    log(x:A);
    log(i:HextoInt("A"));
    log(i:HextoInt("AB"));
    log(i:HextoInt("0A02"));
    }

#endregion
//#endregion

