#library "A_Shop"
#include "zcommon.acs"
#import "DB_Shop.acs"
#import "A_3pcam.acs"

script "ShopEvents" (int type, int arg1, int arg2) EVENT
{

Switch(type)
    {
    Case 5: Delay(2); LoadAllPlayerInventory(); break;
    Case 6: SaveAllPlayerInventory(); break;
    }

}

//#region -=- Shop Display -=-
#region -=- Shop Display -=-

Script "DisplayCashAndSlots" OPEN CLIENTSIDE
{
int conP = ConsolePlayerNumber();
while(true) {
	DisplayCashAndSlotsFunc(conP);
	delay(1);
}
}

#endregion
//#endregion

//#region  -=- Shop Functions
#region  -=- Shop Functions

script "InitializeCash" OPEN
{
if(!GetCVar("CASH_INIT")) {
	ResetAllCash();
	SetCvar("CASH_INIT",true);
}
}

script "RESET_ALL_CASH" (void)
{
ResetAllCash();
}

script "RESET_PLAYER_CASH" (int p)
{
ResetPlayerCash(p);
}

script "CashCheck" (int cost)
{
SetResultValue(GetCvar(StrParam(s:"PLAYER",i:PlayerNumber(),s:"_CASH"))>=cost);
}

script "CashPay" (int cost)
{
AdjustCvar(StrParam(s:"PLAYER",i:PlayerNumber(),s:"_CASH"),-cost);
}

script "GivePlayerCash" (int p, int wage)
{
AdjustCvar(StrParam(s:"PLAYER",i:p,s:"_CASH"),wage);
}

script "CashGameOver" UNLOADING
{
ACS_NamedExecuteWithResult("RESET_ALL_CASH");
}

script "CashPlayerSpec" (int p) DISCONNECT
{
ACS_NamedExecuteWithResult("RESET_PLAYER_CASH",p);
}

#endregion
//#endregion

//#region -=- Gameplay Cash Functions -=-
#region -=- Gameplay Cash Functions -=-

script "PlayerJoin_E" ENTER
{
delay(1);
int p = PlayerNumber();
thePlayerPlayed[p] = true;
int t = GetPlayerInfo(p,PLAYERINFO_TEAM);
if(t>-1&&t<MAX_TEAMS) {
	thePlayerTeam[p] = t;
	theTeamPlayed[t] = true;
}
}

script "MatchStart" OPEN
{
delay(1);
if(GetCvar("teamlms")) ACS_NamedExecuteAlways("MatchMonitorTeam",0);
else if(GetCvar("lastmanstanding")) ACS_NamedExecuteAlways("MatchMonitorSolo",0);
}

script "MatchMonitorTeam" (void)
{
while(GetGameModeState()!=GAMESTATE_INRESULTSEQUENCE) delay(1);
int v = FindVictorTeam(GetCvar("sv_maxteams"));
if(v>-1) TeamFunc(v,MAX_PLAYERS,MAX_TEAMS);
}

script "MatchMonitorSolo" (void)
{
while(GetGameModeState()!=GAMESTATE_INRESULTSEQUENCE) delay(1);
int theMaxPlayers = MAX_PLAYERS;
int v = FindVictor(theMaxPlayers);
if(v>-1) SoloFunc(v,theMaxPlayers);
}

Script "CashPickup" (void)
{
// -=- cash gained from pickup is based on total number of games, not counting draws -=-

int TotalGames;
for(int i = 0; i<MAX_TEAMS; i++) 
{
        TotalGames += GetTeamProperty(i,TPROP_WinCount);
}

int BaseMoney = 5;
//int R1 = 1 + TotalGames; //random range 1
//int R2 = 3 + TotalGames;; //random range 2
//int Payout = BaseMoney*random(R1,R2);
int Payout = BaseMoney+(5*TotalGames);

ACS_NamedExecuteAlways("GivePlayerCash",0,playernumber(),Payout);
}

#endregion 
//#endregion 

//#region -=- gameplay inventory functions -=-
#region -=- gameplay inventory functions -=-

Script "MoneySpawnRate" (void)
{
// -=- cash gained from pickup is based on total number of games, not counting draws -=-

int TotalGames;
int Output;
for(int i = 0; i<MAX_TEAMS; i++) 
{
        TotalGames += GetTeamProperty(i,TPROP_WinCount);
}

Output = 127 - 35*TotalGames;
if(Output<0){Output = 0;}
SetResultValue(Output);
}

Script "ItemSpew" DEATH
{
    if(GetGameModeState()!=GAMESTATE_INPROGRESS)
    Int InvCount;

    for (int i=0; i<MAX_SHOP; i++) 
    {
    InvCount = CheckInventory(ShopItemList[i]);
     while(InvCount)
        {
            SpawnProjectile (0,ShopItemList[i], random(0,360), random(10,60), random(10,60), 0.5, 0);
            TakeInventory(ShopItemList[i],1);
            InvCount = CheckInventory(ShopItemList[i]);
            //DropInventory(0,ShopItemList[i]); 


        }
        SetCvarString(StrParam(s:"Player",i:PlayerNumber(),s:"_INV"),"0000");
    }

}

#endregion
//#endregion

//#region -=- Shop Game actions -=-
#region -=- Shop Game actions -=-

script "SHOP_SETUP" (void)
{
while(GetGameModeState()==GAMESTATE_INPROGRESS&&PlayerHealth()>0) delay(1);
if(PlayerHealth()>0) GiveInventory("Shop",1);
}

script "ShopFailSound" (void)
{
LocalAmbientSound("weapon/noammo",128);
}

script "ShopSuccessSound" (void)
{
LocalAmbientSound("weapon/weaponup",128);
}

Script "ShopOpenMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ){Log(l:"SHOP_OPEN");}
}

Script "ShopBuyMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUY");}
}

Script "ShopBuyFailMoneyMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_MONEY");}
}

Script "ShopBuyFailPossessMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_POSSESS");}
}

Script "ShopBuyFailSpaceMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_SPACE");}
}

Script "ShopBuyFailLVLMsg" (void) CLIENTSIDE
{
if(ActivatorTID()==CheckPlayerCamera(ConsolePlayerNumber())
    || (ActivatorTID()-1000+C_TID)==CheckPlayerCamera(ConsolePlayerNumber()) ) {Log(l:"SHOP_BUYFAIL_LVL");}
}

#endregion
//#endregion

//#region -=- Shop item Scripts -=-
#region -=- Shop item Scripts -=-

script "ItemUseCheck" (void)
{
int Output = 1;

// -=- General Checks -=-
if(CheckInventory("SleepMark")
    ||CheckInventory("EmbargoFlag")){Output = 0;}

if(GetGameModeState()!=GAMESTATE_INPROGRESS){Output = 0;}

setresultvalue(Output);
}
#endregion
//#endregion

//#region -=- Inventory Data scripts
#region -=- Inventory Data scripts

    /* -=-=-=-=-=-=-=-=-=-= 
    * Okay, time for some advance stuff again. so my plan is to save player inventories withing a single string.
    * 
    * The idea is this: each item is represented by a 4 character hex value, like A105. the first two characters
    * are the item ID, and the second two characters are the quantity
    * 
    * -=-=-=-=-=-=-=-=-=-=-=
    */

Script "Write_Inventory" (int WriteDelay)
{
Delay(WriteDelay);
Str PlayerInv = StrParam(s:"Player",i:PlayerNumber(),s:"_INV");
str InvStr = "";
str InvStrCache = "";

Int InvCount;
str ItemID; //hex value of item ID
str ItemQ; //hex value of item quantity

int ItemCount; //number of different items found
    /* -=-=-=-=-=-=-=-=-=-= 
    * So what we are going to do here is go down the ShopItemList and see
    * if you have that item, if you do. then we count the quantity, and create
    * the inventory block. and then append it to the end of INVSTR
    * -=-=-=-=-=-=-=-=-=-=-=
    */

   for (int i=0; i<MAX_SHOP; i++) 
   {
    InvCount = CheckInventory(ShopItemList[i]);
    if(InvCount)
        {
            if(i<15){ItemID = StrParam(s:"0",x:i);}
            else{ItemID = StrParam(x:i);}

            if(InvCount<15){ItemQ = StrParam(s:"0",x:InvCount);}
            else{ItemQ = StrParam(x:InvCount);}  
            //log(s:ItemID,s:ItemQ);

            if(ItemCount>0){InvStrCache = StrParam(s:InvStr,s:ItemID,s:ItemQ);}
            else{InvStrCache = StrParam(s:ItemID,s:ItemQ);}
            InvStr = InvStrCache;
            ItemCount++;
        }
   }

   if(ItemCount){SetCvarString(PlayerInv,InvStr);}
    else{SetCvarString(PlayerInv,"0000");}
}

Script "Read_Inventory" (void)
{
    //log(s:"Begin Inventory read");

     /* -=-=-=-=-=-=-=-=-=-= 
    * now we're going to take the inventory string, read it block by block,
    * and hand out the inventory items.
    * 
    * Each block is a 4 character long hex value. so we will read the string that way.
    * -=-=-=-=-=-=-=-=-=-=-=
    */

Str PlayerInv = StrParam(s:"Player",i:PlayerNumber(),s:"_INV");
Str PlayerInvStr = GetCvarString(PlayerInv);
int BStart = 0; //Brefresh.
int BLen = 4;
int BlockCount = strLen(PlayerInvStr)/4;
str HexBlock;
int ItemID;
int ItemQ;

//log(s:"Total inventory blocks : ",i:BlockCount);

    for (int i=0; i<BlockCount; i++) 
    {
        HexBlock = StrMid(PlayerInvStr,BStart,BLen);
        ItemID = HextoInt(StrLeft(HexBlock,2));
        ItemQ = HextoInt(StrRight(HexBlock,2));
        if(ItemQ>0)
            {
            //log(s:"get ",i:ItemQ,s:" ",s:ShopItemList[ItemID]);
            GiveInventory(ShopItemList[ItemID],ItemQ);
            }
        

        BStart += 4;
    }

}

#endregion
//#endregion

