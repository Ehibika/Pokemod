/* -=- ACS Menus -=-
 * Code for ACS menus that handle functions such as move learning and move adjustments.
 *

*/

#library "A_Menus"
#include "zcommon.acs"
#Import "WEPACS.acs"
#Import "Dex_Pokemon.acs"
#Import "Dex_Moves.acs"
#import "Dex_Movesets.acs"
#Import "Dex_Evo.acs."
#Import "Dex_Skin.acs."
#Import "Dex_TM.acs."
#Import "DB_Data.acs"
#Import "DB_Shop.acs"
#Import "DB_HeldItems.acs"
#Import "A_HeldItems.acs"
#Import "DB_Leveling.acs"
#import "DB_Action.acs"

#define MNL 8.0 //menu line spacing
#define MenuXOrigin 120.1
#define MenuYOrigin 80.1
int PastMenuSize;


Function Int GetUpDownInputs (int B1, int B2, int Type)
{

	if(!(B1 & BT_FORWARD && B1 & BT_BACK))
	{	
		if(ButtonCheck(B1, B2, BT_FORWARD) == Type)
			{
				return -1;
			}

		else if(ButtonCheck(B1, B2, BT_BACK) == Type)
			{
				return 1;
			}
		else{return 0;}
	}
return 0;
}

Function Int GetLeftRightInputs (int B1, int B2, int Type)
{

	if(!(B1 & BT_MOVELEFT && B1 & BT_MOVERIGHT))
	{	
		if(ButtonCheck(B1, B2, BT_MOVELEFT) == Type)
			{
				return -1;
			}

		else if(ButtonCheck(B1, B2, BT_MOVERIGHT) == Type)
			{
				return 1;
			}
		else{return 0;}
	}
return 0;
}

Function Int GetChoiceInputs (int B1, int B2, int Type)
{
	int T1,T2;

	if(Type == 4){T1 = 1; T2 = 2;}
	else if(Type == 5){T1 = 2; T2 = 1;}

	if(!(B1 & BT_ATTACK && B1 & BT_ALTATTACK))
	{	
		if(ButtonCheck(B1, B2, BT_ALTATTACK) == T2)
			{
				return -1;
			}

		else if(ButtonCheck(B1, B2, BT_ATTACK) == T1)
			{
				return 1;
			}
		else{return 0;}
	}
return 0;
}


//#region -=- Item Shop
#region -=- Item Shop

Script "PromptItemShop" (void)
{
//==================[+]
// - Pre Start Up -
//==================[+]
if(ShopTime() == 0){print(s:"Cannot open the Item shop here"); Terminate;}
if(GetCvar("sv_RentalsMode") == 1 &&
	GetCvar("sv_EnableShop") == 0){print(s:"Item Shop is unavailable"); Terminate;}

//GiveInventory("SpawnSafeZone",1);
ACS_NamedExecuteAlways("Menu_ItemShop",0);
}

Script "Menu_ItemShop" (void) CLIENTSIDE
{
	if(Playernumber() != ConsolePlayerNumber()) {Terminate;}
	while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",1);Delay(1);}
	//=======================[+]
	// - Define Variables -
	//=======================[+]
	int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
	int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));

	
	
	Int MoveFrameCap =6;
	Int StartMoves = 4;
	Int ChoiceID = 0;
	Int ChoiceCap = PlayerLVL;
	int MenuX = MenuXOrigin;
	int Menuy = MenuYOrigin+19.0;

	str ItemName;
	str itemSpace;
	int ItemCost;

	str ChoiceItemName;
	int ChoiceItemCost;
	int CursorY;
	// - Menu -
	int InputButtons, InputOldButtons, UpInput, DownInput, SideInput;
	Int ConfirmInput, CancelInput, ChoiceInput;
	Int MenuStates = 0;
	Int ShopState = 0;
	Int MenuNextState; 
	int i, j, h;
	Bool MenuUp = true;
	Bool BGUp;

	str ItemGameName;
	str ItemLang;
	str ChoiceItemMaxName;
	int ItemQuantity;

	int UpDownRepeat = 0;
	//=======================[+]
	// - Menu Loop Begin -
	//=======================[+]
	while (MenuUp && GetActorProperty(0,APROP_HEALTH) > 0) {
		SetHudSize(320, 200, 0);
		SetFont("STCFN");
		MenuStates = MenuNextState;
	
		// #------------------
		// # Begin Menustate 0
		// #------------------
		if (MenuStates == 0) {
	
			j = 0;
			// - Print the list of items -
			For(i = 0; i < MAX_SHOP; i++)
			{
				if(ChoiceID >= 3 && ChoiceID < MAX_SHOP-3)
				{
					if(i < ChoiceID-3){continue;}
					if(i > ChoiceID+3){break;}
				}
				if(ChoiceID < 3)
				{
					if(i > 6){break;}
				}
				if(ChoiceID > MAX_SHOP-4)
				{
					if(i < MAX_SHOP-6){continue;}
				}
				ItemName = ShopItemList[i][1];
				itemSpace = StrLeft("                ",16-StrLen(ItemName));
				ItemCost = ShopItemList[i][2]>>16;
					HudMessage(s:ItemName,s:itemSpace,i:ItemCost,s:" \cfBP"; HUDMSG_FADEOUT, 500 + j, CR_WHITE, MenuX, Menuy + (MNL * j), 0.2, 0);
					j++;
			}
	
				if(!BGUp)
					{DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),21,6+MoveFrameCap,0); 
					//DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*3),21,2,PastMenuSize);
					DrawMenuFrame(MenuX-(8.0*12),MenuY-(8.0*8),38,7,PastMenuSize);
					BGup = True;}

				ChoiceCap = MAX_SHOP;
				if(MAX_SHOP>6)
				{
				if (ChoiceID > 3 && ChoiceID < MAX_SHOP-3){ CursorY = 3;}
				else if(ChoiceID >= MAX_SHOP-3){CursorY = 3 + (ChoiceID-(MAX_SHOP-3));}	
				else{CursorY = ChoiceID;}
				}
				else{CursorY = ChoiceID;}
				
				if(ChoiceID >= MAX_SHOP-3 && MAX_SHOP>6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (6), CR_ORANGE, MenuX, Menuy + (MNL * 6), 0.2, 0);}
				else if(MAX_SHOP<=6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (MAX_SHOP), CR_ORANGE, MenuX, Menuy + (MNL * MAX_SHOP), 0.2, 0);}
				HudMessage(s: ">>"; HUDMSG_FADEOUT, 515, 0, MenuX - 16.0, Menuy + (MNL * CursorY), 0.2, 0);
	
				//Draw Description
				ItemGameName = ShopItemList[ChoiceID][0];
				ItemLang = strParam(s:"DESC_",s:ItemGameName);
				if(ChoiceID < MAX_SHOP)HudMessage(l:ItemLang; HUDMSG_FADEOUT, 517, CR_White, MenuX- (MNL * 10) , Menuy - (MNL * 8), 0.2, 0);

				ItemQuantity = CheckInventory(ItemGameName);
				HudMessage(s:"\cG<< Buy >>    Quantity: ",i:ItemQuantity; HUDMSG_FADEOUT, 518, CR_White, MenuX- (MNL * 4) , Menuy - (MNL * 3 + 6.0), 0.2, 0);
			
	
			// - Grab Inputs -
			InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
			//#region *Depreciated*
			//UpInput = ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD);
			//DownInput = ButtonCheck(InputButtons, InputOldButtons, BT_BACK);
			//SideInput = ButtonCheck(InputButtons, InputOldButtons, BT_MOVELEFT) + ButtonCheck(InputButtons, InputOldButtons, BT_MOVERIGHT);
			//ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
			//CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);
			//#endregion
			
			ChoiceInput = GetChoiceInputs(InputButtons,InputOldButtons,4);
			SideInput = GetLeftRightInputs(InputButtons,InputOldButtons,1);
			if(GetUpDownInputs(InputButtons,InputOldButtons,3) != 0)
				{
					if(UpDownRepeat==0){ChoiceID += GetUpDownInputs(InputButtons,InputOldButtons,3);}
					if(UpDownRepeat>10){ChoiceID += GetUpDownInputs(InputButtons,InputOldButtons,3); UpDownRepeat=8;}
					UpDownRepeat++;
				}
				else{UpDownRepeat = 0;}
			
				//#region **deprpeciate **
				//if(ChoiceID != 0)
/*
			if(!(InputButtons & BT_FORWARD && InputButtons & BT_BACK))
				{	
					if(ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD))
						{
							if(UpDownRepeat==0){ChoiceID--;}
							if(UpDownRepeat>10){ChoiceID--; UpDownRepeat=8;}
							UpDownRepeat++;
						}

					else if(ButtonCheck(InputButtons, InputOldButtons, BT_BACK))
						{
							if(UpDownRepeat==0){ChoiceID++;}
							if(UpDownRepeat>10){ChoiceID++; UpDownRepeat=8;}
							UpDownRepeat++;
						}
					else{UpDownRepeat = 0;}
				}
				*/

			/*
			if (UpInput != DownInput) {
				if (UpInput == 1) {
					ChoiceID--;
				}
				if (DownInput == 1) {
					ChoiceID++;
				}
			}
			*/
			//#endregion

			if (ChoiceID > ChoiceCap) { ChoiceID = 0; }
			if (ChoiceID < 0) { ChoiceID = ChoiceCap; }
			if (SideInput != 0) {MenuNextState = 1;} //Swap to sell menu 
			if (ChoiceInput == -1 || ChoiceInput == 1 && ChoiceID == MAX_SHOP) {break;} //MenuUp = false;
			if (ChoiceInput == 1 && ChoiceID < MAX_SHOP) 
					{ //Item Purchase
						ChoiceItemName = ShopItemList[ChoiceID][0];
						ChoiceItemMaxName = strParam(s:"Max",s:ChoiceItemName);
						ChoiceItemCost = ShopItemList[ChoiceID][2]>>16;
						if(ACS_NamedExecuteWithResult("BPCheck",ChoiceItemCost)
							&& CheckInventory(ChoiceItemName) < GetAmmoCapacity(ChoiceItemMaxName)
							&& ShopItemList[ChoiceID][3] != "NOSELL")
						{
							while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_ItemShop_Buy",ChoiceItemName,ChoiceItemCost);Delay(3);}
						}
						else
						{
							ACS_NamedExecuteAlways("ShopFailSound",0);
							if(!ACS_NamedExecuteWithResult("BPCheck",ChoiceItemCost)){ACS_NamedExecuteAlways("ShopBuyFailMoneyMsg",0);}
							else if(CheckInventory(ChoiceItemName) >= GetAmmoCapacity(ChoiceItemMaxName)){ACS_NamedExecuteAlways("ShopBuyFailSpaceMsg",0);}
							else if(ShopItemList[ChoiceID][3] != "NOSELL"){ACS_NamedExecuteAlways("ShopBuyFailMoneyMsg",0);}
						}

					} 
		}
			// #------------------
			// # End Menustate 0
			// #------------------

			// #------------------
			// # Begin Menustate 1
			// #------------------
			if (MenuStates == 1) {
		
				j = 0;
				// - Print the list of items -
				For(i = 0; i < MAX_SHOP; i++)
				{
					if(ChoiceID >= 3 && ChoiceID < MAX_SHOP-3)
					{
						if(i < ChoiceID-3){continue;}
						if(i > ChoiceID+3){break;}
					}
					if(ChoiceID < 3)
					{
						if(i > 6){break;}
					}
					if(ChoiceID > MAX_SHOP-4)
					{
						if(i < MAX_SHOP-6){continue;}
					}
					ItemName = ShopItemList[i][1];
					itemSpace = StrLeft("                ",16-StrLen(ItemName));
					ItemCost = ShopItemList[i][2]>>16;
					if(ItemCost>1){ItemCost = ItemCost/2;}
						HudMessage(s:ItemName,s:itemSpace,i:ItemCost,s:" \cfBP"; HUDMSG_FADEOUT, 500 + j, CR_WHITE, MenuX, Menuy + (MNL * j), 0.2, 0);
						j++;
				}
		
					if(!BGUp)
						{DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),21,6+MoveFrameCap,0); 
						//DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*3),21,2,PastMenuSize);
						DrawMenuFrame(MenuX-(8.0*12),MenuY-(8.0*8),38,7,PastMenuSize);
						BGup = True;}

					ChoiceCap = MAX_SHOP;
					if(MAX_SHOP>6)
					{
					if (ChoiceID > 3 && ChoiceID < MAX_SHOP-3){ CursorY = 3;}
					else if(ChoiceID >= MAX_SHOP-3){CursorY = 3 + (ChoiceID-(MAX_SHOP-3));}	
					else{CursorY = ChoiceID;}
					}
					else{CursorY = ChoiceID;}
					
					if(ChoiceID >= MAX_SHOP-3 && MAX_SHOP>6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (6), CR_ORANGE, MenuX, Menuy + (MNL * 6), 0.2, 0);}
					else if(MAX_SHOP<=6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (MAX_SHOP), CR_ORANGE, MenuX, Menuy + (MNL * MAX_SHOP), 0.2, 0);}
					HudMessage(s: ">>"; HUDMSG_FADEOUT, 515, 0, MenuX - 16.0, Menuy + (MNL * CursorY), 0.2, 0);
		
					//Draw Description
					ItemGameName = ShopItemList[ChoiceID][0];
					ItemLang = strParam(s:"DESC_",s:ItemGameName);
					if(ChoiceID < MAX_SHOP)HudMessage(l:ItemLang; HUDMSG_FADEOUT, 517, CR_White, MenuX- (MNL * 10) , Menuy - (MNL * 8), 0.2, 0);
				
					ItemQuantity = CheckInventory(ItemGameName);
					HudMessage(s:"\cd<< Sell >>    Quantity: ",i:ItemQuantity; HUDMSG_FADEOUT, 518, CR_White, MenuX- (MNL * 4) , Menuy - (MNL * 3 + 6.0), 0.2, 0);

		
				// - Grab Inputs -
				InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
				ChoiceInput = GetChoiceInputs(InputButtons,InputOldButtons,4);
				SideInput = GetLeftRightInputs(InputButtons,InputOldButtons,1);
				if(GetUpDownInputs(InputButtons,InputOldButtons,3) != 0)
					{
						if(UpDownRepeat==0){ChoiceID += GetUpDownInputs(InputButtons,InputOldButtons,3);}
						if(UpDownRepeat>10){ChoiceID += GetUpDownInputs(InputButtons,InputOldButtons,3); UpDownRepeat=8;}
						UpDownRepeat++;
					}
					else{UpDownRepeat = 0;}
					
				if (ChoiceID > ChoiceCap) { ChoiceID = 0; }
				if (ChoiceID < 0) { ChoiceID = ChoiceCap; }
				if (SideInput == 1) {MenuNextState = 0;} //Swap to Buy menu 
				if (CancelInput == 1 || ConfirmInput == 1 && ChoiceID == MAX_SHOP) {break;} //MenuUp = false;
				if (ConfirmInput == 1 && ChoiceID < MAX_SHOP) 
						{ //Item Sell
							ChoiceItemName = ShopItemList[ChoiceID][0];
							ChoiceItemMaxName = strParam(s:"Max",s:ChoiceItemName);
							ChoiceItemCost = ShopItemList[ChoiceID][2]>>16;
							if(ChoiceItemCost>1){ChoiceItemCost = ChoiceItemCost/2;}
							if(CheckInventory(ChoiceItemName))
							{
								while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_ItemShop_Sell",ChoiceItemName,ChoiceItemCost);Delay(3);}
							}
							else
							{
								ACS_NamedExecuteAlways("ShopFailSound",0);
								ACS_NamedExecuteAlways("ShopSellFailQuantityMsg",0);
							}

						} 
				// #------------------
				// # End Menustate 1
				// #------------------
			}
			Delay(1);
			InputOldButtons = InputButtons;
		
	} 
	
	//=======================[+]
	// - Menu Loop End -
	//=======================[+]
	ClearMenuFrame();
	while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",0);Delay(1);}
}


Script "NET_ItemShop_Buy" (int ChoiceItemName, int ChoiceItemCost) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_A",1);Terminate;}
	if(CheckInventory("NetCheck_A")) Terminate;

	GiveInventory(ChoiceItemName,1);
	ACS_NamedExecuteAlways("BPPay",0,ChoiceItemCost);
	ACS_NamedExecuteAlways("ShopSuccessSound",0);
GiveInventory("NetCheck_A",1);
}

Script "NET_ItemShop_Sell" (int ChoiceItemName, int ChoiceItemCost) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_A",1);Terminate;}
	if(CheckInventory("NetCheck_A")) Terminate;

	TakeInventory(ChoiceItemName,1);
	ACS_NamedExecuteAlways("GivePlayerBP",0,PlayerNumber(),ChoiceItemCost);
	ACS_NamedExecuteAlways("ShopSuccessSound",0);
GiveInventory("NetCheck_A",1);
}
#endregion
//#endregion


//#region -=- HeldItem Shop
#region -=- HeldItem Shop

Script "PromptHeldItemShop" (void)
{
//==================[+]
// - Pre Start Up -
//==================[+]
if(ShopTime() == 0){print(s:"Cannot open the HeldItem shop here"); Terminate;}
if(GetCvar("sv_RentalsMode") == 1 &&
	GetCvar("sv_EnableShop") == 0){print(s:"HeldItem Shop is unavailable"); Terminate;}

//GiveInventory("SpawnSafeZone",1);
ACS_NamedExecuteAlways("Menu_HeldItemShop",0);
}

Script "Menu_HeldItemShop" (void) CLIENTSIDE
{
	if(Playernumber() != ConsolePlayerNumber()) {Terminate;}
	while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",1);Delay(1);}
	//=======================[+]
	// - Define Variables -
	//=======================[+]
	int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
	int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));

	
	
	Int MoveFrameCap =6;
	Int StartMoves = 4;
	Int ChoiceID = 0;
	Int ChoiceCap = PlayerLVL;
	int MenuX = MenuXOrigin;
	int Menuy = MenuYOrigin+19.0;

	str ItemName;
	str itemSpace;
	int ItemCost;

	str ChoiceItemName;
	int ChoiceItemCost;
	int ChoiceItemStats;
	int CursorY;
	// - Menu -
	int InputButtons, InputOldButtons, UpInput, DownInput, SideInput;
	Int ConfirmInput, CancelInput, ChoiceInput;
	Int MenuStates = 0;
	Int ShopState = 0;
	Int MenuNextState; 
	int i, j, h;
	Bool MenuUp = true;
	Bool BGUp;

	str ItemGameName;
	str ItemLang;
	str ItemStats;
	str ChoiceItemMaxName;
	str itemColor;
	int ItemQuantity;

	int UpDownRepeat = 0;
	//=======================[+]
	// - Menu Loop Begin -
	//=======================[+]
	while (MenuUp && GetActorProperty(0,APROP_HEALTH) > 0) {
		SetHudSize(320, 200, 0);
		SetFont("STCFN");
		MenuStates = MenuNextState;
	
		// #------------------
		// # Begin Menustate 0
		// #------------------
		if (MenuStates == 0) {
	
			j = 0;
			// - Print the list of items -
			For(i = 0; i < MAX_HELDITEMS; i++)
			{
				if(ChoiceID >= 3 && ChoiceID < MAX_HELDITEMS-3)
				{
					if(i < ChoiceID-3){continue;}
					if(i > ChoiceID+3){break;}
				}
				if(ChoiceID < 3)
				{
					if(i > 6){break;}
				}
				if(ChoiceID > MAX_HELDITEMS-4)
				{
					if(i < MAX_HELDITEMS-6){continue;}
				}
				ItemName = HeldItemList[i][1];
				itemSpace = StrLeft("                \cJ",16-StrLen(ItemName));
				ItemCost = HeldItemStats[i][6]+(HeldItemStats[i][7]*CheckInventory(HeldItemList[i][0]));
				if(CheckInventory(HeldItemList[i][0])){itemColor = "\cG";}
				else{itemColor = "\cJ";}
					HudMessage(s:itemColor,s:ItemName,s:itemSpace,i:ItemCost,s:" \cfBP"; HUDMSG_FADEOUT, 500 + j, CR_WHITE, MenuX, Menuy + (MNL * j), 0.2, 0);
					j++;
			}
	
				if(!BGUp)
					{DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),21,6+MoveFrameCap,0); 
					//DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*3),21,2,PastMenuSize);
					DrawMenuFrame(MenuX-(8.0*12),MenuY-(8.0*8),38,7,PastMenuSize);
					BGup = True;}

				ChoiceCap = MAX_HELDITEMS;
				if(MAX_HELDITEMS>6)
				{
				if (ChoiceID > 3 && ChoiceID < MAX_HELDITEMS-3){ CursorY = 3;}
				else if(ChoiceID >= MAX_HELDITEMS-3){CursorY = 3 + (ChoiceID-(MAX_HELDITEMS-3));}	
				else{CursorY = ChoiceID;}
				}
				else{CursorY = ChoiceID;}
				
				if(ChoiceID >= MAX_HELDITEMS-3 && MAX_HELDITEMS>6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (6), CR_ORANGE, MenuX, Menuy + (MNL * 6), 0.2, 0);}
				else if(MAX_HELDITEMS<=6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (MAX_HELDITEMS), CR_ORANGE, MenuX, Menuy + (MNL * MAX_HELDITEMS), 0.2, 0);}
				HudMessage(s: ">>"; HUDMSG_FADEOUT, 515, 0, MenuX - 16.0, Menuy + (MNL * CursorY), 0.2, 0);
	
				//Draw Description
				ItemGameName = HeldItemList[ChoiceID][0];
				ItemLang = strParam(s:"DESC_",s:ItemGameName);
				if(ChoiceID < MAX_HELDITEMS)HudMessage(l:ItemLang; HUDMSG_FADEOUT, 517, CR_White, MenuX- (MNL * 10) , Menuy - (MNL * 8), 0.2, 0);

				ItemQuantity = CheckInventory(ItemGameName);
				if(ItemQuantity>0){itemStats = GrabHeldItemStats(ChoiceID,ItemQuantity);}
					else{itemStats = StrParam(s:"\cC",s:GrabHeldItemStats(ChoiceID,1));}
				//HudMessage(s:itemStats; HUDMSG_FADEOUT, 518, CR_White, MenuX- (MNL * 4) , Menuy - (MNL * 3 + 3.0), 0.2, 0);
				HudMessage(s:"\cG<< Buy >>    Level: ",i:ItemQuantity,s:"   ",s:itemStats; HUDMSG_FADEOUT, 518, CR_White, MenuX- (MNL * 7 - 3.0) , Menuy - (MNL * 3 + 6.0), 0.2, 0);
			
	
			// - Grab Inputs -
			InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
			//#region *Depreciated*
			//UpInput = ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD);
			//DownInput = ButtonCheck(InputButtons, InputOldButtons, BT_BACK);
			//SideInput = ButtonCheck(InputButtons, InputOldButtons, BT_MOVELEFT) + ButtonCheck(InputButtons, InputOldButtons, BT_MOVERIGHT);
			//ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
			//CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);
			//#endregion
			
			ChoiceInput = GetChoiceInputs(InputButtons,InputOldButtons,4);
			SideInput = GetLeftRightInputs(InputButtons,InputOldButtons,1);
			if(GetUpDownInputs(InputButtons,InputOldButtons,3) != 0)
				{
					if(UpDownRepeat==0){ChoiceID += GetUpDownInputs(InputButtons,InputOldButtons,3);}
					if(UpDownRepeat>10){ChoiceID += GetUpDownInputs(InputButtons,InputOldButtons,3); UpDownRepeat=8;}
					UpDownRepeat++;
				}
				else{UpDownRepeat = 0;}
			
				//#region **deprpeciate **
				//if(ChoiceID != 0)
/*
			if(!(InputButtons & BT_FORWARD && InputButtons & BT_BACK))
				{	
					if(ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD))
						{
							if(UpDownRepeat==0){ChoiceID--;}
							if(UpDownRepeat>10){ChoiceID--; UpDownRepeat=8;}
							UpDownRepeat++;
						}

					else if(ButtonCheck(InputButtons, InputOldButtons, BT_BACK))
						{
							if(UpDownRepeat==0){ChoiceID++;}
							if(UpDownRepeat>10){ChoiceID++; UpDownRepeat=8;}
							UpDownRepeat++;
						}
					else{UpDownRepeat = 0;}
				}
				*/

			/*
			if (UpInput != DownInput) {
				if (UpInput == 1) {
					ChoiceID--;
				}
				if (DownInput == 1) {
					ChoiceID++;
				}
			}
			*/
			//#endregion

			if (ChoiceID > ChoiceCap) { ChoiceID = 0; }
			if (ChoiceID < 0) { ChoiceID = ChoiceCap; }
			if (SideInput != 0) {MenuNextState = 1;} //Swap to sell menu 
			if (ChoiceInput == -1 || ChoiceInput == 1 && ChoiceID == MAX_HELDITEMS) {break;} //MenuUp = false;
			if (ChoiceInput == 1 && ChoiceID < MAX_HELDITEMS) 
					{ //Item Purchase
						ChoiceItemName = HeldItemList[ChoiceID][0];
						ChoiceItemMaxName = strParam(s:"Max",s:ChoiceItemName);
						ChoiceItemCost = HeldItemStats[ChoiceID][6]+(HeldItemStats[ChoiceID][7]*CheckInventory(ChoiceItemName));
						if(ACS_NamedExecuteWithResult("BPCheck",ChoiceItemCost)
							&& CheckInventory(ChoiceItemName) < GetAmmoCapacity(ChoiceItemMaxName)
							&& HeldItemList[ChoiceID][3] != "NOSELL"
							&& (CountHeldItems(0) < GetCvar("PKMN_HeldItemLimit") || CheckInventory(ChoiceItemName)))
						{
							while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_HeldItemShop_Buy",ChoiceItemName,ChoiceItemCost);Delay(3);}
						}
						else
						{
							ACS_NamedExecuteAlways("ShopFailSound",0);
							if(!ACS_NamedExecuteWithResult("BPCheck",ChoiceItemCost)){ACS_NamedExecuteAlways("ShopBuyFailMoneyMsg",0);}
							else if(CheckInventory(ChoiceItemName) >= GetAmmoCapacity(ChoiceItemMaxName)){ACS_NamedExecuteAlways("ShopBuyFailSpaceMsg",0);}
							//else if(HeldItemList[ChoiceID][3] != "NOSELL"){ACS_NamedExecuteAlways("ShopBuyFailMoneyMsg",0);}
							else if (CountHeldItems(0) >= GetCvar("PKMN_HeldItemLimit")){ACS_NamedExecuteAlways("ShopBuyFailHeldLimitMsg",0);}
							//print(s:ChoiceItemName);
						}

					} 
		}
			// #------------------
			// # End Menustate 0
			// #------------------

			// #------------------
			// # Begin Menustate 1
			// #------------------
			if (MenuStates == 1) {
		
				j = 0;
				// - Print the list of items -
				For(i = 0; i < MAX_HELDITEMS; i++)
				{
					if(ChoiceID >= 3 && ChoiceID < MAX_HELDITEMS-3)
					{
						if(i < ChoiceID-3){continue;}
						if(i > ChoiceID+3){break;}
					}
					if(ChoiceID < 3)
					{
						if(i > 6){break;}
					}
					if(ChoiceID > MAX_HELDITEMS-4)
					{
						if(i < MAX_HELDITEMS-6){continue;}
					}
					ItemName = HeldItemList[i][1];
					itemSpace = StrLeft("                \cJ",16-StrLen(ItemName));
					ItemCost = HeldItemStats[i][6]*CheckInventory(HeldItemList[i][0])+(HeldItemStats[i][7]*CheckInventory(HeldItemList[i][0]));
					if(CheckInventory(HeldItemList[i][0])){itemColor = "\cG";}
					else{itemColor = "\cJ";}
					if(!CheckInventory(HeldItemList[i][0])){ItemCost = 0;}
					if(ItemCost>1){ItemCost = ItemCost/2;}
						HudMessage(s:itemColor,s:ItemName,s:itemSpace,i:ItemCost,s:" \cfBP"; HUDMSG_FADEOUT, 500 + j, CR_WHITE, MenuX, Menuy + (MNL * j), 0.2, 0);
						j++;
				}
		
					if(!BGUp)
						{DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),21,6+MoveFrameCap,0); 
						//DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*3),21,2,PastMenuSize);
						DrawMenuFrame(MenuX-(8.0*12),MenuY-(8.0*8),38,7,PastMenuSize);
						BGup = True;}

					ChoiceCap = MAX_HELDITEMS;
					if(MAX_HELDITEMS>6)
					{
					if (ChoiceID > 3 && ChoiceID < MAX_HELDITEMS-3){ CursorY = 3;}
					else if(ChoiceID >= MAX_HELDITEMS-3){CursorY = 3 + (ChoiceID-(MAX_HELDITEMS-3));}	
					else{CursorY = ChoiceID;}
					}
					else{CursorY = ChoiceID;}
					
					if(ChoiceID >= MAX_HELDITEMS-3 && MAX_HELDITEMS>6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (6), CR_ORANGE, MenuX, Menuy + (MNL * 6), 0.2, 0);}
					else if(MAX_HELDITEMS<=6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (MAX_HELDITEMS), CR_ORANGE, MenuX, Menuy + (MNL * MAX_HELDITEMS), 0.2, 0);}
					HudMessage(s: ">>"; HUDMSG_FADEOUT, 515, 0, MenuX - 16.0, Menuy + (MNL * CursorY), 0.2, 0);
		
					//Draw Description
					ItemGameName = HeldItemList[ChoiceID][0];
					ItemLang = strParam(s:"DESC_",s:ItemGameName);
					if(ChoiceID < MAX_HELDITEMS)HudMessage(l:ItemLang; HUDMSG_FADEOUT, 517, CR_White, MenuX- (MNL * 10) , Menuy - (MNL * 8), 0.2, 0);
				
					ItemQuantity = CheckInventory(ItemGameName);
					HudMessage(s:"\cd<< Sell >>    Quantity: ",i:ItemQuantity; HUDMSG_FADEOUT, 518, CR_White, MenuX- (MNL * 7 - 3.0) , Menuy - (MNL * 3 + 6.0), 0.2, 0);

		
				// - Grab Inputs -
				InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
				ChoiceInput = GetChoiceInputs(InputButtons,InputOldButtons,4);
				SideInput = GetLeftRightInputs(InputButtons,InputOldButtons,1);
				if(GetUpDownInputs(InputButtons,InputOldButtons,3) != 0)
					{
						if(UpDownRepeat==0){ChoiceID += GetUpDownInputs(InputButtons,InputOldButtons,3);}
						if(UpDownRepeat>10){ChoiceID += GetUpDownInputs(InputButtons,InputOldButtons,3); UpDownRepeat=8;}
						UpDownRepeat++;
					}
					else{UpDownRepeat = 0;}
					
				if (ChoiceID > ChoiceCap) { ChoiceID = 0; }
				if (ChoiceID < 0) { ChoiceID = ChoiceCap; }
				if (SideInput != 0) {MenuNextState = 0;} //Swap to Buy menu 
				if (ChoiceInput == -1 || ChoiceInput == 1 && ChoiceID == MAX_HELDITEMS) {break;} //MenuUp = false;
				if (ChoiceInput == 1 && ChoiceID < MAX_HELDITEMS) 
						{ //Item Sell
							ChoiceItemName = HeldItemList[ChoiceID][0];
							ChoiceItemMaxName = strParam(s:"Max",s:ChoiceItemName);
							ChoiceItemCost = HeldItemStats[ChoiceID][6]+(HeldItemStats[ChoiceID][7]*CheckInventory(ChoiceItemName));
							if(ChoiceItemCost>1){ChoiceItemCost = ChoiceItemCost/2;}
							if(CheckInventory(ChoiceItemName))
							{
								while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_HeldItemShop_Sell",ChoiceItemName,ChoiceItemCost);Delay(3);}
							}
							else
							{
								ACS_NamedExecuteAlways("ShopFailSound",0);
								ACS_NamedExecuteAlways("ShopSellFailQuantityMsg",0);
							}

						} 
				// #------------------
				// # End Menustate 1
				// #------------------
			}
			Delay(1);
			InputOldButtons = InputButtons;
		
	} 
	
	//=======================[+]
	// - Menu Loop End -
	//=======================[+]
	ClearMenuFrame();
	while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",0);Delay(1);}
}


Script "NET_HeldItemShop_Buy" (int ChoiceItemName, int ChoiceItemCost) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_A",1);Terminate;}
	if(CheckInventory("NetCheck_A")) Terminate;

	GiveInventory(ChoiceItemName,1);
	GiveInventory("HeldCheck_Passive",1);
	ACS_NamedExecuteAlways("ActiveStatUpdate",0);
	ACS_NamedExecuteAlways("Write_HI_Inventory",0);
	ACS_NamedExecuteAlways("BPPay",0,ChoiceItemCost);
	ACS_NamedExecuteAlways("ShopSuccessSound",0);
GiveInventory("NetCheck_A",1);
}

Script "NET_HeldItemShop_Sell" (int ChoiceItemName, int ChoiceItemCost) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_A",1);Terminate;}
	if(CheckInventory("NetCheck_A")) Terminate;

	TakeInventory(ChoiceItemName,99);
	GiveInventory("HeldCheck_Passive",1);
	ACS_NamedExecuteAlways("ActiveStatUpdate",0);
	ACS_NamedExecuteAlways("Write_HI_Inventory",0);
	ACS_NamedExecuteAlways("GivePlayerBP",0,PlayerNumber(),ChoiceItemCost);
	ACS_NamedExecuteAlways("ShopSuccessSound",0);
GiveInventory("NetCheck_A",1);
}
#endregion
//#endregion


//#region -=- TM Shop
#region -=- TM Shop

int TMMoveCache[64][MAXTMLIST];
int TMNumCache[64][MAXTMLIST];
int TMCostCache[64][MAXTMLIST];
int TMColCache[64][MAXTMLIST];
int TMNumCache2[64];

Script "PromptTMShop" (Void) 
{
//==================[+]
// - Pre Start Up -
//==================[+]
int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));

if(PlayerDEXNum == SMEARGLE){print(s:"Smeargle Cannot use TMs"); Terminate;}
if(PlayerDEXNum == BELDUM){print(s:"beldum Cannot use TMs"); Terminate;}
if(ShopTime() == 0){print(s:"Cannot open the TM shop here"); Terminate;}
if(GetCvar("sv_RentalsMode") == 1 &&
	GetCvar("sv_EnableTM") == 0){print(s:"TMs are unavailable"); Terminate;}

//GiveInventory("SpawnSafeZone",1);
ACS_NamedExecuteAlways("Menu_TMShop",0);
}

Script "Menu_TMShop" (Void) CLIENTSIDE
{
	if(Playernumber() != ConsolePlayerNumber()) {Terminate;}
	while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",1);Delay(1);}
//=======================[+]
// - Define Variables -
//=======================[+]
int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));

Int MoveFrameCap =6;
Int StartMoves = 4;
Int ChoiceID = 0;
Int ChoiceCap = PlayerLVL;
int MenuX = MenuXOrigin;
int Menuy = MenuYOrigin+19.0;
int MoveListVal;
int MoveListCount;
int TMNumber;
int Movecost;
str MoveListCol;
bool ShopSet;
int CursorY;
int LearnMove = -1;
// - Menu -
int InputButtons;
int InputOldButtons; 
int UpInput;
int DownInput;
Int ConfirmInput;
Int CancelInput;
Int MenuStates = 0;
Int MenuNextState; 
int i;
int j;
int h;
Bool MenuUp = true;
Bool BGUp;
//=======================[+]
// - Menu Loop Begin -
//=======================[+]
while (MenuUp && GetActorProperty(0,APROP_HEALTH) > 0) {
	SetHudSize(320, 200, 0);
	SetFont("STCFN");
	MenuStates = MenuNextState;

	// #------------------
	// # Begin Menustate 0
	// #------------------
	if (MenuStates == 0) {

		//MoveListCount = 0;
		j = 0;

		/*
		 * First, let's process all the moves we can learn with the pokemon we are playing, and store them into the Cache TM.
		*/
		if(!ShopSet)
		{
			For(int k = 0; k < MAXTMLIST; k++) // + StartMoves - 1
			{
				//MoveListVal = MoveDex[PlayerDEXNum][k];
				//if (MoveListVal != -1) {TMMoveCache[PlayerNumber()][MoveListCount] = MoveListVal; MoveListCount++;}
				
					MoveListVal = CheckTMArray(k,PlayerDEXNum,PlayerLVL);
					if (MoveListVal != -1 ) 
						{
						TMMoveCache[PlayerNumber()][MoveListCount] = MoveListVal; 
						TMNumCache[PlayerNumber()][MoveListCount] = k+1;
						if(CheckTMUnlock(k,PlayerDEXNum,PlayerLVL))
							{
							TMCostCache[PlayerNumber()][MoveListCount] = 0;
							TMColCache[PlayerNumber()][MoveListCount] = ": \cd";
							}
						else
							{
							TMCostCache[PlayerNumber()][MoveListCount] = TMList[k][3];
							TMColCache[PlayerNumber()][MoveListCount] = ": \cj";
							}
						
						MoveListCount++;
						}
			
			}
		ShopSet = True;
		}

		// - Print the list of moves -
		For(i = 0; i < MoveListCount; i++)
		{
			if(ChoiceID >= 3 && ChoiceID < MoveListCount-3)
			{
				if(i < ChoiceID-3){continue;}
				if(i > ChoiceID+3){break;}
			}
			if(ChoiceID < 3)
			{
				if(i > 6){break;}
			}
			if(ChoiceID > MoveListCount-4)
			{
				if(i < MoveListCount-6){continue;}
			}

			MoveListVal = TMMoveCache[PlayerNumber()][i];
			TMNumber = TMNumCache[PlayerNumber()][i];
			MoveCost = TMCostCache[PlayerNumber()][i];
			MoveListCol = TMColCache[PlayerNumber()][i];
			if (MoveListVal != -1 ) {
				HudMessage(s:"\cfTM",i:TMNumber,s:MoveListCol,s: weapons_ammo[MoveListVal][2]; HUDMSG_FADEOUT, 500 + j, 0, MenuX, Menuy + (MNL * j), 0.2, 0);
				j++;
			}

		}

		if (MoveListCount <= 0) {print(s: "No TMs to learn"); break;} //MenuUp = false;
		else {
			if(!BGUp)
				{DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),21,6+MoveFrameCap,0); 
				//DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*3),21,2,PastMenuSize);
				DrawMenuFrame(MenuX-(8.0*12),MenuY-(8.0*8),38,7,PastMenuSize);
				BGup = True;}
			ChoiceCap = MoveListCount;
			if(MoveListCount>6)
			{
			if (ChoiceID > 3 && ChoiceID < MoveListCount-3){ CursorY = 3;}
			else if(ChoiceID >= MoveListCount-3){CursorY = 3 + (ChoiceID-(MoveListCount-3));}	
			else{CursorY = ChoiceID;}
			}
			else{CursorY = ChoiceID;}
			
			if(ChoiceID >= MoveListCount-3 && MoveListCount>6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (6), CR_ORANGE, MenuX, Menuy + (MNL * 6), 0.2, 0);}
			else if(MoveListCount<=6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (MoveListCount), CR_ORANGE, MenuX, Menuy + (MNL * MoveListCount), 0.2, 0);}
			HudMessage(s: ">>"; HUDMSG_FADEOUT, 515, 0, MenuX - 16.0, Menuy + (MNL * CursorY), 0.2, 0);

			//Draw Description
			str MoveLangNum = strParam(s:"M",s:strLeft("000",3-strlen(strParam(i:TMMoveCache[PlayerNumber()][ChoiceID]))),i:TMMoveCache[PlayerNumber()][ChoiceID]);
			str MoveLang = strParam(s:MoveLangNum,s:"_DESC");
			str MoveType = strParam(s:MoveLangNum,s:"_TYPE");
			str MoveCat = strParam(s:MoveLangNum,s:"_CATEGORY");
			if(ChoiceID < MoveListCount)HudMessage(l:MoveLang; HUDMSG_FADEOUT, 517, CR_White, MenuX- (MNL * 10) , Menuy - (MNL * 8), 0.2, 0);

			//Draw Cost
			MoveCost = TMCostCache[PlayerNumber()][ChoiceID];
			if(ChoiceID < MoveListCount)HudMessage(s:"\cjBP Cost : ",i:MoveCost,s:"  ",l:MoveType,s:"  ",l:MoveCat; HUDMSG_FADEOUT, 516, 0, MenuX- (MNL * 2) , Menuy - (MNL * 3 + 6.0), 0.2, 0);
		}

		// - Grab Inputs -
		InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
		UpInput = ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD);
		DownInput = ButtonCheck(InputButtons, InputOldButtons, BT_BACK);
		ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
		CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);
		if (UpInput != DownInput) {
			if (UpInput == 1) {
				ChoiceID--;
				While(TMMoveCache[PlayerNumber()][ChoiceID] == -1){ ChoiceID--; }
			}
			if (DownInput == 1) {
				ChoiceID++;
				While(TMMoveCache[PlayerNumber()][ChoiceID] == -1
					&& ChoiceID != ChoiceCap)
				{ ChoiceID++; }
			}
		}
		if (ChoiceID > ChoiceCap) { ChoiceID = 0; }
		if (ChoiceID < 0) { ChoiceID = ChoiceCap; }
		if (CancelInput == 1 || ConfirmInput == 1 && ChoiceID == MoveListCount) {break;} //MenuUp = false;
		if (ConfirmInput == 1 && ChoiceID < MoveListCount) { LearnMove = TMMoveCache[PlayerNumber()][ChoiceID]; MoveCost = TMCostCache[PlayerNumber()][ChoiceID]; break;} //MenuUp = false;
		// #------------------
		// # End Menustate 0
		// #------------------
		Delay(1);
		InputOldButtons = InputButtons;
	}
} 

//=======================[+]
// - Menu Loop End -
//=======================[+]
ClearMenuFrame();
if(LearnMove > -1) 
	{ 
		if(ACS_NamedExecuteWithResult("BPCheck",MoveCost))
		{
			InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
			While(ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK)
			||ButtonCheck(InputButtons, InputOldButtons, BT_ALTATTACK))
			{InputButtons = GetPlayerInput(-1, INPUT_BUTTONS); Delay(1); InputOldButtons = InputButtons;}
			//ACS_NamedExecuteAlways("PromptMoveLearn",0,LearnMove,MoveCost);
			TMNumCache2[PlayerNumber()] = TMNumCache[PlayerNumber()][ChoiceID];
			ACS_NamedExecuteAlways("Menu_MoveLearn",0,LearnMove,MoveCost);
			ACS_NamedExecuteAlways("ShopSuccessSound",0);
			//if(!CheckTMUnlock(TMNumCache[PlayerNumber()][ChoiceID]-1,PlayerDEXNum,PlayerLVL))
			//{

				//while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_TMTeamPurchase",TMNumCache[PlayerNumber()][ChoiceID],PlayerDEXNum,PlayerLVL);Delay(3);}

				//if(GetCvar("PKMN_TeamTMPurchase")){UnlockTeamTM(TMNumCache[PlayerNumber()][ChoiceID]-1,PlayerTeam());}
				//else{UnlockTM(TMNumCache[PlayerNumber()][ChoiceID]-1);}
			//}
			
			//GiveInventory("SaveMovesetFlag",1);
			
		}
		else{
			print(s: "Cannot Afford that TM");
			ACS_NamedExecuteAlways("ShopFailSound",0);
			while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",0);Delay(1);}
			}
	}
	else{while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",0);Delay(1);}}
}

Script "NET_TMTeamPurchase" (int TMNum,int PlayerDEXNum,int PlayerLVL) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_D",1);Terminate;}
	if(CheckInventory("NetCheck_D")) Terminate;

	if(!CheckTMUnlock(TMNum,PlayerDEXNum,PlayerLVL))
	{
	if(GetCvar("PKMN_TeamTMPurchase")){UnlockTeamTM(TMNum-1,PlayerTeam());}
	else{UnlockTM(TMNum-1);}
	}

	//if(!CheckTMUnlock(TMNum,PlayerDEXNum,PlayerLVL)){GiveInventory("NetCheck_D",1);}
	GiveInventory("NetCheck_D",1);
}
#endregion
//#endregion

//#region -=- Move Learning
#region -=- Move Learning

Script "NET_PromptMoveLearn" (int Moveid, int MoveCost) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_A",1);Terminate;}

if(CheckInventory("NetCheck_A")) Terminate;
ACS_NamedExecuteAlways("PromptMoveLearn",0,Moveid,MoveCost);
GiveInventory("NetCheck_A",1);
}

Script "PromptMoveLearn" (int Moveid, int MoveCost)
{
//==================[+]
// - Pre Start Up -
//==================[+]
if(StatusTime() == 0){print(s:"Cannot Learn Moves now"); Terminate;}


//setplayerproperty(0,1,4);
//GiveInventory("SpawnSafeZone",1);

ACS_NamedExecuteAlways("Menu_MoveLearn",0,Moveid,MoveCost);
//NamedScriptWait("Menu_MoveLearn");
//log(s:"Done waiting on movelearn");
//setplayerproperty(0,0,4);
}

Script "Menu_MoveLearn" (int Moveid, int MoveCost) CLIENTSIDE
{
	if(!CheckInventory("PlayerPropertyFrozen"))
	{
	while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",1);Delay(1);}	
	}

//=======================[+]
// - Define Variables -
//=======================[+]
if(Moveid<0 || Moveid>MAX_WEAPONS_GLOBAL){Terminate;}
Int ChoiceID = 0;
Int ChoiceWep;
int Move1 = -1,Move2 = -1,Move3 = -1,Move4 = -1;
int NewMove = Moveid;
str Str1 = "----",Str2 = "----",Str3 = "----",Str4 = "----",Str5 = weapons_ammo[NewMove][2];
str WepName;
str WepTag;
int MenuX = MenuXOrigin;
int Menuy = MenuYOrigin;
bool LearnAMove;
int slot;
for(; slot<MAX_SLOTS+1; slot++) {
		for(int i = 0; ((i<MAX_WEAPONS_GLOBAL)&& Slot<5); i++) 
		{
			WepName = StrParam(s:weapons_ammo[i][0],i:slot);
			WepTag = weapons_ammo[i][2];
			if(CheckInventory(WepName)>0) 
			{
				switch(slot)
				{
					Case 1: Move1 = i; Str1 = WepTag; break;
					Case 2: Move2 = i; Str2 = WepTag; break;
					Case 3: Move3 = i; Str3 = WepTag; break;
					Case 4: Move4 = i; Str4 = WepTag; break;
				}
			}
		}
	}
if (NewMove == Move1
	||NewMove == Move2
	||NewMove == Move3
	||NewMove == Move4)
	{
	print(s:"Move ",s:weapons_ammo[NewMove][2], s:" Already Known!"); 
	TakeInventory("NetCheck_Freeze",99);
	while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",0);Delay(1);} 
	Terminate;
	}

	int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
	int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));

// - Menu -
int InputButtons;
int InputOldButtons; 
int UpInput;
int DownInput;
Int ConfirmInput;
Int CancelInput;
Int MenuStates = 0;
Int MenuNextState; 
Bool MenuUp = true;
//=======================[+]
// - Menu Loop Begin -
//=======================[+]
DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),15,10,0);
while(MenuUp && GetActorProperty(0,APROP_HEALTH) > 0)
	{
	MenuStates = MenuNextState;
	// #------------------
	// # Begin Menustate 0
	// #------------------
	if(MenuStates == 0)
	{
	// - Print Menu -
	SetHudSize(320,200,0);
	SetFont("STCFN");
	HudMessage(s:Str1; HUDMSG_FADEOUT, 500, 0, MenuX, Menuy, 0.2, 0);
	HudMessage(s:Str2; HUDMSG_FADEOUT, 501, 0, MenuX, Menuy+(MNL*1), 0.2, 0);
	HudMessage(s:Str3; HUDMSG_FADEOUT, 502, 0, MenuX, Menuy+(MNL*2), 0.2, 0);
	HudMessage(s:Str4; HUDMSG_FADEOUT, 503, 0, MenuX, Menuy+(MNL*3), 0.2, 0);
	HudMessage(s:Str5; HUDMSG_FADEOUT, 504, CR_Orange, MenuX, Menuy+(MNL*4), 0.2, 0);
	HudMessage(s:">>"; HUDMSG_FADEOUT, 505, 0, MenuX-16.0, Menuy+(MNL*ChoiceID), 0.2, 0);

	// #------------------
	// # End Menustate 0
	// #------------------
	}
	// #------------------
	// # Begin Menustate 1
	// #------------------
	if(MenuStates == 1)
	{ // - Complete menu action
	switch(ChoiceID)
	{
		Case 0: ChoiceWep = Move1; break;
		Case 1: ChoiceWep = Move2; break;
		Case 2: ChoiceWep = Move3; break;
		Case 3: ChoiceWep = Move4; break;
	}

	/*
	if(PlayerInGame(PlayerNumber()))
	{
	TakeInventory(StrParam(s:weapons_ammo[ChoiceWep][0],i:ChoiceID+1),99);
	GiveInventory(StrParam(s:weapons_ammo[NewMove][0],i:ChoiceID+1),1);
	ACS_NamedExecuteAlways("BPPay",0,Movecost);
	}
	else
	{
	SetCvar(StrParam(s:"PLAYER",i:PlayerNumber(),s:"_SLOT",i:ChoiceID+1),NewMove);
	ACS_NamedExecuteAlways("BPPay",0,Movecost);
	}
	*/

	LearnAMove = true;
	break;//MenuUp = False;
	// #------------------
	// # End Menustate 1
	// #------------------
	}

	// - Grab Inputs -
	InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
	UpInput = ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD);
	DownInput = ButtonCheck(InputButtons, InputOldButtons, BT_BACK);
	ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
	CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);
	if(UpInput != DownInput)
		{
			if(UpInput == 1){ChoiceID--;}
			if(DownInput == 1){ChoiceID++;}
		}
	if(ChoiceID>4){ChoiceID = 0;}
	if(ChoiceID<0){ChoiceID = 4;}
	if(ConfirmInput)
			{
			if(ChoiceID<4)
			{
				until(MenuNextState == 1)
				{
				if(ChoiceID == 3 && Move3 == -1){ChoiceID--;}
				else if(ChoiceID == 2 && Move2 == -1){ChoiceID--;}
				else if(ChoiceID == 1 && Move1 == -1){ChoiceID--;}
				else{MenuNextState = 1;}
				}
			}
			Else if(ChoiceID == 4){break;} //MenuUp = False;
		}
	Delay(1);
	InputOldButtons = InputButtons;
	}
//=======================[+]
// - Menu Loop End -
//=======================[+]
ClearMenuFrame();
InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
While(ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK)
||ButtonCheck(InputButtons, InputOldButtons, BT_ALTATTACK))
{InputButtons = GetPlayerInput(-1, INPUT_BUTTONS); Delay(1); InputOldButtons = InputButtons;}

	if(LearnAMove)
	{
		while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_MoveLearn_TakeMove",ChoiceWep,ChoiceID);Delay(3);}
		while(!CheckInventory("NetCheck_B")){NamedRequestScriptPuke("NET_MoveLearn_GiveMove",NewMove,ChoiceID);Delay(3);}
		while(!CheckInventory("NetCheck_C")){NamedRequestScriptPuke("NET_MoveLearn_TakeBP",Movecost);Delay(3);}
		while(!CheckInventory("NetCheck_D")){NamedRequestScriptPuke("NET_TMTeamPurchase",TMNumCache2[PlayerNumber()],PlayerDEXNum,PlayerLVL);Delay(3);}

		TakeInventory("NetCheck_A",99);
		TakeInventory("NetCheck_B",99);
		TakeInventory("NetCheck_C",99);
		TakeInventory("NetCheck_D",99);
		Delay(3);


	}

while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",0);Delay(1);}
}

Script "NET_MoveLearn_TakeMove" (int ChoiceWep, int ChoiceID) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_A",1);Terminate;}
	if(CheckInventory("NetCheck_A")) Terminate;

TakeInventory(StrParam(s:weapons_ammo[ChoiceWep][0],i:ChoiceID+1),99);
GiveInventory("NetCheck_A",1);
}

Script "NET_MoveLearn_GiveMove" (int NewMove, int ChoiceID) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_B",1);Terminate;}
	if(CheckInventory("NetCheck_B")) Terminate;

GiveInventory(StrParam(s:weapons_ammo[NewMove][0],i:ChoiceID+1),1);
SetCvar(StrParam(s:"PLAYER",i:PlayerNumber(),s:"_SLOT",i:ChoiceID+1),NewMove);
GiveInventory("SaveMovesetFlag",1);
GiveInventory("NetCheck_B",1);
}

Script "NET_MoveLearn_TakeBP" (int MoveCost) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_C",1);Terminate;}
	if(CheckInventory("NetCheck_C")) Terminate;

ACS_NamedExecuteAlways("BPPay",0,Movecost);
GiveInventory("NetCheck_C",1);
}

#endregion
//#endregion

//#region -=- Move Repositioning
#region -=- Move Repositioning

Script "PromptMoveReposition" (Void)
{
//==================[+]
// - Pre Start Up -
//==================[+]
if(StatusTime() == 0){print(s:"Cannot Adjust moves right now"); Terminate;}

while(CheckInventory("NetCheck_Freeze")){Delay(1);}
//GiveInventory("SpawnSafeZone",1);
ACS_NamedExecuteAlways("Menu_MoveReposition",0);
}

Script "Menu_MoveReposition" (Void) CLIENTSIDE
{
	if(Playernumber() != ConsolePlayerNumber()) {Terminate;}
	while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",1);Delay(1);}
//=======================[+]
// - Define Variables -
//=======================[+]
Int ChoiceID = 0;
Int WepToMove;
int WepRepo1;
int WepRepo2;
int MenuX = MenuXOrigin;
int Menuy = MenuYOrigin;
int slot;
int Safewep;
int SafeSlot;
int Move1 = -1,Move2 = -1,Move3 = -1,Move4 = -1;
str Str1 = "----",Str2 = "----",Str3 = "----",Str4 = "----";
str WepName;
str WepTag;
for(; slot<MAX_SLOTS+1; slot++) {
		for(int i = 0; ((i<MAX_WEAPONS_GLOBAL)&& Slot<5); i++) 
		{
			WepName = StrParam(s:weapons_ammo[i][0],i:slot);
			WepTag = weapons_ammo[i][2];
			if(CheckInventory(WepName)>0) 
			{
				switch(slot)
				{
					Case 1: Move1 = i; Str1 = WepTag; break;
					Case 2: Move2 = i; Str2 = WepTag; break;
					Case 3: Move3 = i; Str3 = WepTag; break;
					Case 4: Move4 = i; Str4 = WepTag; break;
				}
			}
		}
	}

// - Menu -
int InputButtons;
int InputOldButtons; 
int UpInput;
int DownInput;
Int ConfirmInput;
Int CancelInput;
Int MenuStates = 0;
Int MenuNextState; 
Bool MenuUp = true;
//=======================[+]
// - Menu Loop Begin -
//=======================[+]
while(MenuUp && GetActorProperty(0,APROP_HEALTH) > 0)
{		
	DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),15,10,0);
	SetHudSize(320,200,0);
	SetFont("STCFN");
	MenuStates = MenuNextState;
	// #------------------
	// # Begin Menustate 0
	// #------------------
	if(MenuStates == 0)
	{
	HudMessage(s:Str1; HUDMSG_FADEOUT, 500, 0, MenuX, Menuy, 0.2, 0);
	HudMessage(s:Str2; HUDMSG_FADEOUT, 501, 0, MenuX, Menuy+(MNL*1), 0.2, 0);
	HudMessage(s:Str3; HUDMSG_FADEOUT, 502, 0, MenuX, Menuy+(MNL*2), 0.2, 0);
	HudMessage(s:Str4; HUDMSG_FADEOUT, 503, 0, MenuX, Menuy+(MNL*3), 0.2, 0);
	HudMessage(s:"Exit"; HUDMSG_FADEOUT, 504, CR_ORANGE, MenuX, Menuy+(MNL*4), 0.2, 0);
	HudMessage(s:">>"; HUDMSG_FADEOUT, 505, 0, MenuX-16.0, Menuy+(MNL*ChoiceID), 0.2, 0);
	// - Check Inputs -
	if(CancelInput == 1 || ConfirmInput == 1 && ChoiceID == 4){Break;} //MenuUp = false;
	if(ConfirmInput == 1 && ChoiceID<4)
		{	// - Check if the menu option even has value -
			switch(ChoiceID)
			{
				Case 0: if(Move1 != -1){WepToMove = ChoiceID; MenuNextState = 1;} break;
				Case 1: if(Move2 != -1){WepToMove = ChoiceID; MenuNextState = 1;} break;
				Case 2: if(Move3 != -1){WepToMove = ChoiceID; MenuNextState = 1;} break;
				Case 3: if(Move4 != -1){WepToMove = ChoiceID; MenuNextState = 1;} break;
				default: ACS_Execute(979,0); break;
			}
			
		}
	// #------------------
	// # End Menustate 0
	// #------------------
	}
	// #------------------
	// # Begin Menustate 1
	// #------------------
	if(MenuStates == 1)
	{
	HudMessage(s:Str1; HUDMSG_FADEOUT, 500, 0, MenuX, Menuy, 0.2, 0);
	HudMessage(s:Str2; HUDMSG_FADEOUT, 501, 0, MenuX, Menuy+(MNL*1), 0.2, 0);
	HudMessage(s:Str3; HUDMSG_FADEOUT, 502, 0, MenuX, Menuy+(MNL*2), 0.2, 0);
	HudMessage(s:Str4; HUDMSG_FADEOUT, 503, 0, MenuX, Menuy+(MNL*3), 0.2, 0);
	HudMessage(s:"Back"; HUDMSG_FADEOUT, 504, CR_ORANGE, MenuX, Menuy+(MNL*4), 0.2, 0);
	HudMessage(s:">>"; HUDMSG_FADEOUT, 505, 0, MenuX-16.0, Menuy+(MNL*ChoiceID), 0.2, 0);
	HudMessage(s:"!!"; HUDMSG_FADEOUT, 506, 0, MenuX-30.0, Menuy+(MNL*WepToMove), 0.2, 0);
	// - Check Inputs -
	if(CancelInput == 1 || ConfirmInput == 1 && ChoiceID == 4){MenuNextState = 0;}
	if(ConfirmInput == 1 && ChoiceID<4 && WepToMove != ChoiceID)
		{
		// - Check if the menu option even has value -
		switch(ChoiceID)
		{
			Case 0: if(Move1 != -1){MenuNextState = 2;} break;
			Case 1: if(Move2 != -1){ MenuNextState = 2;} break;
			Case 2: if(Move3 != -1){ MenuNextState = 2;} break;
			Case 3: if(Move4 != -1){ MenuNextState = 2;} break;
			default: ACS_Execute(979,0); break;
		}
	}
	// #------------------
	// # End Menustate 1
	// #------------------
	}
	// #------------------
	// # Begin Menustate 2
	// #------------------
	if(MenuStates == 2)
	{
	/* -=-=-=-=-=-=-
	* Time to make the switch!
	*
	* Okay, so what I'm trying to do is take the weapon in slot "WepToMove", 
	* and swap it with the weapon ID in slot
	* "ChoiceID"
	*
	* WepToMove = first weapon choice
	* ChoiceID = Second weapon Choice
	*
	* so to keep this straight, if WepToMove is "0" and ChoiceID is "2", then that means I'm trying to swap
	* the values within "Move1" and "Move3"
	*
	* I'll store the appropriate Wep values in "WepRepo1" and "WepRepo2"
	*
	*
	* but first, let's switch the player over to a safe weapon, one that isn't being moved.
	* -=-=-=-=-=-=-
	*/ 

	if(WepToMove!=Move4 && ChoiceID!=Move4){Safewep = Move4; SafeSlot = 4;}
	if(WepToMove!=Move3 && ChoiceID!=Move3){Safewep = Move3; SafeSlot = 3;}
	if(WepToMove!=Move2 && ChoiceID!=Move2){Safewep = Move2; SafeSlot = 2;}
	if(WepToMove!=Move1 && ChoiceID!=Move1){Safewep = Move1; SafeSlot = 1;}
	SetWeapon(StrParam(s:weapons_ammo[Safewep][0],i:SafeSlot));
	LocalAmbientSound("misc/GravityWarn",128);
	switch(WepToMove)
	{
		Case 0: WepRepo1 = Move1; while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_MoveRepo_TakeMoveA",Move1,WepToMove);Delay(3);}break;
		Case 1: WepRepo1 = Move2; while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_MoveRepo_TakeMoveA",Move2,WepToMove);Delay(3);}break;
		Case 2: WepRepo1 = Move3; while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_MoveRepo_TakeMoveA",Move3,WepToMove);Delay(3);}break;
		Case 3: WepRepo1 = Move4; while(!CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_MoveRepo_TakeMoveA",Move4,WepToMove);Delay(3);}break;
	}
	switch(ChoiceID)
	{
		Case 0: WepRepo2 = Move1; while(!CheckInventory("NetCheck_B")){NamedRequestScriptPuke("NET_MoveRepo_TakeMoveB",Move1,ChoiceID);Delay(3);}break;
		Case 1: WepRepo2 = Move2; while(!CheckInventory("NetCheck_B")){NamedRequestScriptPuke("NET_MoveRepo_TakeMoveB",Move2,ChoiceID);Delay(3);}break;
		Case 2: WepRepo2 = Move3; while(!CheckInventory("NetCheck_B")){NamedRequestScriptPuke("NET_MoveRepo_TakeMoveB",Move3,ChoiceID);Delay(3);}break;
		Case 3: WepRepo2 = Move4; while(!CheckInventory("NetCheck_B")){NamedRequestScriptPuke("NET_MoveRepo_TakeMoveB",Move4,ChoiceID);Delay(3);}break;
	}
	// - Now to do the actual weapon swap -
	switch(WepToMove)
	{
		Case 0: Move1 = WepRepo2; while(!CheckInventory("NetCheck_C")){NamedRequestScriptPuke("NET_MoveRepo_GiveMoveA",Move1,WepToMove);Delay(3);}break;
		Case 1: Move2 = WepRepo2; while(!CheckInventory("NetCheck_C")){NamedRequestScriptPuke("NET_MoveRepo_GiveMoveA",Move2,WepToMove);Delay(3);}break;
		Case 2: Move3 = WepRepo2; while(!CheckInventory("NetCheck_C")){NamedRequestScriptPuke("NET_MoveRepo_GiveMoveA",Move3,WepToMove);Delay(3);}break;
		Case 3: Move4 = WepRepo2; while(!CheckInventory("NetCheck_C")){NamedRequestScriptPuke("NET_MoveRepo_GiveMoveA",Move4,WepToMove);Delay(3);}break;
	}
	switch(ChoiceID)
	{
		Case 0: Move1 = WepRepo1; while(!CheckInventory("NetCheck_D")){NamedRequestScriptPuke("NET_MoveRepo_GiveMoveB",Move1,ChoiceID);Delay(3);}break;
		Case 1: Move2 = WepRepo1; while(!CheckInventory("NetCheck_D")){NamedRequestScriptPuke("NET_MoveRepo_GiveMoveB",Move2,ChoiceID);Delay(3);}break;
		Case 2: Move3 = WepRepo1; while(!CheckInventory("NetCheck_D")){NamedRequestScriptPuke("NET_MoveRepo_GiveMoveB",Move3,ChoiceID);Delay(3);}break;
		Case 3: Move4 = WepRepo1; while(!CheckInventory("NetCheck_D")){NamedRequestScriptPuke("NET_MoveRepo_GiveMoveB",Move4,ChoiceID);Delay(3);}break;
	}
	// - rescan moves for hud -
		if(Move1 > 0){Str1 = weapons_ammo[Move1][2];}
		if(Move2 > 0){Str2 = weapons_ammo[Move2][2];}
		if(Move3 > 0){Str3 = weapons_ammo[Move3][2];}
		if(Move4 > 0){Str4 = weapons_ammo[Move4][2];}

	

	MenuNextState = 0;
	// #------------------
	// # End Menustate 2
	// #------------------
	}
		// - Grab Inputs -
		InputButtons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
		UpInput = ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD);
		DownInput = ButtonCheck(InputButtons, InputOldButtons, BT_BACK);
		ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
		CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);
		if(UpInput != DownInput)
			{
			if(UpInput == 1){ChoiceID--;}
			if(DownInput == 1){ChoiceID++;}
			}
		if(ChoiceID>4){ChoiceID = 0;}
		if(ChoiceID<0){ChoiceID = 4;}

	Delay(1);
	InputOldButtons = InputButtons;
	}
ClearMenuFrame();
while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",0);Delay(1);}
/*
GiveInventory("SaveMovesetFlag",1);
Delay(17);
setplayerproperty(0,0,4);
*/
//--
}

Script "NET_MoveRepo_TakeMoveA" (int MoveNum, int WepToMove) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_A",1);Terminate;}
	if(CheckInventory("NetCheck_A")) Terminate;

TakeInventory(StrParam(s:weapons_ammo[MoveNum][0],i:WepToMove+1),99);
GiveInventory("NetCheck_A",1);
}

Script "NET_MoveRepo_TakeMoveB" (int MoveNum, int WepToMove) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_B",1);Terminate;}
	if(CheckInventory("NetCheck_B")) Terminate;

TakeInventory(StrParam(s:weapons_ammo[MoveNum][0],i:WepToMove+1),99);
GiveInventory("NetCheck_B",1);
}

Script "NET_MoveRepo_GiveMoveA" (int MoveNum, int WepToMove) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_C",1);Terminate;}
	if(CheckInventory("NetCheck_C")) Terminate;

GiveInventory(StrParam(s:weapons_ammo[MoveNum][0],i:WepToMove+1),1);
SetCvar(StrParam(s:"PLAYER",i:PlayerNumber(),s:"_SLOT",i:WepToMove+1),MoveNum);
GiveInventory("SaveMovesetFlag",1);
GiveInventory("NetCheck_C",1);
}

Script "NET_MoveRepo_GiveMoveB" (int MoveNum, int WepToMove) NET
{
	if(!CheckInventory("InMenu")){Print(s:"Illegal netscript call!!");GiveInventory("NetCheck_D",1);Terminate;}
	if(CheckInventory("NetCheck_D")) Terminate;

GiveInventory(StrParam(s:weapons_ammo[MoveNum][0],i:WepToMove+1),1);
SetCvar(StrParam(s:"PLAYER",i:PlayerNumber(),s:"_SLOT",i:WepToMove+1),MoveNum);
GiveInventory("SaveMovesetFlag",1);
GiveInventory("NetCheck_D",1);
}

#endregion
//#endregion

//#region -=- Level up moves
#region -=- Level up moves 

int LevelUpMoveCache[64][60];

Script "PromptLevelUpMove" (Void) 
{
//==================[+]
// - Pre Start Up -
//==================[+]
if(StatusTime() == 0){print(s:"Cannot Adjust moves right now"); Terminate;}
if(GetCvar("sv_RentalsMode") == 1 &&
	GetCvar("sv_EnableMoveTutor") == 0){print(s:"Cannot Change moves"); Terminate;}
while(CheckInventory("NetCheck_Freeze")){Delay(1);}

//GiveInventory("SpawnSafeZone",1);
int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));

if(PlayerDEXNum > ENDDEX){ACS_NamedExecuteAlways("ImportTo_DexMovesetClient_A",0); Delay(1);}
ACS_NamedExecuteAlways("Menu_LevelUpMove",0);
}

Script "Menu_LevelUpMove" (Void) CLIENTSIDE
{
if(Playernumber() != ConsolePlayerNumber()) {Terminate;}
while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",1);Delay(1);}

//=======================[+]
// - Define Variables -
//=======================[+]
int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));
Int MoveFrameCap =6;
Int StartMoves = 4;
Int ChoiceID = 0;
Int ChoiceCap = PlayerLVL;
int MenuX = MenuXOrigin;
int Menuy = MenuYOrigin;
int MoveListVal;
int MoveListCount;
int CursorY;
int LearnMove = -1;
// - Menu -
int InputButtons;
int InputOldButtons; 
int UpInput;
int DownInput;
Int ConfirmInput;
Int CancelInput;
Int MenuStates = 0;
Int MenuNextState; 
int i;
int j;
int h;
Bool MenuUp = true;
Bool BGUp;
//=======================[+]
// - Menu Loop Begin -
//=======================[+]
while (MenuUp && GetActorProperty(0,APROP_HEALTH) > 0) {
	SetHudSize(320, 200, 0);
	SetFont("STCFN");
	MenuStates = MenuNextState;

	// #------------------
	// # Begin Menustate 0
	// #------------------
	if (MenuStates == 0) {

		MoveListCount = 0;
		j = 0;

		// Count number of moves
		For(int k = 0; k < PlayerLVL; k++) // + StartMoves - 1
		{
			//MoveListVal = MoveDex[PlayerDEXNum][k];
			//if (MoveListVal != -1) {LevelUpMoveCache[PlayerNumber()][MoveListCount] = MoveListVal; MoveListCount++;}
			
			For(h = 0; h < 4; h++)
			{
				MoveListVal = MoveDex2[PlayerDEXNum][k][h];
				if (MoveListVal != -1) {LevelUpMoveCache[PlayerNumber()][MoveListCount] = MoveListVal; MoveListCount++;}
				else{break;}
			}
		}
		// - Print the list of moves -
		For(i = 0; i < MoveListCount; i++)
		{
			if(ChoiceID >= 3 && ChoiceID < MoveListCount-3)
			{
				if(i < ChoiceID-3){continue;}
				if(i > ChoiceID+3){break;}
			}
			if(ChoiceID < 3)
			{
				if(i > 6){break;}
			}
			if(ChoiceID > MoveListCount-4)
			{
				if(i < MoveListCount-6){continue;}
			}

			MoveListVal = LevelUpMoveCache[PlayerNumber()][i];
			if (MoveListVal != -1) {
				HudMessage(s: weapons_ammo[MoveListVal][2]; HUDMSG_FADEOUT, 500 + j, 0, MenuX, Menuy + (MNL * j), 0.2, 0);
				j++;
			}

		}

		if (MoveListCount <= 0) {print(s: "No moves to learn"); break;} //MenuUp = false;
		else {
			if(!BGUp)
				{
					DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),15,6+MoveFrameCap,0); 
					DrawMenuFrame(MenuX-(8.0*12),MenuY-(8.0*9),38,8,PastMenuSize);
					BGup = True;
				}
			ChoiceCap = MoveListCount;
			if(MoveListCount>6)
			{
			if (ChoiceID > 3 && ChoiceID < MoveListCount-3){ CursorY = 3;}
			else if(ChoiceID >= MoveListCount-3){CursorY = 3 + (ChoiceID-(MoveListCount-3));}	
			else{CursorY = ChoiceID;}
			}
			else{CursorY = ChoiceID;}
			
			if(ChoiceID >= MoveListCount-3 && MoveListCount>6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (6), CR_ORANGE, MenuX, Menuy + (MNL * 6), 0.2, 0);}
			else if(MoveListCount<=6){HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (MoveListCount), CR_ORANGE, MenuX, Menuy + (MNL * MoveListCount), 0.2, 0);}
			HudMessage(s: ">>"; HUDMSG_FADEOUT, 515, 0, MenuX - 16.0, Menuy + (MNL * CursorY), 0.2, 0);

			//Draw Description
			str MoveLangNum = strParam(s:"M",s:strLeft("000",3-strlen(strParam(i:LevelUpMoveCache[PlayerNumber()][ChoiceID]))),i:LevelUpMoveCache[PlayerNumber()][ChoiceID]);
			str MoveLang = strParam(s:MoveLangNum,s:"_DESC");
			str MoveType = strParam(s:MoveLangNum,s:"_TYPE");
			str MoveCat = strParam(s:MoveLangNum,s:"_CATEGORY");
			if(ChoiceID < MoveListCount)
				{
					HudMessage(l:MoveLang; HUDMSG_FADEOUT, 517, CR_White, MenuX- (MNL * 10) , Menuy - (MNL * 8), 0.2, 0);
					HudMessage(l:MoveType,s:"  ",l:MoveCat; HUDMSG_FADEOUT, 516, 0, MenuX , Menuy - (MNL * 3 + 4.0), 0.2, 0);
				}
		}

		// - Grab Inputs -
		InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
		UpInput = ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD);
		DownInput = ButtonCheck(InputButtons, InputOldButtons, BT_BACK);
		ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
		CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);
		if (UpInput != DownInput) {
			if (UpInput == 1) {
				ChoiceID--;
				While(LevelUpMoveCache[PlayerNumber()][ChoiceID] == -1){ ChoiceID--; }
			}
			if (DownInput == 1) {
				ChoiceID++;
				While(LevelUpMoveCache[PlayerNumber()][ChoiceID] == -1
					&& ChoiceID != ChoiceCap)
				{ ChoiceID++; }
			}
		}
		if (ChoiceID > ChoiceCap) { ChoiceID = 0; }
		if (ChoiceID < 0) { ChoiceID = ChoiceCap; }
		if (CancelInput == 1 || ConfirmInput == 1 && ChoiceID == MoveListCount) {break;} //MenuUp = false;
		if (ConfirmInput == 1 && ChoiceID < MoveListCount) { LearnMove = LevelUpMoveCache[PlayerNumber()][ChoiceID];/*MoveDex[PlayerDEXNum][ChoiceID];*/ break;} //MenuUp = false;
		// #------------------
		// # End Menustate 0
		// #------------------
		Delay(1);
		InputOldButtons = InputButtons;
	}
} 

//=======================[+]
// - Menu Loop End -
//=======================[+]
ClearMenuFrame();
if(LearnMove > -1) 
	{ 
		InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
		While(ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK)
		||ButtonCheck(InputButtons, InputOldButtons, BT_ALTATTACK))
		{InputButtons = GetPlayerInput(-1, INPUT_BUTTONS); Delay(1); InputOldButtons = InputButtons;}
		//until(CheckInventory("NetCheck_A")){NamedRequestScriptPuke("NET_PromptMoveLearn",LearnMove);Delay(2);}
		//TakeInventory("NetCheck_A",99);
		ACS_NamedExecuteAlways("Menu_MoveLearn",0,LearnMove);
		//GiveInventory("SaveMovesetFlag",1);
	}
else{while(!CheckInventory("NetCheck_Freeze")){NamedRequestScriptPuke("NET_FreezePlayer",0);Delay(1);}}
}
#endregion
//#endregion

//#region -=- Branch Evo standard
#region -=- Branch Evo standard 


Script "PromptBranchEvo_Standard" (Void)
{
//==================[+]
// - Pre Start Up -
//==================[+]
if(StatusTime() == 0){print(s:"Cannot evolve right now"); Terminate;}
//if(!PlayerInGame(PlayerNumber())){Terminate;}
//=======================[+]
// - Define Variables -
//=======================[+]
int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));

/*

Int StartMoves = 4;
Int ChoiceID = 0;
int MoveListVal;
int MoveListCount;

int LearnMove = -1;
*/


Int ChoiceID = 0;
int MenuX = MenuXOrigin;
int Menuy = MenuYOrigin;
int CursorY;

int EvoBranchCount = EvoDEX[PlayerDEXNum][0];

int EvoBranch_1 = EvoDEX[PlayerDEXNum][2];
int EvoBranch_2 = EvoDEX[PlayerDEXNum][3];
int EvoBranch_3 = EvoDEX[PlayerDEXNum][4];

Int ChoiceCap = EvoBranchCount;
Int MoveFrameCap =EvoBranchCount+1;
// - Menu -
int InputButtons;
int InputOldButtons; 
int UpInput;
int DownInput;
Int ConfirmInput;
Int CancelInput;
Int MenuStates = 0;
Int MenuNextState; 
int i;
int j;
Bool MenuUp = true;
Bool BGUp;
//=======================[+]
// - Menu Loop Begin -
//=======================[+]
setplayerproperty(0,1,4);
//GiveInventory("SpawnSafeZone",1);
while (MenuUp && GetActorProperty(0,APROP_HEALTH) > 0) {
	SetHudSize(320, 200, 0);
	SetFont("STCFN");
	MenuStates = MenuNextState;

	// #------------------
	// # Begin Menustate 0
	// #------------------
	if (MenuStates == 0) {


		// - Print list of evolution paths -
		if(!BGUp){DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),15,6+MoveFrameCap,0); BGup = True;}

				if(EvoBranchCount > 1){HudMessage(s: SkinDEX[EvoBranch_1][0]; HUDMSG_FADEOUT, 500 + 0, 0, MenuX, Menuy + (MNL * 0), 0.2, 0);}
				if(EvoBranchCount >= 2){HudMessage(s: SkinDEX[EvoBranch_2][0]; HUDMSG_FADEOUT, 500 + 1, 0, MenuX, Menuy + (MNL * 1), 0.2, 0);}
				if(EvoBranchCount == 3){HudMessage(s: SkinDEX[EvoBranch_3][0]; HUDMSG_FADEOUT, 500 + 2, 0, MenuX, Menuy + (MNL * 2), 0.2, 0);}

			

			
			HudMessage(s: "Exit"; HUDMSG_FADEOUT, 500 + (EvoBranchCount+1), CR_ORANGE, MenuX, Menuy + (MNL * EvoBranchCount+1), 0.2, 0);
			HudMessage(s: ">>"; HUDMSG_FADEOUT, 515, 0, MenuX - 16.0, Menuy + (MNL * ChoiceID), 0.2, 0);
		

		// - Grab Inputs -
		InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
		UpInput = ButtonCheck(InputButtons, InputOldButtons, BT_FORWARD);
		DownInput = ButtonCheck(InputButtons, InputOldButtons, BT_BACK);
		ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
		CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);
		if (UpInput != DownInput) {
			if (UpInput == 1) {
				ChoiceID--;
			}
			if (DownInput == 1) {
				ChoiceID++;
			}
		}
		if (ChoiceID > ChoiceCap) { ChoiceID = 0; }
		if (ChoiceID < 0) { ChoiceID = ChoiceCap; }
		if (CancelInput == 1 || ConfirmInput == 1 && ChoiceID == EvoBranchCount) {break;} //MenuUp = false;
		if (ConfirmInput == 1 && ChoiceID < EvoBranchCount) 
		{ 



			ACS_NamedExecuteAlways("PlayerFormChange",0,EvoDEX[PlayerDEXNum][ChoiceID+2]);
            GiveInventory("EvolutionFX",1);
			print(s:"Evolved!");
			break;
		
		} //MenuUp = false;
		// #------------------
		// # End Menustate 0
		// #------------------
		Delay(1);
		InputOldButtons = InputButtons;
	}
	
} 


//=======================[+]
// - Menu Loop End -
//=======================[+]
ClearMenuFrame();

InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
While(ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK)
||ButtonCheck(InputButtons, InputOldButtons, BT_ALTATTACK))
{InputButtons = GetPlayerInput(-1, INPUT_BUTTONS); Delay(1); InputOldButtons = InputButtons;}
setplayerproperty(0,0,4);
}
#endregion
//#endregion

//#region -=- Display Status
#region -=- Display Status
Script "ShowPlayerStatus" (Void)
{
//==================[+]
// - Pre Start Up -
//==================[+]

//=======================[+]
// - Define Variables -
//=======================[+]
int MenuX = MenuXOrigin;
int Menuy = MenuYOrigin;

int MenuX2 = (MenuX+90.0);

int PlayerLVL = GetCvar(StrParam(s:"PlayerLevel_",i:PlayerNumber()));
int PlayerDEXNum = GetCvar(StrParam(s:"PlayerDEXNum_",i:PlayerNumber()));
int Player_HP = GetActorProperty(0,APROP_SPAWNHEALTH);
int Player_PATK = CheckInventory("Active_PAttack")+HeldStats(0);
int Player_SATK = CheckInventory("Active_SAttack")+HeldStats(1);
int Player_PDEF = CheckInventory("Active_PDefense")+HeldStats(2);
int Player_SDEF = CheckInventory("Active_SDefense")+HeldStats(3);
//int Player_SPD = CheckInventory("Active_Speed");

// - Menu -
int InputButtons;
int InputOldButtons; 
int UpInput;
int DownInput;
Int ConfirmInput;
Int CancelInput;
Int MenuStates = 0;
Int MenuNextState; 
int i;
int j;
Bool MenuUp = true;
Bool BGUp;
//=======================[+]
// - Menu Loop Begin -
//=======================[+]
setplayerproperty(0,1,4);
while (MenuUp && GetActorProperty(0,APROP_HEALTH) > 0) {
	SetHudSize(320, 200, 0);
	SetFont("STCFN");
	MenuStates = MenuNextState;

	// #------------------
	// # Begin Menustate 0
	// #------------------
	if (MenuStates == 0) {

		// - Print the list of stats -
			if(!BGUp){DrawMenuFrame(MenuX-(8.0*3),MenuY-(8.0*0),20,9,0); BGup = True;}
			HudMessage(s: "HP:"; HUDMSG_FADEOUT, 500, CR_WHITE, MenuX, Menuy + (MNL * 0), 0.2, 0);
			HudMessage(s: "Attack:"; HUDMSG_FADEOUT, 502, CR_WHITE, MenuX, Menuy + (MNL * 1), 0.2, 0);
			HudMessage(s: "Defense:"; HUDMSG_FADEOUT, 504, CR_WHITE, MenuX, Menuy + (MNL * 2), 0.2, 0);
			HudMessage(s: "Sp.Attack:"; HUDMSG_FADEOUT, 506, CR_WHITE, MenuX, Menuy + (MNL * 3), 0.2, 0);
			HudMessage(s: "Sp.Defense:"; HUDMSG_FADEOUT, 508, CR_WHITE, MenuX, Menuy + (MNL * 4), 0.2, 0);
			//HudMessage(s: "Speed:"; HUDMSG_FADEOUT, 510, CR_WHITE, MenuX, Menuy + (MNL * 5), 0.2, 0);
				HudMessage(i:Player_HP; HUDMSG_FADEOUT, 501, CR_ORANGE, MenuX2, Menuy + (MNL * 0), 0.2, 0);
				HudMessage(i:Player_PATK; HUDMSG_FADEOUT, 503, CR_ORANGE, MenuX2, Menuy + (MNL * 1), 0.2, 0);
				HudMessage(i:Player_PDEF; HUDMSG_FADEOUT, 505, CR_ORANGE, MenuX2, Menuy + (MNL * 2), 0.2, 0);
				HudMessage(i:Player_SATK; HUDMSG_FADEOUT, 507, CR_ORANGE, MenuX2, Menuy + (MNL * 3), 0.2, 0);
				HudMessage(i:Player_SDEF; HUDMSG_FADEOUT, 509, CR_ORANGE, MenuX2, Menuy + (MNL * 4), 0.2, 0);
				//HudMessage(i:Player_SPD; HUDMSG_FADEOUT, 511, CR_ORANGE, MenuX2, Menuy + (MNL * 5), 0.2, 0);


		// - Grab Inputs -
		InputButtons = GetPlayerInput(-1, INPUT_BUTTONS);
		ConfirmInput = ButtonCheck(InputButtons, InputOldButtons, BT_ATTACK);
		CancelInput = ButtonCheck(InputButtons, InputOldButtons, BT_AltATTACK);

		if (InputButtons > 0) {break;} //MenuUp = false;
		// #------------------
		// # End Menustate 0
		// #------------------
		Delay(1);
		InputOldButtons = InputButtons;
	}
} 

//=======================[+]
// - Menu Loop End -
//=======================[+]
ClearMenuFrame();
setplayerproperty(0,0,4);
}
#endregion
//#endregion

script "NET_freezeplayer" (int toggle) NET
{
	if(toggle >= 1){
		if(!CheckInventory("InMenu")){ACS_NamedExecuteAlways("MenuFreeze",0);}
		GiveInventory("NetCheck_Freeze",1);
	}
	if(toggle == 0){
		if(CheckInventory("InMenu")>0){
		TakeInventory("InMenu", 99);
		ACS_NamedExecuteAlways("PKMN_FreezePlayer",0,PLAYER_UNFREEZE,FREEZE_MENU);
		if(!CheckInventory("InMenu")){GiveInventory("NetCheck_Freeze",1);}
			
		}
	}
	
}

Script "MenuFreeze" (void)
{
	GiveInventory("InMenu", 1);
	ACS_NamedExecuteAlways("PKMN_FreezePlayer",0,PLAYER_FULLFREEZE,FREEZE_MENU);

	While(CheckInventory("InMenu")){Delay(1);}
	ACS_NamedExecuteAlways("PKMN_FreezePlayer",0,PLAYER_UNFREEZE,FREEZE_MENU);
}


script "NET_Unstuck" (void) NET
{
if(Playernumber() != ConsolePlayerNumber() )Terminate;
if(CheckInventory("UnstuckCooldown")){Log(s:"Must wait a few minutes to Unstuck again");Terminate;}

TakeInventory("InMenu", 99);
ACS_NamedExecuteAlways("PKMN_FreezePlayer",0,PLAYER_UNFREEZE,FREEZE_MENU);
//SetPlayerProperty(0, 0, PROP_FROZEN);
GiveInventory("UnstuckCooldown", 1);
}

Script "UnstuckFailMessage" (void) CLIENTSIDE
{
if(Playernumber() == ConsolePlayerNumber() ) {Log(s:"Must wait a few minutes to Unstuck again");}
}

//#region -=- Menu Backing
#region -=- Menu Backing 

Str MenuFrames[1] = {
	"MFRA",
};



Function Void DrawMenuFrame (Int Ox, int Oy, int h,int w, int MenuMid)
{
/*
 * Ox = Origin X
 * Oy = Origin Y
 * w = Width
 * H = Height
*/ 
int Mid = 2000 + MenuMid;
int Ofs = 8.0;
int k;
str sprite;
int SpriteDirA;
int SpriteDirB;
int HorBit;
int VertBit;
SetHudSize(320,240,0);
for (int i = 0; i < h+1; i++)
{// - Each Row -
	if(i == 0){HorBit = 1<<2;}
	else if(i == h){HorBit = 1<<4;}
	else{HorBit = 1<<0;}
	//-=-=-=-=
	for(int j = 0; j < w+1; j++)
	{// - We're going to get fancy and use a bitwise flag -
	if(j == 0){VertBit = 1<<3;}		
	else if(j == w){VertBit = 1<<1;}	
	else{VertBit = 1<<0;}
	// -=-=-=-=-
	//SpriteDirA |= VertBit;
	//SpriteDirA |= HorBit;
	SpriteDirA = HorBit|VertBit;
	SpriteDirB = MenuBitConvert(SpriteDirA);
	// -=-=-=-=-
	sprite = strparam(s:MenuFrames[0],i:SpriteDirB);
	//log(i:SpriteDirA,s:" Became ",i:SpriteDirB,s:" :: ",s:sprite);
	SetFont(sprite);
	HudMessage(s:"A"; HUDMSG_PLAIN, Mid+k, CR_red,Ox+(Ofs*i), Oy+(Ofs*j), 0,0);
	k++;
	}
j = 0;
}
PastMenuSize = k;
}

Function Void ClearMenuFrame (Void)
{
	int Mid = 2000;
	for (int i = 0; i < 2000; i++)
{
	HudMessage(s:""; HUDMSG_PLAIN, Mid+i, CR_red,0.0, 0.0, 2.0,0);
}
}


Function int MenuBitConvert (int Val)
{
	int output;
switch(Val)
	{
	Case 3: output = 1; break;
	Case 6: output = 2; break;
	Case 5: output = 3; break;
	Case 12: output = 4; break;
	Case 9: output = 5; break;
	Case 24: output = 6; break;
	Case 17: output = 7; break;
	Case 18: output = 8; break;
	}
return output;
}


Script "PrintBitangle" (void)
{

log(s:"Down Is ",i:1<<1|(1<<0));
log(s:"DownLeft Is ",i:(1<<1)|(1<<2));
log(s:"Left Is ",i:1<<2|(1<<0));
log(s:"UpLeft Is ",i:(1<<3)|(1<<2));
log(s:"Up Is ",i:1<<3|(1<<0));
log(s:"UpRight Is ",i:(1<<3)|(1<<4));
log(s:"Right Is ",i:1<<4|(1<<0));
log(s:"DownRight Is ",i:(1<<1)|(1<<4));

//log(s:"DownLeft Is also ",i:(1<<1)^(1<<3));

}

#endregion
//#endregion

Function int ScrollValue (int Input,int Dir, Int min, int Max)
{

Switch(Dir)
	{
	Case -1:
	Case 0: Input--; if(Input<min){Input = Max;}	break;
	Case 1: Input++; if(Input>Max){Input = min;} break;
	}

	return Input;
}