//#library "classacs"

//#include "zcommon.acs"
//#include "cscclib.acs"





//Ukiyama Scripts
Script "PKMNACS_UKIINFO" (int IsExplosion)
{
int ThePlayer = ActivatorTID();
int TotalDamage = ACS_NamedExecuteWithResult("PKMNACS_UKIDAMAGE", 0, 1);

SetHudSize(800, 680, True);
SetFont("SMALLFONT");
HudMessage(d:(TotalDamage),s:" damage";
HUDMSG_FADEOUT, 1, CR_GOLD, 60.1, 205.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 940.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 920.1, 5<<16);
SetFont("SMALLFONT");
HudMessage(s:"";
HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 900.1, 5<<16);

If(CheckActorInventory(ThePlayer, "SnipeFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Shot Size -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Fire Rate -Spread"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.1, 215.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Projectiles Fired -Spread -Fire Rate"; HUDMSG_FADEOUT, 2, CR_GOLD, 60.5, 215.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "GuidedFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Guided"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Arc"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.5, 5<<16);;}
If(CheckActorInventory(ThePlayer, "VelocityFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Speed +Ripper"; HUDMSG_FADEOUT, 3, CR_GOLD, 60.1, 225.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "NerfFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Damage Debuff"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "BouncingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+Bouncing"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
If(CheckActorInventory(ThePlayer, "ExplodingFlag")){SetFont("SMALLFONT"); HudMessage(s:"+EXPLOSIONS?!"; HUDMSG_FADEOUT, 4, CR_GOLD, 60.1, 235.1, 5<<16);;}
}

//Script to handle aiming of Uki's vision
Script "PKMNACS_UKIREMOTE" (void)
{
int UkiVisionTID = ActivatorTID() - 100;
If(ThingCount(T_NONE, UkiVisionTID))
	{
	ACS_ExecuteAlways(976,0);
	//SetActorState(UkiVisionTID, "RemoteControl");
	SetPlayerProperty(0, 1, 0);
	ChangeCamera(UkiVisionTID, 0, 0);
	Spawnspot("RemoteSFX", UkiVisionTID);
	While(CheckInventory("UkiRemoteFlag"))
		{
		If(GetPlayerInput(-1 , INPUT_BUTTONS) & BT_ATTACK)
			{
			//GiveActorInventory(UkiVisionTID, "UkiAttackFlag", 1);
			GiveInventory("UkiAttackFlag", 1);
			}
		Delay(1);
		}
	}
TakeInventory("UkiRemoteFlag", 1);
SetPlayerProperty(0, 0, 0);
ACS_ExecuteAlways(976,0);
ChangeCamera(0, 0, 0);
Spawnspot("RemoteSFX", 0);
}

//Script for Uki's weapon damage
Script "PKMNACS_UKIDAMAGE" (int IsExplosion, int Info)
{
int ThePlayer;
If(ActivatorTID() >=1000){ThePlayer = ActivatorTID();}
Else {ThePlayer = ACS_NamedExecuteWithResult("core_gettarget");}

If(ThePlayer < 1000){SetResultValue(10);terminate;}
int TotalDamage = 15;

If(CheckActorInventory(ThePlayer, "SnipeFlag")){TotalDamage += 20;}
If(CheckActorInventory(ThePlayer, "RapidFlag")){TotalDamage -= 5;}
If(CheckActorInventory(ThePlayer, "ShotgunFlag")){TotalDamage -= 6;}

If(CheckActorInventory(ThePlayer, "GuidedFlag")){TotalDamage+=1;}
If(CheckActorInventory(ThePlayer, "ArcingFlag")){TotalDamage += 7;}
If(CheckActorInventory(ThePlayer, "VelocityFlag") && IsExplosion == 0){TotalDamage = PKMNACS_round(TotalDamage*0.7);}

If(Info==0 && CheckActorInventory(ThePlayer, "ExplodingFlag"))
	{
	Switch(IsExplosion)
		{
		Case 0:
		If(!CheckActorInventory(ThePlayer, "VelocityFlag")){TotalDamage = PKMNACS_round(TotalDamage*0.1);}
		break;
		
		Case 1:
		TotalDamage = PKMNACS_round(TotalDamage*0.9);
		break;
		}
	}

If(CheckActorInventory(ThePlayer, "NerfFlag")){TotalDamage += 3;}
SetResultValue(TotalDamage);
}

//Script for the camera for Uki's vision
Script "PKMNACS_UKIREMOTEAIM" (void) CLIENTSIDE
{
int TargetPlayer= ActivatorTID() + 100;//ACS_ExecuteWithResult(257);
int PlayerPitch = GetActorPitch(TargetPlayer);
int PlayerAngle = GetActorAngle(TargetPlayer);
SetActorPitch(0, PlayerPitch);
SetActorAngle(0, PlayerAngle);
}

//End Ukiyama

////////////////////////////////////LaggyCorperal stuff
script "PKMNACS_CorpReload" (int ammoTypes, int maxAmmo)  //Reload script.
{
	
	//Ammo types inside and outside the weapon.
	int in, out;
	str inAmmo, outAmmo;
	
	int magSize;//Max ammo inside.
	
	switch(ammoTypes)
	{
		case 1: //Tommy gun	
		inAmmo = "TommyAmmo";
		outAmmo = "FatBullets";
		magSize = 30;
		break;
		Case 2: //Grand Ammo
		inAmmo = "GrandAmmo";
		outAmmo = "ShelbyvilleRound";
		magSize = 8;
		break;
		default:
		print(s:"Specify ammotype ya dork");
		break;
	}
	
	
	in = CheckInventory(inAmmo);
	out = CheckInventory(outAmmo);
	
	//print(s:inAmmo, d:in, s:outAmmo, d:out);
	
	//If maxAmmo is defined, do not reload more than that.
	if (maxAmmo != 0 && magSize > (maxAmmo + in))
	{
		magSize = (maxAmmo + in);
	}
	
	if (out < (magSize-in)) //Can't reload the full weapon
			{
				TakeInventory(outAmmo,out);
				GiveInventory(inAmmo,out);
			}
			else
			{
				TakeInventory(outAmmo, magSize-in);
				GiveInventory(inAmmo, magSize-in);
			}		
	
	
}















script "CBMTeamColor" (int ID, int Swap) //CBM's team color script, 1-4 used in respective order of teams. Refer to Red Mage's Subzero Field/Ice Cloak for examples.
{
if(Swap==1){
	if(ClassifyActor(ID) & ACTOR_PLAYER){
		if(GetCVar("teamlms")==1||GetCVar("ctf")==1||GetCVar("teamplay")==1||GetCVar("oneflagctf")==1||GetCVar("teampossession")==1||GetCVar("teamgame")==1 ){
			SetResultValue(GetPlayerInfo(ID-1000,PLAYERINFO_TEAM));
			terminate;
		}
	}
SetResultValue(-1); //TEAM_NONE is the equivalent, which is the fallback when there is no team.
}


if(!(ClassifyActor(ActivatorTID()) & ACTOR_PLAYER)) {
SetActivatorToTarget(0);
}
if(ClassifyActor(ActivatorTID()) & ACTOR_PLAYER) {
if(GetCVar("teamlms")==1||GetCVar("ctf")==1||GetCVar("teamplay")==1||GetCVar("oneflagctf")==1||GetCVar("teampossession")==1||GetCVar("teamgame")==1 ){SetResultValue(PlayerTeam());terminate;}
}
SetResultValue(-1);
}

