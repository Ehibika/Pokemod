actor DetectMove : WepMasterBase
{
Tag "Detect"
obituary "$OB_DETECT"
Weapon.AmmoUse 1
Weapon.AmmoGive 5
weapon.ammotype "DetectPP"
scale 2.0
Inventory.Pickupmessage "$PU_MEGABUSTER"
States
{
Spawn:
WEAP X 1
stop


Fire:
"####" BBB 1 A_Jumpif(CallACS("CheckWeaponFire",RC_C)==1,"Fire.Begin")
"####" B 0 A_Jump(256,"NoAmmo")
Goto NoAmmo

Fire.Begin:
"####" B 0
"####" B 0 A_Jumpifinventory("DetectGuard",1,"NoAmmo2")
"####" B 0 A_Jump(256,"Fire.Initiate")
Goto Fire.Initiate

Fire.Initiate:
"####" B 0 A_PlaySoundEx("move/Detect","Soundslot6")
"####" B 0 A_SpawnItemEx("DetectGlintFX",16,8,32)
"####" B 0 A_GiveInventory("DetectState_On")
"####" B 0 A_TakeInventory("DetectPP",1)
goto Fire.After

Fire.After:
"####" B 1 A_GiveInventory("FullRecovery_C")
"####" A 0 A_GiveInventory("MoveCooldown_3")
"####" B 0 A_Jump(256,"Fire.End")
Goto Fire.End

}
}

actor DetectMove1 : DetectMove {Weapon.SlotNumber 1}
actor DetectMove2 : DetectMove {Weapon.SlotNumber 2}
actor DetectMove3 : DetectMove {Weapon.SlotNumber 3}
actor DetectMove4 : DetectMove {Weapon.SlotNumber 4}

actor DetectMove5 : DetectMove 
{
Weapon.SlotNumber 5
States
{
Fire.End:
TNT1 A 0
TNT1 A 0 A_TakeInventory("DetectMove5",9)
TNT1 A 0 A_Jump(256,"Ready")
Goto Ready
}
}

//[+]========================================================================[+]
//-----------------------------|Ammo & Inventory|------------------------------
//[+]========================================================================[+]
actor DetectPP : Ammo {inventory.amount 1 inventory.Maxamount 5}
actor DetectGuard : BasePowerPro 
{
    -PICKUP
    inventory.amount 1 
    Powerup.Duration -3
    /*
    no point in defining painstates, the spectral flag protects from all harm except
    for missiles with spectral. so attacks that breech the evasion state of detect
    just need to have that flag

    I think I may use this for dig and dive to make them succeptible to surf, where there,
    I do use a painstate that blocks all spectral breeching moves but those.
    */
}

actor SmokeScreenGuard : PowerupGiver
{ //gotta put it here because smokescreen is defined before detect
+INVENTORY.AUTOACTIVATE
Powerup.Duration 35
powerup.type "DetectGuard"
}

actor AfterImageFX : PowerSpeed {inventory.amount 1 Powerup.Duration 17}
actor DetectDashTimer : Powerup {inventory.amount 1 Powerup.Duration 5}


Actor Detect_VWatcher : VisibilityWatcher
{
ReactionTime 70
States
{
CheckInv:
TNT1 A 1 A_JumpIfInTargetInventory("DetectGuard",1,"Reloop")
TNT1 A 1 A_JumpIfInTargetInventory("DetectDashTimer",1,"Reloop")
Goto Death
}
}




actor DetectState_On : CustomInventory
{
inventory.amount 1
inventory.maxamount 1
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 1
loop
Pickup:
TNT1 A 1 A_ChangeFlag("Spectral",1)
TNT1 A 0 A_GiveInventory("DetectGuard")
TNT1 A 0 A_SpawnItemEx("DetectWatcher")
TNT1 A 0 ACS_NamedExecuteAlways("DetectFlicker",0)

stop
}
}

actor DetectState_Off : CustomInventory
{
inventory.amount 1
inventory.maxamount 1
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 1
loop
Pickup:
TNT1 A 1 A_ChangeFlag("Spectral",0)
stop
}
}

actor DetectWatcher //: CustomInventory
{
+MISSILE
+RIPPER
+NOGRAVITY
+NOINTERACTION
Reactiontime 5
States
{
Spawn:
TNT1 A 0
Spawn2:
TNT1 A 1 
TNT1 A 1 A_JumpIfInTargetInventory("DetectGuard",1,"Spawn2")
Goto Spawn3

Spawn3:
TNT1 A 0 A_GiveToTarget("DetectState_Off")
Goto Death

Death:
DeathTake:
TNT1 A 0
TNT1 A 1 A_TakefromTarget("HypnoMark",999)
TNT1 A 1 A_TakefromTarget("HypnoRate",999)
stop
}
}

actor DetectGlintFX : BasicClientside
{
scale 2.5
ReactionTime 3
States
{
Spawn:
CRBM A 0
TNT1 A 0 A_GiveInventory("ProjectileCode",1)
GLNT ABCCDE 1 A_Warp(AAPTR_TARGET,16,32,64,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
stop
}
}